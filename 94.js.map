{"version":3,"sources":["webpack://UnataWidgets/./packages/enterprise-ui-error-window/ErrorWindow.tsx","webpack://UnataWidgets/./packages/enterprise-ui-error-window/index.ts"],"names":["ErrorWindow","props","lang","config","selectors","getConfig","styles","createStyles","tokens","title","margin","actions","paddingTop","size","spacing","medium","textAlign","buttonAlignment","footer","xxSmall","minimalButton","border","padding","cursor","color","expandableSection","actionButtonGroup","display","flexWrap","flexDirection","buttonDirection","width","tertiaryButton","utils","toPx","xxxSmall","verticalButtonSpacing","xSmall","displayName","useStyles","body","primaryButtonContent","requestId","secondaryButtonContent","tertiaryButtonContent","errorTitle","errorModal","defaultTitle","onClickPrimaryButton","onClickSecondaryButton","onClickTertiaryButton","buttonGutter","undefined","expanded","setExpanded","useState","data-test","variant","component","css","layout","dangerouslySetInnerHTML","__html","gutter","style","onClick","autoFocus","aria-expanded","hideText","showText","autoAdjust","content","clickToCopy","position","serviceUtils","copyToClipboard","memo"],"mappings":"iQA8CA,MAuCMA,EAA+BC,IACnC,MAAM,KAAEC,GAASC,IAAOC,UAAUC,YAE5BC,EA1CWL,IACjBM,aACEC,IAAU,CACRC,MAAO,CACLC,OAAQ,GAEVC,QAAS,CACPC,WAAYJ,EAAOK,KAAKC,QAAQC,OAChCC,UAAWf,EAAMgB,iBAAmB,QAEtCC,OAAQ,CACNN,WAAYJ,EAAOK,KAAKC,QAAQK,SAElCC,cAAe,CACbC,OAAQ,OACRC,QAAS,EACTC,OAAQ,UACRC,MAAO,WAETC,kBAAmB,CACjBb,WAAYJ,EAAOK,KAAKC,QAAQK,SAElCO,kBAAmB,CACjBC,QAAS,cACTC,SAAU,OACVC,cAAe5B,EAAM6B,iBAAmB,MACxCC,MAAiC,WAA1B9B,EAAM6B,gBAA+B,OAAS,QAEvDE,eAAgB,CACdV,QAASW,KAAMC,IAAK,KAAI1B,EAAOK,KAAKC,QAAQqB,YAE9CC,sBAAuB5B,EAAOK,KAAKC,QAAQuB,SAE7C,CAAEC,YAAa,eAhCjB/B,CAiCEN,GAQasC,CAAUtC,IACnB,KACJuC,EADI,gBAEJV,EAFI,qBAGJW,EAHI,UAIJC,EAJI,uBAKJC,EALI,sBAMJC,EANI,WAOJC,EAAa3C,EAAK4C,WAAWC,aAPzB,qBAQJC,EARI,uBASJC,EATI,sBAUJC,GACEjD,EAEEkD,EAAmC,WAApBrB,EAA+BxB,EAAO8B,2BAAwBgB,GAE5EC,EAAUC,GAAeC,oBAAS,GAYzC,OACE,YAAC,IAAD,WACE,YAAC,IAAD,UACE,YAAC,IAAD,UACE,YAAC,KAAD,CAAMC,YAAU,QAAQC,QAAQ,KAAKjC,MAAM,UAAUkC,UAAU,KAAKC,IAAKrD,EAAOG,MAAhF,SACGoC,QAIP,YAAC,IAAD,CAAce,OAAO,SAArB,UACE,YAAC,KAAD,CAAMH,QAAQ,QAAd,SACE,mBAEEI,wBAAyB,CAAEC,OAAQtB,QAGrCC,GAAwBE,GAA0BC,IAClD,mBAAKe,IAAKrD,EAAOK,QAAjB,SACE,YAAC,IAAD,CAAaoD,OAAQZ,EAAca,MAAO1D,EAAOoB,kBAAjD,UACGe,GACC,YAAC,IAAD,CAAQe,YAAU,iBAAiBS,QAASjB,EAAsBkB,WAAS,EAA3E,SACGzB,IAGJE,GACC,YAAC,IAAD,CACEa,YAAU,mBACVC,QAAQ,UACRQ,QAAShB,EACTiB,WAAWzB,QAAuBW,EAJpC,SAMGT,IAGJC,GACC,YAAC,IAAD,CACEY,YAAU,kBACVQ,MAAO1D,EAAO0B,eACdyB,QAAQ,OACRQ,QAASf,EACTgB,WAAWzB,IAAwBE,QAAyBS,EAL9D,SAOGR,SAMVF,GACC,mBAAKc,YAAU,uBAAuBG,IAAKrD,EAAOY,OAAlD,UACE,sBACEyC,IAAKrD,EAAOc,cACZ+C,gBAAed,EACfY,QA/DW,KACrBX,GAAaD,IA+DHG,YAAU,2BAJZ,SAME,YAAC,KAAD,CAAMC,QAAQ,UAAUjC,MAAM,gBAAgBkC,UAAU,OAAxD,SACGL,EAAWnD,EAAK4C,WAAWsB,SAAWlE,EAAK4C,WAAWuB,aAG1DhB,GACC,mBAAKM,IAAKrD,EAAOmB,kBAAmB+B,YAAU,kBAA9C,SACE,YAAC,KAAD,CAAMC,QAAQ,UAAUjC,MAAM,gBAA9B,UACGtB,EAAK4C,WAAWJ,UAGf,KAEF,YAAC,KAAD,CAAS4B,YAAU,EAACC,QAASrE,EAAK4C,WAAW0B,YAAaC,SAAS,MAAnE,SACE,sBACEd,IAAKrD,EAAOc,cACZ6C,QA7EQ,KACtBvB,GACFgC,IAAaC,gBAAgBjC,IA4Ebc,YAAU,yBAHZ,SAKGd,qBAaRkC,qBAAK5E,GCzMLA","file":"94.js","sourcesContent":["import React, { memo, useState } from 'react'\n\nimport {\n  Text,\n  Button,\n  createStyles,\n  ButtonGroup,\n  Tooltip,\n  ModalContainer,\n  ModalHeader,\n  ModalHeaderText,\n  ModalContent,\n  utils,\n} from '@instacart/cocktail'\nimport { utils as serviceUtils, config } from '@instacart/enterprise-services'\n\ntype Alignment = 'left' | 'center' | 'right'\ntype Direction = 'row' | 'column'\n\ninterface Props {\n  /** Title */\n  errorTitle?: string\n  /** Body content (rendered as HTML) */\n  body: string\n  /** Style overrides */\n  styles?: object\n  /** Button text (primary, optional) */\n  primaryButtonContent?: string\n  /** Button text (secondary, optional) */\n  secondaryButtonContent?: string\n  /** Button text (tertiary, optional) */\n  tertiaryButtonContent?: string\n  /** Button click handler (primary) */\n  onClickPrimaryButton?: (event: React.MouseEvent) => void\n  /** Button click handler (secondary) */\n  onClickSecondaryButton?: (event: React.MouseEvent) => void\n  /** Button click handler (tertiary) */\n  onClickTertiaryButton?: (event: React.MouseEvent) => void\n  /** Request ID (for debugging errors) */\n  requestId?: string\n  /** Button alignment */\n  buttonAlignment?: Alignment\n  /** Button direction */\n  buttonDirection?: Direction\n}\n\nconst useStyles = (props: Props) =>\n  createStyles(\n    tokens => ({\n      title: {\n        margin: 0,\n      },\n      actions: {\n        paddingTop: tokens.size.spacing.medium,\n        textAlign: props.buttonAlignment || 'left',\n      },\n      footer: {\n        paddingTop: tokens.size.spacing.xxSmall,\n      },\n      minimalButton: {\n        border: 'none',\n        padding: 0,\n        cursor: 'pointer',\n        color: 'inherit',\n      },\n      expandableSection: {\n        paddingTop: tokens.size.spacing.xxSmall,\n      },\n      actionButtonGroup: {\n        display: 'inline-flex',\n        flexWrap: 'wrap',\n        flexDirection: props.buttonDirection || 'row',\n        width: props.buttonDirection === 'column' ? '100%' : 'auto',\n      },\n      tertiaryButton: {\n        padding: utils.toPx`0 ${tokens.size.spacing.xxxSmall}`,\n      },\n      verticalButtonSpacing: tokens.size.spacing.xSmall,\n    }),\n    { displayName: 'ErrorWindow' }\n  )(props)\n\n/**\n * This component holds the \"window\" (modal excluding the overlay) for errors, with a toggleable error log.\n */\nconst ErrorWindow: React.FC<Props> = props => {\n  const { lang } = config.selectors.getConfig()\n\n  const styles = useStyles(props)\n  const {\n    body,\n    buttonDirection,\n    primaryButtonContent,\n    requestId,\n    secondaryButtonContent,\n    tertiaryButtonContent,\n    errorTitle = lang.errorModal.defaultTitle,\n    onClickPrimaryButton,\n    onClickSecondaryButton,\n    onClickTertiaryButton,\n  } = props\n\n  const buttonGutter = buttonDirection === 'column' ? styles.verticalButtonSpacing : undefined\n\n  const [expanded, setExpanded] = useState(false)\n\n  const toggleExpanded = () => {\n    setExpanded(!expanded)\n  }\n\n  const handleCopyRequestId = () => {\n    if (requestId) {\n      serviceUtils.copyToClipboard(requestId)\n    }\n  }\n\n  return (\n    <ModalContainer>\n      <ModalHeader>\n        <ModalHeaderText>\n          <Text data-test=\"title\" variant=\"h3\" color=\"inverse\" component=\"h1\" css={styles.title}>\n            {errorTitle}\n          </Text>\n        </ModalHeaderText>\n      </ModalHeader>\n      <ModalContent layout=\"dialog\">\n        <Text variant=\"large\">\n          <div\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{ __html: body }}\n          />\n        </Text>\n        {(primaryButtonContent || secondaryButtonContent || tertiaryButtonContent) && (\n          <div css={styles.actions}>\n            <ButtonGroup gutter={buttonGutter} style={styles.actionButtonGroup}>\n              {primaryButtonContent && (\n                <Button data-test=\"primary-button\" onClick={onClickPrimaryButton} autoFocus>\n                  {primaryButtonContent}\n                </Button>\n              )}\n              {secondaryButtonContent && (\n                <Button\n                  data-test=\"secondary-button\"\n                  variant=\"outline\"\n                  onClick={onClickSecondaryButton}\n                  autoFocus={primaryButtonContent ? undefined : true}\n                >\n                  {secondaryButtonContent}\n                </Button>\n              )}\n              {tertiaryButtonContent && (\n                <Button\n                  data-test=\"tertiary-button\"\n                  style={styles.tertiaryButton}\n                  variant=\"link\"\n                  onClick={onClickTertiaryButton}\n                  autoFocus={primaryButtonContent || secondaryButtonContent ? undefined : true}\n                >\n                  {tertiaryButtonContent}\n                </Button>\n              )}\n            </ButtonGroup>\n          </div>\n        )}\n        {requestId && (\n          <div data-test=\"request-id-container\" css={styles.footer}>\n            <button\n              css={styles.minimalButton}\n              aria-expanded={expanded}\n              onClick={toggleExpanded}\n              data-test=\"expandable-toggle-button\"\n            >\n              <Text variant=\"caption\" color=\"textSecondary\" component=\"span\">\n                {expanded ? lang.errorModal.hideText : lang.errorModal.showText}\n              </Text>\n            </button>\n            {expanded && (\n              <div css={styles.expandableSection} data-test=\"expanded-footer\">\n                <Text variant=\"caption\" color=\"textSecondary\">\n                  {lang.errorModal.requestId}\n                  {\n                    // eslint-disable-next-line react/jsx-no-literals\n                    ': '\n                  }\n                  <Tooltip autoAdjust content={lang.errorModal.clickToCopy} position=\"top\">\n                    <button\n                      css={styles.minimalButton}\n                      onClick={handleCopyRequestId}\n                      data-test=\"copy-request-id-button\"\n                    >\n                      {requestId}\n                    </button>\n                  </Tooltip>\n                </Text>\n              </div>\n            )}\n          </div>\n        )}\n      </ModalContent>\n    </ModalContainer>\n  )\n}\n\nexport default memo(ErrorWindow)\n","import ErrorWindow from './ErrorWindow'\n\nexport default ErrorWindow\n"],"sourceRoot":""}