{"version":3,"sources":["webpack://UnataWidgets/./node_modules/lodash/castArray.js","webpack://UnataWidgets/./app/angular/components/search/searchRecipesController.js"],"names":["isArray","module","exports","arguments","length","value","angular","controller","$filter","$scope","$state","Restangular","analytics","config","facetedFilterModalService","filterModalService","lang","recipeCategories","recipeTags","searchCategories","searchService","enableFacetedSearchFilters","term","params","search_term","page","current","filterTags","resetFacets","go","tags","category_id","shouldShowSeeAll","categoryFacets","rootCategories","flatMap","category","id","rootCategoryFacets","filter","facet","includes","toString","selectedCat","selectedCategories","Set","Array","has","onFilterModalClose","content","type","getTypeBy","state","openFacetedFilterModal","open","tagOptions","facetOptions","sort","searchTerm","isSearch","showSort","then","searchContext","hideFacets","$watch","newPage","oldPage","getSearchResultsText","results","item_count","templateAsString","values","resultsForTerm","count","label","nothingFound","searchResult","searchingFor","getPageHeaderResults","loadResults","loadingResults","offset","productsPerPage","limit","recipe_category_id","search_request_id","getSnrid","all","getList","logSegmentEvent","snrid","search_value","search_results_count","search_results","getRecipeListAnalytics","search_results_page","openFilterModal","filterCategory","categoryId"],"mappings":"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","file":"searchRecipesController.js","sourcesContent":["var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","import _ from 'lodash'\nimport angular from 'angular'\n\nexport default angular\n  .module('SearchRecipesControllerModule', [])\n  .controller(\n    'SearchRecipesController',\n    function (\n      $filter,\n      $scope,\n      $state,\n      Restangular,\n      analytics,\n      config,\n      facetedFilterModalService,\n      filterModalService,\n      lang,\n      recipeCategories,\n      recipeTags,\n      searchCategories,\n      searchService\n    ) {\n      $scope.enableFacetedSearchFilters = config.enableFacetedSearchFilters\n      $scope.term = $state.params.search_term || ''\n      $scope.page = { current: $state.params.page || 1 }\n      $scope.config = config\n\n      // A quick note for the future: this isn't actually a full facets\n      // implementation, but so we can leverage existing components built for\n      // faceted search it instead replicates the data structures of faceted\n      // search such as tags and caetgories\n      $scope.filterTags = recipeTags\n\n      $scope.resetFacets = () => {\n        $state.go('.', {\n          page: null,\n          tags: null,\n          category_id: null,\n        })\n      }\n\n      $scope.shouldShowSeeAll = () => $state.params.category_id\n\n      $scope.categoryFacets = searchCategories\n      const rootCategories = recipeCategories.flatMap(category => category.id)\n\n      $scope.rootCategoryFacets = $scope.categoryFacets.filter(facet =>\n        rootCategories.includes(facet.id.toString())\n      )\n\n      if ($state.params.category_id) {\n        const selectedCat = $state.params.category_id\n        const selectedCategories = new Set(Array.isArray(selectedCat) ? selectedCat : [selectedCat])\n        $scope.rootCategoryFacets = $scope.rootCategoryFacets.filter(({ id }) =>\n          selectedCategories.has(id)\n        )\n      }\n\n      const onFilterModalClose = ({ content, tags }) => {\n        const type = searchService.getTypeBy(content)\n\n        if (type) {\n          $state.go(type.state, { tags })\n        }\n      }\n\n      $scope.openFacetedFilterModal = function () {\n        facetedFilterModalService\n          .open({\n            content: 'Recipes',\n            tagOptions: $scope.filterTags,\n            facetOptions: $scope.filterTags,\n            sort: $state.params.sort,\n            tags: _.castArray($state.params.tags || []),\n            searchTerm: null,\n            isSearch: true,\n            showSort: false,\n          })\n          .then(onFilterModalClose)\n      }\n\n      $scope.searchContext = 'recipes'\n\n      $scope.tags = !_.isArray($state.params.tags) ? [$state.params.tags] : $state.params.tags\n\n      // Hide side filter menu\n      $scope.hideFacets = true\n\n      $scope.$watch('page.current', (newPage, oldPage) => {\n        if (oldPage && newPage !== oldPage) {\n          $state.go('.', { page: newPage })\n        }\n      })\n\n      $scope.getSearchResultsText = () => {\n        if ($scope.results && $scope.results.item_count) {\n          return lang.templateAsString(lang.values.resultsForTerm, {\n            count: $scope.results.item_count,\n            label: $filter('pluralize')('result', $scope.results.item_count),\n            searchTerm: $scope.term,\n          })\n        }\n        if ($scope.results && $scope.results.item_count === 0) {\n          return lang.templateAsString(lang.values.nothingFound, {\n            searchResult: $scope.term,\n          })\n        }\n        return lang.templateAsString(lang.values.searchingFor, {\n          searchTerm: $scope.term,\n        })\n      }\n\n      $scope.getPageHeaderResults = () => {\n        return $scope.getSearchResultsText()\n      }\n\n      $scope.loadResults = () => {\n        $scope.loadingResults = true\n\n        const params = {\n          search_term: $state.params.search_term,\n          offset: $scope.page.current ? ($scope.page.current - 1) * config.productsPerPage : 0,\n          limit: config.productsPerPage,\n          tags: $state.params.tags,\n          recipe_category_id: $state.params.category_id,\n        }\n\n        const search_request_id = searchService.getSnrid()\n\n        Restangular.all('recipes')\n          .getList(params, { 'X-Snr-Id': search_request_id })\n          .then(results => {\n            $scope.loadingResults = false\n            $scope.results = results\n            analytics.logSegmentEvent('search.recipe_search_results', {\n              snrid: search_request_id,\n              search_value: $scope.term,\n              search_results_count: results.length,\n              search_results: analytics.getRecipeListAnalytics(results, results.snrid),\n              search_results_page: $scope.page.current,\n            })\n          })\n      }\n\n      $scope.openFilterModal = function () {\n        filterModalService\n          .open({\n            content: 'Recipes',\n            isSearch: true,\n          })\n          .then(({ content }) => {\n            const type = searchService.getTypeBy(content)\n\n            if (type) {\n              $state.go(type.state)\n            }\n          })\n      }\n\n      $scope.filterCategory = function (categoryId) {\n        $state.go('.', { category_id: categoryId, page: null })\n      }\n    }\n  )\n"],"sourceRoot":""}