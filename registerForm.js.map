{"version":3,"sources":["webpack://UnataWidgets/./app/angular/components/shared/registerForm/registerForm.html","webpack://UnataWidgets/./app/angular/components/shared/registerForm/registerForm.js"],"names":["module","exports","angular","directive","replace","scope","socialSignOnData","subscriptionCode","onRegister","template","controller","$attrs","$q","$rootScope","$sce","$scope","analytics","anonymousIdService","auth","cartService","config","express","lang","recaptchaService","storesService","userAnalytics","utilService","values","formContext","context","invalidFocusFn","trigger","recaptcha","enabled","isEnabled","token","action","ACTIONS","REGISTER","account","email","password","loyalty_cards","card_number","delivery_address","enterprise_subscription_code","showRegistrationCardHelp","helpSrcContent","trustAsHtml","loadAssetImage","loyaltyCardNumberLocation","tooltipExpanded","toggleTooltip","collectAddressDuringRegistration","enableDefaultStoreFromAddress","getContext","intent","FULFILLMENT_TYPES","PICKUP","city","user","store","address","province","postal_code","DELIVERY","provinceObject","states","filter","val","name","provinceShortCode","length","value","address1","street_address","province_short","deliveryPostalCode","requirePrimaryCardInitDuringRegistration","primary_card","hasLoyalty","disableLoyaltyOnRegistrationPage","shouldDisplayLoyalty","hasUnataIssuedLoyaltyIds","shouldDisplayLoyaltyToggleLink","showLoyaltyIdField","toggleLoyalty","social_email","social_accounts","status","user_reg_info","first_name","last_name","phone_number","preferredPhoneKey","primary_number_key","phone","defaultRequired","onRecaptchaSuccess","recaptchaToken","$apply","onRecaptchaExpired","register","async","error","registerForm","$invalid","document","querySelectorAll","focus","confirmPassword","recaptchaError","copy","siteKey","googleRecaptcha","registering","defaultStoreId","storeNumber","countItems","addressParams","location","getAddressCoordinates","params","SHOPPING_MODES","INSTORE_LIST","show_ecommerce","CATERING","show_catering","show_pickup","lat","latitude","long","longitude","stores","fetch","id","err","getDefaultStoreId","store_id","updateProfile","then","saveNotifications","updateBackendId","setContext","sendUserUpdatedStore","sendAvailableStoreContexts","logUserRegistrationAttempt","success","loyalty_onboarding","improved_registration","enableImprovedRegistration","$broadcast","logFBUserRegistered","icExpress","getCurrentSubscription","logSegmentEvent","source","catch","response","data","message","resetLastCheckbox","setPreferredPhoneNumber","numberType","preferredNumberOnInitIndex","deliveryAddressPhoneNumberFields","preferredNumberOnInit","key"],"mappings":"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","file":"registerForm.js","sourcesContent":["module.exports = \"<form name=registerForm ng-submit=\\\"register(); analytics.logEvent('register', 'submit')\\\" invalid-focus focus-first-input novalidate> <div ng-if=\\\"formContext === 'mainRegister' && lang.values.registrationModalHelpText\\\" class=\\\"message warn form-row\\\"> <span class=icon-warning aria-hidden=true></span> {{::lang.values.registrationModalHelpText}} </div> <div ng-if=\\\"::(config.collectNameDuringRegistration && !config.collectAddressDuringRegistration)\\\"> <div class=form-row> <div class=col-1-2> <label for=registration-first-name-no-address>{{ ::lang.values.firstName }}</label> <input type=text class=input name=firstName ng-required=::config.requireNameDuringRegistration ng-model=account.first_name placeholder=\\\"{{ ::lang.values.firstName }} {{::config.requireNameDuringRegistration ? '*' : ''}}\\\" id=registration-first-name-no-address aria-label=\\\"{{::lang.aria.firstName}} {{::config.requireNameDuringRegistration ? lang.aria.required : ''}}\\\" aria-describedby=registration-first-name-no-address-error maxlength={{::config.maxNameLength}} /> <span id=registration-first-name-no-address-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && registerForm.firstName.$touched && registerForm.firstName.$invalid\\\">{{::lang.values.requiredForm.firstName}}</span> </div> <div class=col-1-2> <label for=registration-last-name-no-address>{{ ::lang.values.lastName }}</label> <input type=text class=input name=lastName ng-required=::config.requireNameDuringRegistration ng-model=account.last_name placeholder=\\\"{{ ::lang.values.lastName }} {{::config.requireNameDuringRegistration ? '*' : ''}}\\\" id=registration-last-name-no-address aria-label=\\\"{{::lang.aria.lastName}} {{::config.requireNameDuringRegistration ? lang.aria.required : ''}}\\\" aria-describedby=registration-last-name-no-address-error maxlength={{::config.maxNameLength}} /> <span id=registration-last-name-no-address-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && registerForm.lastName.$touched && registerForm.lastName.$invalid\\\">{{::lang.values.requiredForm.lastName}}</span> </div> </div> </div> <div class=form-row> <label for=registration-email>{{ ::lang.values.email }}</label> <div class=icon-left> <span class=\\\"icon-left icon-email\\\" aria-hidden=true></span> <input type=email class=input name=username required ng-model=account.email placeholder=\\\"{{ ::lang.values.email }} *\\\" id=registration-email aria-label=\\\"{{::lang.aria.email + ' ' + lang.aria.required}}\\\" aria-describedby=registration-email-error maxlength={{::config.maxEmailLength}} /> <span id=registration-email-error class=required-field ng-if=\\\"registerForm.username.$touched && registerForm.username.$invalid\\\">{{::lang.values.requiredForm.email}}</span> </div> </div> <div class=form-row> <label for=registration-password>{{ ::lang.values.password }}</label> <div class=icon-left> <span class=\\\"icon-left icon-key\\\" aria-hidden=true></span> <input ng-model=account.password name=password type=password required placeholder=\\\"{{ ::lang.values.password }} *\\\" id=registration-password class=\\\"input form-password\\\" aria-label=\\\"{{::lang.aria.password + ' ' + lang.aria.required}}\\\" aria-describedby=registration-password-error /> <div class=input-help ng-if=lang.values.passwordInputHelpText> {{::lang.values.passwordInputHelpText}} </div> <span id=registration-password-error class=required-field ng-if=\\\"registerForm.password.$touched && registerForm.password.$invalid\\\">{{::lang.values.requiredForm.password}}</span> </div> </div> <div class=form-row> <label for=registration-password-confirm>{{ ::lang.values.passwordConfirm }}</label> <div class=icon-left> <span class=\\\"icon-left icon-key\\\" aria-hidden=true></span> <input ng-model=confirmPassword name=passwordConfirm type=password required placeholder=\\\"{{ ::lang.values.passwordConfirm }} *\\\" id=registration-password-confirm class=\\\"input form-password-confirm\\\" aria-label=\\\"{{::lang.aria.passwordConfirmNew + ' ' + lang.aria.required}}\\\" aria-describedby=registration-password-confirm-error /> <span id=registration-password-confirm-error class=required-field ng-if=\\\"registerForm.passwordConfirm.$touched && registerForm.passwordConfirm.$invalid\\\">{{::lang.values.requiredForm.password}}</span> </div> </div> <div ng-if=\\\":: (shouldDisplayLoyalty && shouldDisplayLoyaltyToggleLink)\\\" class=show-hide-loyalty-box> <span role=button class=show-loyalty-id ng-click=toggleLoyalty() aria-controls=\\\"{{ showLoyaltyIdField ? 'register-loyalty-id-field' :  '' }}\\\" aria-expanded=\\\"{{ shouldDisplayLoyalty && (formContext === 'loyaltyRegister') && showLoyaltyIdField }}\\\">{{showLoyaltyIdField ? lang.values.dontHaveALoyaltyCard : lang.values.alreadyHaveALoyaltyCard}}</span> </div> <div ng-if=\\\"shouldDisplayLoyalty && (formContext === 'loyaltyRegister') && showLoyaltyIdField\\\" class=form-row id=register-loyalty-id-field> <label for=registration-loyalty>{{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}}</label> <div class=icon-left> <span class=\\\"icon-left icon-heart\\\" aria-hidden=true></span> <input type=text class=input ng-model=account.loyalty_cards[0].card_number placeholder=\\\"{{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}}\\\" pattern={{::config.loyaltyCardPattern}} maxlength={{::config.loyaltyCardMaxLength}} id=registration-loyalty /> <div class=input-help ng-if=lang.values.loyaltyInputHelpText> <span id=loyalty-input-help ng-bind-html=::lang.values.loyaltyInputHelpText></span> <button ng-if=::config.showRegistrationCardHelp type=button uib-popover-html=helpSrcContent popover-trigger=\\\"focus mouseenter\\\" description-id=loyalty-input-help-tooltip register-help aria-label=\\\"{{::lang.aria.imageOf}} {{::lang.values.loyaltyCardNumberLocation}}\\\" ng-click=toggleTooltip() aria-expanded=\\\"{{ tooltipExpanded }}\\\" aria-controls=loyalty-input-help></button> </div> </div> </div> <div ng-if=\\\"shouldDisplayLoyalty && (formContext === 'mainRegister')\\\" class=form-row> <div class=icon-left> <span class=\\\"icon-left icon-heart\\\" aria-hidden=true></span> <input type=text class=input ng-model=account.loyalty_cards[0].card_number placeholder={{::lang.values.loyaltyCard}} id=registration-loyalty pattern={{::config.loyaltyCardPattern}} maxlength={{::config.loyaltyCardMaxLength}} aria-label={{::lang.aria.loyaltyCard}} /> <div class=input-help ng-if=lang.values.loyaltyInputHelpText> <span id=loyalty-input-help ng-bind-html=::lang.values.loyaltyInputHelpText></span> <button ng-if=::config.showRegistrationCardHelp type=button uib-popover-html=helpSrcContent popover-trigger=\\\"focus mouseenter\\\" description-id=loyalty-input-help-tooltip register-help aria-label=\\\"{{::lang.aria.imageOf}} {{::lang.values.loyaltyCardNumberLocation}}\\\" ng-click=toggleTooltip() aria-expanded=\\\"{{ tooltipExpanded }}\\\" aria-controls=loyalty-input-help></button> </div> </div> </div> <div ng-if=\\\"::(config.collectPhoneNumbersDuringRegistration && !config.phoneDisplayNonePreferred)\\\" class=form-row> <div ng-repeat=\\\"field in ::config.deliveryAddressPhoneNumberFields\\\"> <input ng-if=\\\":: field.hideInRegistrationFormDuplicateValueKey\\\" ng-model=account[field.key] ng-value=\\\"account[field.key] = account[field.hideInRegistrationFormDuplicateValueKey]\\\" type=hidden /> <label for=registration-telephone-{{field.key}} ng-class=\\\"{ 'ng-required': account.primary_number_key === field.key &&\\n      config.collectPhoneNumbersDuringRegistration }\\\" ng-if=\\\":: !field.hideInRegistrationForm\\\">{{field.label}}</label> <div ng-if=\\\":: !field.hideInRegistrationForm\\\" class=form-row> <input type=tel class=input name={{$index}} ng-keyup=setPreferredPhoneNumber(field.key) ng-required=\\\"account.primary_number_key === field.key && config.collectPhoneNumbersDuringRegistration\\\" ng-model=account[field.key] update-on-enter ng-model-options=\\\"{allowInvalid: true, updateOn: 'blur'}\\\" placeholder=\\\"{{field.label}} {{account.primary_number_key === field.key && config.collectPhoneNumbersDuringRegistration ? '*' : ''}}\\\" aria-label=\\\"{{field.label}} {{account.primary_number_key === field.key && config.collectPhoneNumbersDuringRegistration ? lang.aria.required : ''}}\\\" aria-describedby=registration-telephone-{{field.key}}-error id=registration-telephone-{{field.key}} pattern={{::config.phoneNumberPattern}} maxlength={{::config.phoneNumberMaxLength}} /> <span id=registration-telephone-{{field.key}}-error class=required-field ng-if=\\\"account.primary_number_key === field.key && config.collectPhoneNumbersDuringRegistration && registerForm[$index].$touched && registerForm[$index].$invalid\\\"> {{::lang.values.requiredForm.phone}} </span> </div> </div> <div> <label for=registration-primary-number>{{::lang.values.preferredPhoneNumber}}</label> <div preferred-phone-number-select preferred-phone-number=account.primary_number_key input-id-attr=registration-primary-number></div> </div> </div> <div ng-if=\\\"::(config.collectPhoneNumbersDuringRegistration && config.phoneDisplayNonePreferred)\\\"> <div ng-repeat=\\\"field in config.deliveryAddressPhoneNumberFields\\\"> <input ng-if=\\\":: field.hideInRegistrationFormDuplicateValueKey\\\" ng-model=account[field.key] ng-value=\\\"account[field.key] = account[field.hideInRegistrationFormDuplicateValueKey]\\\" type=hidden /> <label for=registration-telephone-{{field.key}} ng-class=\\\"{'ng-required' : config.phone.defaultRequired === field.key}\\\">{{::field.label}}</label> <div ng-if=\\\":: !field.hideInRegistrationForm\\\" class=form-row> <input type=tel class=input name=phoneNumber-{{$index}} ng-keyup=setPreferredPhoneNumber(field.key) ng-required=\\\"field.key === config.phone.defaultRequired\\\" ng-model=account[field.key] update-on-enter ng-model-options=\\\"{allowInvalid: true, updateOn: 'blur'}\\\" placeholder=\\\"{{field.label}} {{field.key === config.phone.defaultRequired ? '*' : ''}}\\\" aria-label=\\\"{{field.label}} {{field.key === config.phone.defaultRequired ? lang.aria.required : ''}}\\\" id=registration-telephone-{{field.key}} pattern={{::config.phoneNumberPattern}} maxlength={{::config.phoneNumberMaxLength}} /> <div class=input-help ng-if=::field.helpText>{{::field.helpText}}</div> <span class=required-field ng-if=\\\"field.key === config.phone.defaultRequired && registerForm['phoneNumber-'+$index].$touched && registerForm['phoneNumber-'+$index].$invalid\\\"> {{::lang.values.requiredForm.phone}} </span> </div> </div> </div> <div ng-if=::config.collectAddressDuringRegistration> <div class=form-row> <div class=col-1-2> <label for=registration-first-name>{{ ::lang.values.firstName }}</label> <input type=text class=input name=firstName ng-required=config.requireNameDuringRegistration ng-model=account.delivery_address.first_name placeholder=\\\"{{ ::lang.values.firstName }} {{::config.requireNameDuringRegistration ? '*' : ''}}\\\" id=registration-first-name aria-label=\\\"{{::lang.aria.firstName}} {{::config.requireNameDuringRegistration ? lang.aria.required : ''}}\\\" maxlength={{::config.maxNameLength}} aria-describedby=registration-first-name-error /> <span id=registration-first-name-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && registerForm.firstName.$touched && registerForm.firstName.$invalid\\\">{{::lang.values.requiredForm.firstName}}</span> </div> <div class=col-1-2> <label for=registration-last-name>{{ ::lang.values.lastName }}</label> <input type=text class=input name=lastName ng-required=config.requireNameDuringRegistration ng-model=account.delivery_address.last_name placeholder=\\\"{{ ::lang.values.lastName }} {{::config.requireNameDuringRegistration ? '*' : ''}}\\\" id=registration-last-name aria-label=\\\"{{::lang.aria.lastName}} {{::config.requireNameDuringRegistration ? lang.aria.required : ''}}\\\" maxlength={{::config.maxNameLength}} aria-describedby=registration-last-name-error /> <span id=registration-last-name-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && registerForm.lastName.$touched && registerForm.lastName.$invalid\\\">{{::lang.values.requiredForm.lastName}}</span> </div> </div> <div class=form-row> <label for=registration-address1>{{::lang.values.addressLine1}}</label> <input type=text class=input name=address ng-model=account.delivery_address.address1 ng-required=::config.requireAddressDuringRegistration placeholder=\\\"{{::lang.values.addressLine1}} {{::config.requireAddressDuringRegistration ? '*' : ''}}\\\" aria-label=\\\"{{::lang.aria.streetAddress}} {{::config.requireAddressDuringRegistration ? lang.aria.required : ''}}\\\" id=registration-address1 maxlength={{::config.deliveryAddressFieldsMaxLength}} aria-describedby=registration-address1-error /> <span id=registration-address1-error class=required-field ng-if=\\\"config.requireAddressDuringRegistration && registerForm.address.$touched && registerForm.address.$invalid\\\">{{::lang.values.requiredForm.address}}</span> </div> <div class=form-row> <label for=registration-address2>{{lang.values.addressLine2}}</label> <input type=text class=input ng-model=account.delivery_address.address2 placeholder={{lang.values.addressLine2}} aria-label={{::lang.aria.addressLine2}} id=registration-address2 maxlength={{::config.deliveryAddressFieldsMaxLength}} /> </div> <div class=form-row ng-if=::config.profileAddress.showAddress3Field> <label for=registration-address3>{{lang.values.addressLine3}}</label> <input type=text class=input ng-model=account.delivery_address.address3 placeholder={{lang.values.addressLine3}} aria-label={{::lang.aria.addressLine3}} id=registration-address3 maxlength={{::config.deliveryAddressFieldsMaxLength}} /> </div> <div class=form-row> <div class=col-1-2> <label for=registration-city>City</label> <input type=text class=input name=city ng-model=account.delivery_address.city ng-required=::config.requireAddressDuringRegistration placeholder=\\\"City {{::config.requireAddressDuringRegistration ? '*' : ''}}\\\" aria-label=\\\"{{::lang.aria.city}} {{::config.requireAddressDuringRegistration ? lang.aria.required : ''}}\\\" id=registration-city maxlength={{config.formFieldMaxLengths.city}} aria-describedby=registration-city-error /> <span id=registration-city-error class=required-field ng-if=\\\"config.requireAddressDuringRegistration && registerForm.city.$touched && registerForm.city.$invalid\\\">{{::lang.values.requiredForm.city}}</span> </div> <div class=col-1-2> <label for=registration-postal-code>{{::lang.values.postalCode}}</label> <input type=text class=input name=postalCode ng-model=account.delivery_address.postal_code ng-required=\\\"::config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration\\\" placeholder=\\\"{{::lang.values.postalCode}} {{::config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration ? '*' : ''}}\\\" aria-label=\\\"{{::lang.aria.postalCode}} {{::config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration ? lang.aria.required : ''}}\\\" pattern={{::config.postalCodePattern}} id=registration-postal-code aria-describedby=registration-postal-code-error /> <span id=registration-postal-code-error class=required-field ng-if=\\\"(config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration) && registerForm.postalCode.$touched && registerForm.postalCode.$invalid\\\">{{::lang.values.requiredForm.postalCode}}</span> </div> </div> <div class=form-row> <label for=registration-state ng-class=\\\"{ 'ng-required': config.requireAddressDuringRegistration || config.requireStateDuringRegistration }\\\">{{::lang.values.selectAProvince}}</label> <div province-is-required=\\\"::config.requireAddressDuringRegistration || config.requireStateDuringRegistration\\\" province-select province=account.delivery_address.province input-id-attr=registration-state></div> <div class=input-help ng-if=\\\"config.enableDefaultStoreFromAddress && lang.values.defaultStoreFromAddress\\\"> {{::lang.values.defaultStoreFromAddress}} </div> <span id=registration-state-error class=required-field ng-if=\\\"config.requireAddressDuringRegistration && registerForm.province.$touched && registerForm.province.$invalid\\\">{{::lang.values.requiredForm.province}}</span> </div> </div> <div include-if-exists=\\\"'smsOptInContent.html'\\\" ng-model=account></div> <div class=form-row notification-settings-table show-group-titles=false at-registration=true on-save=saveNotifications></div> <div ng-repeat=\\\"field in ::config.customProfileFields\\\" ng-if=::field.showAtRegistration class=form-row> <div ng-switch on=::field.type ng-class=\\\"[(field.icon || ''), {'icon-left': field.icon}]\\\"> <input ng-switch-when=password type=password class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern=\\\"{{::field.pattern || '.*'}}\\\" maxlength=\\\"{{::field.maxLength || null}}\\\"/> <input ng-switch-when=text type=text class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern=\\\"{{::field.pattern || '.*'}}\\\" maxlength=\\\"{{::field.maxLength || null}}\\\"/> <input ng-switch-default type=text class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern=\\\"{{::field.pattern || '.*'}}\\\" maxlength=\\\"{{::field.maxLength || null}}\\\"/> </div> <div class=input-help ng-if=::field.helpText>{{::field.helpText}}</div> </div> <div class=form-row ng-if=\\\"config.subscriptions.enabled && subscriptionCode\\\"> <input type=text class=input ng-model=account.enterprise_subscription_code placeholder={{::lang.values.subscriptionRegisterCode}} aria-label={{::lang.aria.subscriptionRegisterCode}} id=registration-subscription /> </div> <div ng-if=::config.collectTermsAcceptanceDuringRegistration class=form-row> <input id=registration-terms-acceptance class=checkbox type=checkbox required ng-model=account.accept_terms /> <label for=registration-terms-acceptance><span ng-bind-html=lang.values.termsAndConditionsAcceptance></span></label> </div> <div include-if-exists=\\\"'registerFormExtraContent.html'\\\"></div> <recaptcha-checkbox ng-if=::recaptcha.enabled class=recaptcha-container action=recaptcha.action on-success=onRecaptchaSuccess on-expired=onRecaptchaExpired /> <button type=submit ng-disabled=registering id=registration-submit class=\\\"button mobile-bottom\\\" ng-class=\\\"{'loading': registering, 'loyalty-onboarding-call-to-action': loyaltyOnboardingStep}\\\"> <div ng-if=\\\"formContext === 'mainRegister'\\\" class=label> {{::lang.values.createNewAccount}} </div> <div ng-if=\\\"formContext === 'loyaltyRegister'\\\" class=label>{{::lang.values.signUp}}</div> </button> <div ng-if=error class=\\\"message error reveal form-row\\\" scroll-into-view scroll-container=.modal-content compile=error></div> <div class=terms-and-conditions> <span ng-bind-html=::config.loyaltyOnboarding.form.termsAndConditions></span> </div> </form> \";","import _ from 'lodash'\nimport angular from 'angular'\nimport { FULFILLMENT_TYPES } from '@app/angular/constants/checkout'\nimport { ACTIONS } from '@app/angular/constants/recaptcha'\nimport { SHOPPING_MODES } from '@app/angular/constants/context'\nimport template from './registerForm.html'\n\nexport default angular\n  .module('RegisterFormDirectiveModule', [])\n  .directive('registerForm', function () {\n    return {\n      replace: true,\n      scope: {\n        socialSignOnData: '=?',\n        subscriptionCode: '=?',\n        onRegister: '&?',\n      },\n      template,\n      controller(\n        $attrs,\n        $q,\n        $rootScope,\n        $sce,\n        $scope,\n        analytics,\n        anonymousIdService,\n        auth,\n        cartService,\n        config,\n        express,\n        lang,\n        recaptchaService,\n        storesService,\n        userAnalytics,\n        utilService,\n        values\n      ) {\n        // Defines whether the form is on the main register flow (context=\"mainRegister\") or the loyalty onboarding flow (context=\"loyaltyRegister\")\n        // This is passed in as an attribute when the directive is implemented.\n\n        $scope.formContext = $attrs.context\n        $scope.config = config\n        $scope.lang = lang\n        $scope.invalidFocusFn = {}\n        $scope.trigger = $attrs.trigger\n        $scope.recaptcha = {\n          enabled: recaptchaService.isEnabled(),\n          token: null,\n          action: ACTIONS.REGISTER,\n        }\n        $scope.account = {\n          email: null,\n          password: null,\n          loyalty_cards: [\n            {\n              card_number: null,\n            },\n          ],\n          delivery_address: {},\n          enterprise_subscription_code: $scope.subscriptionCode || '',\n        }\n\n        if (config.showRegistrationCardHelp) {\n          $scope.helpSrcContent = $sce.trustAsHtml(\n            `<img src=\"${utilService.loadAssetImage(\n              'images/card-help.jpg'\n              // Using labelledby as the lang value can contain markup\n            )}\" aria-labelledby=\"loyalty-input-help\" alt=\"${\n              lang.values.loyaltyCardNumberLocation\n            }\" title=\"${lang.values.loyaltyCardNumberLocation}\">`\n          )\n\n          $scope.tooltipExpanded = false\n\n          $scope.toggleTooltip = function () {\n            $scope.tooltipExpanded = !$scope.tooltipExpanded\n          }\n        }\n\n        if (\n          $scope.config.collectAddressDuringRegistration &&\n          $scope.config.enableDefaultStoreFromAddress\n        ) {\n          // autofill delivery address based on intent\n          if (auth.getContext().intent === FULFILLMENT_TYPES.PICKUP) {\n            $scope.account.delivery_address.city = auth.user.store?.address?.city\n            $scope.account.delivery_address.province = auth.user.store?.address?.province\n            $scope.account.delivery_address.postal_code = auth.user.store?.address?.postal_code\n          } else if (auth.getContext().intent === FULFILLMENT_TYPES.DELIVERY) {\n            // get short code from province\n            const provinceObject = values.states.filter(\n              val => auth.user.context?.province === val.name\n            )\n            const provinceShortCode = provinceObject.length ? provinceObject[0].value : ''\n\n            $scope.account.delivery_address.address1 = auth.user.context?.street_address\n            $scope.account.delivery_address.city = auth.user.context?.city\n            $scope.account.delivery_address.province =\n              auth.user.context?.province_short || provinceShortCode\n            $scope.account.delivery_address.postal_code = auth.user.context?.deliveryPostalCode\n          }\n        }\n\n        if (config.requirePrimaryCardInitDuringRegistration) {\n          $scope.account.loyalty_cards[0].primary_card = true\n        }\n\n        if (config.hasLoyalty && !config.disableLoyaltyOnRegistrationPage) {\n          $scope.shouldDisplayLoyalty = true\n\n          if (config.hasUnataIssuedLoyaltyIds && $scope.formContext === 'loyaltyRegister') {\n            $scope.shouldDisplayLoyaltyToggleLink = true\n\n            // Hide loyalty id field when the user first sees the form\n            $scope.showLoyaltyIdField = false\n          } else {\n            // Show loyalty id field when the user first sees the form\n            $scope.showLoyaltyIdField = true\n          }\n\n          $scope.toggleLoyalty = function () {\n            $scope.showLoyaltyIdField = !$scope.showLoyaltyIdField\n          }\n        }\n\n        if ($scope.socialSignOnData) {\n          $scope.account.email = $scope.socialSignOnData.social_email\n          $scope.account.social_accounts = _.map(\n            $scope.socialSignOnData.user.social_accounts,\n            account => {\n              account.status = true\n              return account\n            }\n          )\n\n          // Pre-populate form with first and last name returned by IDP\n          if ($scope.socialSignOnData.user_reg_info) {\n            const {\n              first_name = '',\n              last_name = '',\n              phone_number = '',\n            } = $scope.socialSignOnData.user_reg_info\n\n            if (config.collectAddressDuringRegistration) {\n              $scope.account.delivery_address.first_name = first_name\n              $scope.account.delivery_address.last_name = last_name\n            } else {\n              $scope.account.first_name = first_name\n              $scope.account.last_name = last_name\n            }\n\n            const preferredPhoneKey =\n              $scope.account.primary_number_key || config.phone.defaultRequired\n            $scope.account[preferredPhoneKey] = phone_number\n          }\n        }\n\n        $scope.onRecaptchaSuccess = recaptchaToken => {\n          $scope.$apply(() => {\n            $scope.recaptcha.token = recaptchaToken\n          })\n        }\n\n        $scope.onRecaptchaExpired = () => {\n          $scope.$apply(() => {\n            $scope.recaptcha.token = null\n          })\n        }\n\n        $scope.register = async () => {\n          delete $scope.error\n\n          if ($scope.registerForm.$invalid) {\n            document.querySelectorAll('.ng-invalid:not(form)')[0].focus()\n            return\n          }\n\n          if ($scope.account.password !== $scope.confirmPassword) {\n            $scope.error =\n              '<span class=\"icon-error\" aria-hidden=\"true\"></span><a ng-click=\"invalidFocusFn.goToFocus(\\'.form-password\\')\">Password</a> and <a ng-click=\"invalidFocusFn.goToFocus(\\'.form-password-confirm\\')\">confirmation</a> do not match.'\n            return\n          }\n          if ($scope.recaptcha.enabled && !$scope.recaptcha.token) {\n            $scope.error = $scope.lang.values.recaptchaError\n            return\n          }\n\n          const account = angular.copy($scope.account)\n\n          if (!account.loyalty_cards[0].card_number) {\n            account.loyalty_cards = []\n          }\n\n          if ($scope.recaptcha.enabled) {\n            account.recaptcha = {\n              token: $scope.recaptcha.token,\n              siteKey: config.googleRecaptcha?.siteKey,\n            }\n          }\n\n          $scope.registering = true\n\n          // Get default store from zip code unless user has explicitly set store\n          // or has added items to cart\n          const shouldGetDefaultStore =\n            $scope.config.enableDefaultStoreFromAddress &&\n            !(auth.getContext()?.storeNumber || cartService.countItems() > 0)\n\n          const defaultStoreId = shouldGetDefaultStore\n            ? await getDefaultStoreId(account.delivery_address, auth.getContext().intent)\n            : null\n\n          if (defaultStoreId) {\n            account.store_id = defaultStoreId\n          }\n\n          return auth\n            .updateProfile(account)\n            .then(() => $scope.saveNotifications())\n            .then(anonymousIdService.updateBackendId)\n            .then(() => {\n              return defaultStoreId\n                ? auth\n                    .setContext({ storeNumber: defaultStoreId })\n                    .then(auth.sendUserUpdatedStore(auth.user))\n                    .then(auth.sendAvailableStoreContexts(auth.user))\n                    .then(cartService.fetch)\n                : null\n            })\n            .then(() => {\n              if ($scope.trigger === 'loyaltyOnboarding') {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: true,\n                  loyalty_onboarding: true,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              } else {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: true,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              }\n\n              $rootScope.$broadcast('registered')\n              $scope.registering = false\n              analytics.logFBUserRegistered()\n\n              if (config.icExpress.enabled) {\n                express.getCurrentSubscription()\n              }\n\n              // Subscription analytics tracking\n              if (account.enterprise_subscription_code) {\n                // TODO: remove this event hook once analytics is ported over to react\n                analytics.logSegmentEvent('subscription.redeem_gift_code', {\n                  success: true,\n                  source: 'registration',\n                })\n              }\n\n              if ($scope.onRegister) {\n                return $scope.onRegister()\n              }\n            })\n            .catch(response => {\n              if ($scope.trigger === 'loyaltyOnboarding') {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: false,\n                  loyalty_onboarding: true,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              } else {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: false,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              }\n              $scope.error = response.data ? response.data.message : response.message\n              $scope.registering = false\n              $scope.recaptcha.token = null\n              recaptchaService.resetLastCheckbox()\n            })\n        }\n\n        // Check if a preferred phone number has been set, if it hasn't, use the number type of the input box that is calling this function.\n        // Only do this if they haven't already selected their preferred phone number\n\n        $scope.setPreferredPhoneNumber = function (numberType) {\n          if (!$scope.account.primary_number_key) {\n            $scope.account.primary_number_key = numberType\n          }\n        }\n\n        async function getDefaultStoreId({ address1, city, province, postal_code }, intent) {\n          try {\n            const addressParams =\n              address1 && city && province\n                ? `${address1}, ${city}, ${province}, ${postal_code}`\n                : postal_code\n\n            const location = await storesService.getAddressCoordinates(addressParams)\n\n            const params = {}\n\n            if (intent !== SHOPPING_MODES.INSTORE_LIST) {\n              params.show_ecommerce = true\n            }\n\n            if (intent === SHOPPING_MODES.CATERING) {\n              params.show_catering = true\n            } else if (intent === SHOPPING_MODES.PICKUP) {\n              params.show_pickup = true\n            }\n\n            if (location) {\n              params.lat = location.latitude\n              params.long = location.longitude\n            }\n\n            const stores = await storesService.fetch(params)\n            return stores.length > 0 ? stores[0].id : null\n          } catch (err) {\n            return null\n          }\n        }\n\n        // Initialize a phone number as \"preferred\" if indicated in the retailer's config\n        const preferredNumberOnInitIndex = _.findIndex(\n          config.deliveryAddressPhoneNumberFields,\n          'setPreferredOnInit'\n        )\n        if (preferredNumberOnInitIndex > -1) {\n          const preferredNumberOnInit =\n            config.deliveryAddressPhoneNumberFields[preferredNumberOnInitIndex]\n          $scope.setPreferredPhoneNumber(preferredNumberOnInit.key)\n        }\n      },\n    }\n  })\n"],"sourceRoot":""}