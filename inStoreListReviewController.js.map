{"version":3,"sources":["webpack://UnataWidgets/./app/angular/components/inStoreList/review/inStoreListReview.controller.js"],"names":["angular","module","controller","$sce","$scope","$state","Restangular","cartService","config","configurableProductService","imageURLService","lang","listPrintService","mobileService","navService","productDetailsModal","rateApp","shoppingSelectorService","sideCartSortModalService","undoRemove","utilService","vm","this","SORT_OPTIONS","getSortOptions","Object","assign","hasCartItems","cart","items","length","showOrderOnlineButton","canOrderOnline","breadcrumbs","getCartListReviewItems","cartLength","listItemsToReview","mobileAppRate","listItemsReviewed","promptAppReview","model","sortType","defaultShoppingListSort","sortedProductsBy","orderedGroups","outOfStockWarningPopover","trustAsHtml","values","outOfStockDescription","setSortType","newCustomItem","name","getListItems","customItems","getCustomItems","nonCustomItems","getNonCustomItems","getCategorizedProducts","getCategorizedProductsAndCategories","then","productsByCategory","orderedCategories","category","getProductsSortedByAisle","disableAisles","aisle","getAllProductsByAisle","sort","naturalSortFunc","isLoading","fetch","item","store_product","isSelected","$watch","lastUpdated","updateItemComment","currentEnterpriseService","actions","comment","sync","addCustomItem","itemName","addItem","customItemInput","removeCustomItem","removeItem","goToProductDetailsModal","product_config","open","id","location","analyticsSourceKeys","inStoreListReview","openShoppingSelectorModal","addNewCustomItem","toggleAddCustom","value","showAddCustom","document","querySelector","focus","blurAndHideKeyboard","plusButtonClicked","sortOptionNameByValue","find","option","triggerSortModal","showSortModal","sortOptions","results","incrementItem","decrementItem","quantity","showDeleteConfirm","updateItemQuantity","$originalQuantity","$onZeroFn","isZero","options","wasConfirmed","result","isMobile","showToast","emptyList","clear","deleteCheckedItems","uncheckAllItems","checkedItemsCount","getCheckedItemsCount","checkItem","updateItemChecked","checked","customItemOnBlur","isMobileApp","isIOS","onlineCartHasItems","newCheckoutFlow","cartReviewPage","enabled","isOffline","isItemCurrentlyOutOfStock","enterpriseProductService","utils","isProductAvailable"],"mappings":"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","file":"inStoreListReviewController.js","sourcesContent":["import _ from 'lodash'\nimport angular from 'angular'\nimport { product as enterpriseProductService } from '@instacart/enterprise-services'\nimport { getSortOptions } from '@app/utils/cart'\n\nexport default angular\n  .module('InStoreListReviewControllerModule', [])\n  .controller(\n    'InStoreListReviewController',\n    function InStoreListReviewController(\n      $sce,\n      $scope,\n      $state,\n      Restangular,\n      cartService,\n      config,\n      configurableProductService,\n      imageURLService,\n      lang,\n      listPrintService,\n      mobileService,\n      navService,\n      productDetailsModal,\n      rateApp,\n      shoppingSelectorService,\n      sideCartSortModalService,\n      undoRemove,\n      utilService\n    ) {\n      const vm = this\n      const SORT_OPTIONS = getSortOptions(lang)\n\n      Object.assign(\n        vm,\n        {\n          $state,\n          cartService,\n          config,\n          configurableProductService,\n          imageURLService,\n          lang,\n          listPrintService,\n          shoppingSelectorService,\n        },\n        {\n          hasCartItems: () => cartService.cart.items.length > 0,\n          showOrderOnlineButton: cartService.canOrderOnline(),\n        }\n      )\n\n      vm.breadcrumbs = navService.getCartListReviewItems()\n\n      // check for app review\n      const cartLength = _.get(cartService, 'cart.items.length', 0)\n      const listItemsToReview = config.mobileAppRate.listItemsReviewed\n      if (listItemsToReview !== -1) {\n        if (cartLength >= listItemsToReview) {\n          rateApp.promptAppReview()\n        }\n      }\n\n      vm.model = {\n        sortType: config.defaultShoppingListSort || 'category',\n        sortedProductsBy: {},\n        orderedGroups: {},\n      }\n\n      vm.outOfStockWarningPopover = $sce.trustAsHtml(\n        `<span class=\"icon-warning add-to-cart__warning\" aria-hidden=\"true\"></span> ${lang.values.outOfStockDescription}`\n      )\n\n      vm.setSortType = sortType => {\n        vm.model.sortType = sortType\n      }\n\n      vm.newCustomItem = {\n        name: '',\n      }\n\n      // Fetch custom and non-custom items in the list\n      const getListItems = () => {\n        vm.model.customItems = cartService.getCustomItems()\n        vm.model.nonCustomItems = cartService.getNonCustomItems()\n      }\n\n      // Get products sorted by Category\n      const getCategorizedProducts = () => {\n        cartService\n          .getCategorizedProductsAndCategories()\n          .then(({ productsByCategory, orderedCategories }) => {\n            vm.model.sortedProductsBy.category = productsByCategory\n            vm.model.orderedGroups.category = orderedCategories\n          })\n      }\n\n      // Get products sorted by Aisle\n      const getProductsSortedByAisle = () => {\n        if (!config.disableAisles) {\n          vm.model.sortedProductsBy.aisle = cartService.getAllProductsByAisle()\n          vm.model.orderedGroups.aisle = _.keys(vm.model.sortedProductsBy.aisle).sort(\n            utilService.naturalSortFunc\n          )\n        }\n      }\n\n      vm.model.isLoading = true\n      cartService.fetch().then(() => {\n        // Prepare the default user list (through cart service)\n        if (cartService.cart.items.length > 0) {\n          _.each(cartService.cart.items, item => {\n            if (item.store_product) {\n              item.isSelected = false\n            }\n          })\n\n          // Generate initial list of categorized products and custom items\n          getCategorizedProducts()\n          getListItems()\n          getProductsSortedByAisle()\n\n          // On cart update, re-set categorized products and custom items\n          $scope.$watch(\n            () => cartService.lastUpdated,\n            () => {\n              getCategorizedProducts()\n              getListItems()\n              getProductsSortedByAisle()\n            }\n          )\n        }\n\n        vm.model.isLoading = false\n      })\n\n      vm.updateItemComment = item => {\n        cartService.currentEnterpriseService.actions.updateItemComment(item, item.comment)\n        cartService.sync()\n      }\n\n      vm.addCustomItem = itemName => {\n        if (itemName.length) {\n          cartService.addItem(itemName, 1)\n          vm.model.customItemInput = ''\n        }\n      }\n\n      vm.removeCustomItem = itemName => cartService.removeItem(itemName)\n\n      vm.goToProductDetailsModal = item => {\n        if (!item.product_config) {\n          productDetailsModal.open(item.store_product.id, {\n            location: config.analyticsSourceKeys.inStoreListReview,\n          })\n        }\n      }\n\n      vm.openShoppingSelectorModal = () => {\n        shoppingSelectorService.open('shoppingContext')\n      }\n\n      vm.addNewCustomItem = function (itemName) {\n        if (itemName.length) {\n          cartService.addItem(itemName, 1)\n          vm.newCustomItem.name = ''\n          getListItems()\n        }\n      }\n\n      vm.toggleAddCustom = function (value) {\n        vm.model.showAddCustom = value\n        if (vm.model.showAddCustom) {\n          const customItemInput = document.querySelector('#add-custom-item-input')\n          customItemInput.focus()\n        } else {\n          utilService.blurAndHideKeyboard()\n        }\n      }\n\n      vm.plusButtonClicked = function () {\n        vm.toggleAddCustom(true)\n        if (vm.newCustomItem.name) {\n          vm.addNewCustomItem(vm.newCustomItem.name)\n        }\n      }\n\n      vm.sortOptionNameByValue = value => SORT_OPTIONS.find(option => option.value === value)?.name\n\n      vm.triggerSortModal = () => {\n        vm.showSortModal = true\n        sideCartSortModalService\n          .open({\n            sortOptions: SORT_OPTIONS,\n            sort: vm.model.sortType,\n          })\n          .then(\n            results => {\n              vm.setSortType(results.sort)\n              vm.showSortModal = false\n            },\n            () => {\n              vm.showSortModal = false\n            }\n          )\n      }\n\n      /**\n       * Adds a *quantity* of 1 item to the cart\n       *\n       * @param {object} item\n       * @returns {undefined}\n       */\n      vm.incrementItem = item => {\n        vm.cartService.incrementItem(item.store_product, 1, item.product_config)\n      }\n\n      /**\n       * Removes a *quantity* of 1 item to the cart\n       *\n       * @param {object} item\n       * @returns {undefined}\n       */\n      vm.decrementItem = item => {\n        item.quantity > 1\n          ? vm.cartService.decrementItem(item.store_product, 1, item.product_config)\n          : (item.showDeleteConfirm = true)\n      }\n\n      /**\n       * Triggered when the weight is updated\n       *\n       * @param {object} item                - The product item being updated\n       * @param {number} $originalQuantity   - [Provided] The original quantity before the change\n       * @param {function} $onZeroFn         - [Provided] Callback to trigger if the new quantity is zero\n       *\n       * @returns {undefined}\n       */\n      vm.updateItemQuantity = (item, $originalQuantity, $onZeroFn) => {\n        const isZero = item.quantity === 0\n        if ($onZeroFn && isZero) {\n          $onZeroFn()\n          item.quantity = $originalQuantity\n          return\n        }\n\n        const { store_product, quantity, product_config } = item\n        vm.cartService.updateItemQuantity(store_product, quantity, product_config?.options)\n      }\n\n      /**\n       * @param {_UIProductItem} item\n       * @param {boolean} wasConfirmed\n       */\n      vm.removeItem = (item, wasConfirmed) => {\n        item.showDeleteConfirm = false\n        const result = cartService.removeItem(\n          item,\n          item.product_config && item.product_config.options\n        )\n        if (!wasConfirmed && mobileService.isMobile && result?.then) {\n          result.then(() => undoRemove.showToast(item))\n        }\n      }\n\n      vm.emptyList = () => {\n        vm.cartService.clear()\n      }\n\n      vm.deleteCheckedItems = () => {\n        vm.cartService.deleteCheckedItems()\n      }\n\n      vm.uncheckAllItems = () => {\n        vm.cartService.uncheckAllItems()\n      }\n\n      vm.checkedItemsCount = () => vm.cartService.getCheckedItemsCount()\n\n      vm.checkItem = item => {\n        cartService.currentEnterpriseService.actions.updateItemChecked(item, item.checked)\n        cartService.sync()\n      }\n\n      vm.customItemOnBlur = () => {\n        if (!mobileService.isMobileApp() && mobileService.isMobile && mobileService.isIOS) {\n          this.addNewCustomItem(this.newCustomItem.name)\n          this.toggleAddCustom(false)\n        }\n      }\n\n      vm.onlineCartHasItems = () =>\n        config.newCheckoutFlow.cartReviewPage.enabled &&\n        cartService.cart?.items?.length > 0 &&\n        !vm.isOffline\n\n      vm.isItemCurrentlyOutOfStock = item => {\n        return !enterpriseProductService.utils.isProductAvailable(item.store_product)\n      }\n    }\n  )\n"],"sourceRoot":""}