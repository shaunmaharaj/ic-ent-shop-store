{"version":3,"sources":["webpack://UnataWidgets/./app/angular/components/account/orderHistory/orderAddItemsController.js","webpack://UnataWidgets/./app/angular/components/account/orderHistory/views/orderAddItems.html"],"names":["angular","module","controller","$filter","$rootScope","$scope","$state","$timeout","Restangular","alcoholValidation","cartService","config","errorModalService","lang","list","mobileService","vm","Object","assign","this","current","data","vmExtras","isLoading","syncing","setLoading","modifyingOrder","preModifyItemStash","cart","items","enterModifyState","order","name","then","all","cartUpsellCollection","getList","limit","productsPerPage","response","upsellResults","plain","isAppLoading","removeItems","catch","err","Error","finally","saveAndExit","shouldShowModal","open","orderEditItemStash","appendedItems","cloneDeep","exit","cancelOrderModification","PARENT_ROUTE","isLeaveUnattended","leave_unattended","hasAlcoholItems","getHasAlcohol","getUnsupportedAlcoholWarning","orderAddAlcoholUnattendedError","orderAddAlcoholUnattendedWarning","values","disableContinueButton","run","$templateCache","put","require","exports"],"mappings":"k5BAGeA,cACZC,OAAO,gCAAiC,IACxCC,WACC,0BAHW,gKAIX,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAKC,OAAOC,OAAOC,KAAd,OACNb,EAAOc,QAAQC,KAAKC,UADd,IAETP,gBACAQ,UAAW,IAAMjB,EAAOc,QAAQC,KAAKC,SAASC,WAAab,EAAYc,QACvEC,WAAYF,GAAcjB,EAAOc,QAAQC,KAAKC,SAASC,UAAYA,KAMhEnB,EAAWsB,iBACdV,EAAGS,YAAW,GAEdnB,EAAOc,QAAQC,KAAKC,SAASK,mBAAqBjB,EAAYkB,KAAKC,MAEnEnB,EACGoB,iBAAiBd,EAAGe,OAAO,EAAOzB,EAAOc,QAAQY,MACjDC,KAAK,IACJzB,EAAY0B,IAAIvB,EAAOwB,sBAAsBC,QAAQ,CAAEC,MAAOrB,EAAGsB,mBAElEL,KAAKM,GAAajC,EAAOc,QAAQC,KAAKC,SAASkB,cAAgBD,EAASE,SACxER,KAAK,KACJ7B,EAAWsC,cAAe,EAKnBhC,EAAYiC,YAAY,IAC1BrC,EAAOc,QAAQC,KAAKC,SAASK,sBAC7BjB,EAAYkB,KAAKC,UAGvBe,MAAMC,IACL,MAAM,IAAIC,MAAO,gCAA+BD,OAEjDE,QAAQ,KACP/B,EAAGS,YAAW,GACdrB,EAAWsC,cAAe,KAIhC1B,EAAGgC,YAAc,KACXvC,EAAkBwC,kBACpBxC,EAAkByC,OAAOjB,KAAK,KAC5B7B,EAAW+C,mBAAmBC,cAAgBC,IAAU3C,EAAYkB,KAAKC,OACzEb,EAAGsC,UAGLlD,EAAW+C,mBAAmBC,cAAgBC,IAAU3C,EAAYkB,KAAKC,OACzEb,EAAGsC,SAIPtC,EAAGsC,KAAO,KAIRtC,EAAGS,YAAW,GACdrB,EAAWsC,cAAe,EAE1BhC,EACGiC,YAAYjC,EAAYkB,KAAKC,OAC7BI,KAAK,IAAMvB,EAAY6C,wBAAwBvC,EAAGwC,gBAGvDxC,EAAGyC,kBAAoB,IAAMzC,EAAGe,MAAM2B,iBACtC1C,EAAG2C,gBAAkB,IAAMjD,EAAYkD,gBAEvC5C,EAAG6C,6BAA+B,KAChC,MAAM,+BAAEC,EAAF,iCAAkCC,GAAqClD,EAAKmD,OAClF,OAAOhD,EAAG2C,kBACNG,EACAC,GAGN/C,EAAGiD,sBAAwB,IAClBjD,EAAGO,aAAgBP,EAAGyC,qBAAuBzC,EAAG2C,qBAI5DO,IAnGY,kBAmGRC,IACHA,EAAeC,IAAI,qBAAsBC,EAAQ,6B,qCCvGrDpE,EAAOqE,QAAU","file":"orderAddItemsController.js","sourcesContent":["import angular from 'angular'\nimport cloneDeep from 'lodash/cloneDeep'\n\nexport default angular\n  .module('OrderAddItemsControllerModule', [])\n  .controller(\n    'OrderAddItemsController',\n    function (\n      $filter,\n      $rootScope,\n      $scope,\n      $state,\n      $timeout,\n      Restangular,\n      alcoholValidation,\n      cartService,\n      config,\n      errorModalService,\n      lang,\n      list,\n      mobileService\n    ) {\n      const vm = Object.assign(this, {\n        ...$state.current.data.vmExtras, // Include data from router\n        mobileService,\n        isLoading: () => $state.current.data.vmExtras.isLoading || cartService.syncing,\n        setLoading: isLoading => ($state.current.data.vmExtras.isLoading = isLoading),\n      })\n\n      // Quietly enter modify mode for usage by the add modal dialog\n      // Otherwise the existing cart gets mixed up with the new additions\n      // Remove all added items so that we're adding from scratch\n      if (!$rootScope.modifyingOrder) {\n        vm.setLoading(true)\n\n        $state.current.data.vmExtras.preModifyItemStash = cartService.cart.items\n\n        cartService\n          .enterModifyState(vm.order, false, $state.current.name)\n          .then(() =>\n            Restangular.all(config.cartUpsellCollection).getList({ limit: vm.productsPerPage })\n          )\n          .then(response => ($state.current.data.vmExtras.upsellResults = response.plain()))\n          .then(() => {\n            $rootScope.isAppLoading = true\n\n            // Calling enterModifyState causes asynchronous syncing, so calling remove causes\n            // an overriding sync where only the modify items are removed, but that results in\n            // pre-modify items not being removed by enterModifyState. Thus we remove both!\n            return cartService.removeItems([\n              ...$state.current.data.vmExtras.preModifyItemStash,\n              ...cartService.cart.items,\n            ])\n          })\n          .catch(err => {\n            throw new Error(`Ooops, something went wrong, ${err}`)\n          })\n          .finally(() => {\n            vm.setLoading(false)\n            $rootScope.isAppLoading = false\n          })\n      }\n\n      vm.saveAndExit = () => {\n        if (alcoholValidation.shouldShowModal()) {\n          alcoholValidation.open().then(() => {\n            $rootScope.orderEditItemStash.appendedItems = cloneDeep(cartService.cart.items)\n            vm.exit()\n          })\n        } else {\n          $rootScope.orderEditItemStash.appendedItems = cloneDeep(cartService.cart.items)\n          vm.exit()\n        }\n      }\n\n      vm.exit = () => {\n        // Just cancel modification - and redirect us to the correct route\n        // We clear items first because there's some kind of cart sync bug where edited items\n        // stick around, and we don't want them carrying over!\n        vm.setLoading(true)\n        $rootScope.isAppLoading = true\n\n        cartService\n          .removeItems(cartService.cart.items)\n          .then(() => cartService.cancelOrderModification(vm.PARENT_ROUTE))\n      }\n\n      vm.isLeaveUnattended = () => vm.order.leave_unattended\n      vm.hasAlcoholItems = () => cartService.getHasAlcohol()\n\n      vm.getUnsupportedAlcoholWarning = () => {\n        const { orderAddAlcoholUnattendedError, orderAddAlcoholUnattendedWarning } = lang.values\n        return vm.hasAlcoholItems()\n          ? orderAddAlcoholUnattendedError\n          : orderAddAlcoholUnattendedWarning\n      }\n\n      vm.disableContinueButton = () => {\n        return vm.isLoading() || (vm.isLeaveUnattended() && vm.hasAlcoholItems())\n      }\n    }\n  )\n  .run($templateCache => {\n    $templateCache.put('orderAddItems.html', require('./views/orderAddItems.html'))\n  })\n","module.exports = \"<div class=order-add-items-fixed> <simplified-header ng-if=::!$ctrl.mobileService.isMobile custom-ui-sref=\\\"'main.account.orderHistory.order.edit'\\\" screen-reader-title=::lang.values.addItemsToOrder></simplified-header> <div ng-if=::$ctrl.mobileService.isMobile> <div class=fixed-mobile-header> <button ng-click=$ctrl.exit() class=fixed-mobile-header__back-link aria-label={{::lang.values.addItemsToOrder}}></button> <div class=fixed-mobile-header__title-container> <h1 class=fixed-mobile-header__title>{{::lang.values.addItemsToOrder}}</h1> </div> </div> </div> <div ng-if=$ctrl.isLeaveUnattended() class=alcohol-unattended-warning> <alert type=\\\"{{$ctrl.hasAlcoholItems() ? 'info-warn' : 'info-positive'}}\\\"> {{ $ctrl.getUnsupportedAlcoholWarning() }} </alert> </div> <div class=order-add-on-ct> <div ng-include=\\\"'orderAddOn.html'\\\" ng-controller=\\\"OrderAddOnController as $ctrl\\\"></div> </div> <div class=order-add-on-footer-actions> <button class=\\\"button cart action\\\" ng-click=$ctrl.saveAndExit() ng-disabled=$ctrl.disableContinueButton() data-test=add-on-item-continue> <span ng-if=!$ctrl.isLoading()>{{::lang.values.continue}}</span> <loading-dots show=$ctrl.isLoading() /> </button> <button class=\\\"button hollow cart action\\\" ng-click=$ctrl.exit() ng-disabled=$ctrl.isLoading()> {{::lang.values.cancel}} </button> </div> </div> \";"],"sourceRoot":""}