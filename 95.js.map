{"version":3,"sources":["webpack://UnataWidgets/./packages/enterprise-ui-image-tile/ImageTileContent.js","webpack://UnataWidgets/./packages/enterprise-ui-image-tile/ImageTileThumbnail.js","webpack://UnataWidgets/./packages/enterprise-ui-image-tile/ImageTileTitle.js","webpack://UnataWidgets/./packages/enterprise-ui-image-tile/ImageIdsTileTitle.js","webpack://UnataWidgets/./packages/enterprise-ui-image-tile/ImageTile.js"],"names":["useStyles","createStyles","tokens","root","color","neutral","white","display","width","flex","fixed","bottom","position","displayName","ImageTileContent","forwardRef","props","ref","children","styles","css","defaultProps","propTypes","PropTypes","oneOfType","node","element","string","bool","memo","centered","backgroundColor","grey1","alignItems","justifyContent","icon","grey4","fontSize","ImageTileThumbnail","alt","iconClass","lazyLoad","lazyLoadProps","loading","height","src","fillStyle","commonProps","imageStyles","image","className","dotColor","number","object","oneOf","undefined","size","font","body","fontStyle","alignContent","padding","utils","toPx","spacing","xSmall","medium","caption","inverted","text","primary","overflow","marginTop","marginBottom","textTruncate","textOverflow","whiteSpace","ImageTileTitle","wrap","imageTileTitleProps","data-test","variant","withTokens","theme","colors","systemGrayscale10","s8","s12","typography","bodyMedium1","systemGrayscale70","textAlignLeft","textAlign","textAlignCenter","WebkitBoxOrient","WebkitLineClamp","ImageIdsTileTitle","config","useConfig","textAlignStyle","categoryTile","textCentered","background","borderRadius","flexDirection","textDecoration","idsRoot","hasBorder","border","thumbnailContainer","flexFlow","flexGrow","idsThumbnailContainer","multipleImages","ImageTile","fixedContent","images","imageGutter","link","style","imageTileTitle","hasMultipleImages","length","isIdsTile","react","enableIdsCategoryTile","imageTileContentProps","idsHeight","ImageTitleElement","thumbnailStyles","idsBorder","imageTileContainerProps","ImageTileElement","component","slice","map","idx","key","marginLeft","shape","arrayOf","href","onClick","func","target","ImageTileComponent","Content","Thumbnail","Title"],"mappings":"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","file":"95.js","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport { createStyles } from '@instacart/cocktail'\nimport PropTypes from 'prop-types'\n\nconst useStyles = createStyles(\n  tokens => ({\n    root: {\n      color: tokens.color.neutral.white,\n      display: 'flex',\n      width: '100%',\n\n      '& > *': {\n        flex: '1',\n      },\n    },\n    fixed: {\n      bottom: 0,\n      position: 'absolute',\n    },\n  }),\n  { displayName: 'ImageTileContent' }\n)\n\nconst ImageTileContent = forwardRef((props, ref) => {\n  const { children, fixed } = props\n  const styles = useStyles(props)\n\n  return (\n    <div ref={ref} css={[styles.root, fixed && styles.fixed]}>\n      {children}\n    </div>\n  )\n})\n\nImageTileContent.defaultProps = {\n  children: null,\n  fixed: false,\n}\n\nImageTileContent.propTypes = {\n  /** The imageTile content */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.element, PropTypes.string]),\n  /** Display content on top of thumbnail */\n  fixed: PropTypes.bool,\n}\n\nexport default memo(ImageTileContent)\n","import React, { forwardRef, memo } from 'react'\nimport { createStyles, LoadingDots, LazyImage, Image } from '@instacart/cocktail'\nimport PropTypes from 'prop-types'\n\nconst useStyles = createStyles(\n  tokens => ({\n    centered: {\n      backgroundColor: tokens.color.neutral.grey1,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%',\n    },\n    icon: {\n      color: tokens.color.neutral.grey4,\n      fontSize: 60,\n    },\n  }),\n  { displayName: 'ImageTileThumbnail' }\n)\n\nconst ImageTileThumbnail = forwardRef((props, ref) => {\n  const styles = useStyles(props)\n  const {\n    alt,\n    icon,\n    iconClass,\n    lazyLoad,\n    lazyLoadProps,\n    loading,\n    height,\n    width,\n    src,\n    fillStyle,\n    ...restProps\n  } = props\n\n  let children = null\n\n  const commonProps = {\n    ref,\n    alt,\n    src,\n    width,\n    height,\n    fillStyle,\n    ...restProps,\n  }\n\n  const imageStyles = {\n    root: { position: 'relative' },\n    image: { position: 'absolute', backgroundColor: 'white' },\n  }\n\n  // If there is an icon, pass to the thumbnail container as a child\n  if (icon) children = <div css={styles.icon} className={iconClass} />\n\n  if (loading) children = <LoadingDots dotColor={styles.icon.color} />\n\n  if (icon || loading) return <div css={styles.centered}>{children}</div>\n\n  if (lazyLoad) {\n    return <LazyImage styles={imageStyles} {...commonProps} {...lazyLoadProps} />\n  }\n\n  return <Image styles={imageStyles} {...commonProps} />\n})\n\nImageTileThumbnail.defaultProps = {\n  lazyLoad: true,\n  loading: false,\n  height: 'auto',\n  width: '100%',\n  fillStyle: 'cover',\n}\n\nImageTileThumbnail.propTypes = {\n  /** Thumbnail image source */\n  src: PropTypes.string,\n  /** Alt tag for the image */\n  alt: PropTypes.string,\n  /** Image height */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Image width */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Display an icon in place of the thumbnail */\n  icon: PropTypes.bool,\n  /** The icon class to pass to the element. To be deprecated and replaced with an icon element */\n  iconClass: PropTypes.string,\n  /** Lazy Load the image */\n  lazyLoad: PropTypes.bool,\n  /** Lazy Load props */\n  // eslint-disable-next-line react/forbid-prop-types\n  lazyLoadProps: PropTypes.object,\n  /** Loading state for thumbnail */\n  loading: PropTypes.bool,\n  /** Object-fit value for the image */\n  fillStyle: PropTypes.oneOf(['none', 'contain', 'cover', 'fill', 'scale-down', undefined]),\n}\n\nexport default memo(ImageTileThumbnail)\n","import React, { forwardRef } from 'react'\nimport { createStyles, withTokens, utils, Icon, Text } from '@instacart/cocktail'\nimport PropTypes from 'prop-types'\n\nconst useStyles = createStyles(\n  tokens => ({\n    root: {\n      backgroundColor: 'rgba(0, 0, 0, .5)',\n      bottom: 0,\n      color: tokens.color.neutral.white,\n      display: 'flex',\n      fontSize: tokens.size.font.body,\n      fontStyle: 'italic',\n      alignContent: 'center',\n      padding: utils.toPx`${tokens.size.spacing.xSmall} ${tokens.size.spacing.medium}`,\n      width: '100%',\n    },\n    icon: {\n      flex: '0 1 auto',\n      fontSize: tokens.size.font.caption,\n      display: 'flex',\n      alignItems: 'center',\n    },\n    inverted: {\n      backgroundColor: tokens.color.neutral.white,\n      color: tokens.color.text.primary,\n    },\n    text: {\n      flex: '1',\n      overflow: 'hidden',\n      marginTop: 0,\n      marginBottom: 0,\n    },\n    textTruncate: {\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    },\n  }),\n  { displayName: 'ImageTileTitle' }\n)\n\nconst ImageTileTitle = forwardRef(({ children, iconClass, inverted, wrap }, ref) => {\n  const styles = useStyles()\n\n  const imageTileTitleProps = {\n    css: [styles.root, inverted && styles.inverted],\n  }\n\n  return (\n    <div ref={ref} {...imageTileTitleProps} data-test=\"title\">\n      <Text variant=\"body\" css={[styles.text, !wrap && styles.textTruncate]}>\n        {children}\n      </Text>\n      {iconClass && (\n        <div css={styles.icon}>\n          <Icon icon={iconClass} size={styles.icon.fontSize} />\n        </div>\n      )}\n    </div>\n  )\n})\n\nImageTileTitle.defaultProps = {\n  inverted: false,\n  wrap: false,\n}\n\nImageTileTitle.propTypes = {\n  /** The title text/elements */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.element, PropTypes.string]),\n  /** Icon class to be displayed along with the title */\n  iconClass: PropTypes.string,\n  /** Determine if the title colors should be inverted */\n  inverted: PropTypes.bool,\n  /** Wrap title text */\n  wrap: PropTypes.bool,\n  /** Injected design tokens */\n  // eslint-disable-next-line react/forbid-prop-types\n  tokens: PropTypes.object,\n}\n\nexport default withTokens(ImageTileTitle)\n","import React, { forwardRef } from 'react'\nimport { Text } from '@instacart/cocktail'\nimport { createStyles } from '@app/react/common/hooks/createStyles'\nimport { useConfig } from '@app/services/config/hooks'\nimport { spacing } from '@instacart/ids-core'\nimport PropTypes from 'prop-types'\n\nconst useStyles = createStyles(\n  theme => ({\n    root: {\n      backgroundColor: theme.colors.systemGrayscale10,\n      display: 'flex',\n      flex: '0 1 auto',\n      padding: `${spacing.s8}px ${spacing.s12}px`,\n      width: '100%',\n    },\n    text: {\n      flex: '1',\n      overflow: 'hidden',\n      ...theme.typography.bodyMedium1,\n      color: theme.colors.systemGrayscale70,\n    },\n    textAlignLeft: {\n      textAlign: 'left',\n    },\n    textAlignCenter: {\n      textAlign: 'center',\n    },\n    textTruncate: {\n      display: '-webkit-box',\n      textOverflow: 'ellipsis',\n      WebkitBoxOrient: 'vertical',\n      WebkitLineClamp: '2',\n    },\n  }),\n  { displayName: 'ImageIdsTileTitle' }\n)\n\nconst ImageIdsTileTitle = forwardRef(({ children, wrap }, ref) => {\n  const config = useConfig()\n  const styles = useStyles()\n  const textAlignStyle = config.categoryTile?.textCentered\n    ? styles.textAlignCenter\n    : styles.textAlignLeft\n\n  const imageTileTitleProps = {\n    css: styles.root,\n  }\n\n  return (\n    <div ref={ref} {...imageTileTitleProps} data-test=\"ids-title\">\n      <Text variant=\"body\" css={[styles.text, textAlignStyle, !wrap && styles.textTruncate]}>\n        {children}\n      </Text>\n    </div>\n  )\n})\n\nImageIdsTileTitle.defaultProps = {\n  inverted: false,\n  wrap: false,\n}\n\nImageIdsTileTitle.propTypes = {\n  /** The title text/elements */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.element, PropTypes.string]),\n  /** Icon class to be displayed along with the title */\n  iconClass: PropTypes.string,\n  /** Determine if the title colors should be inverted */\n  inverted: PropTypes.bool,\n  /** Wrap title text */\n  wrap: PropTypes.bool,\n  /** Injected design tokens */\n  // eslint-disable-next-line react/forbid-prop-types\n  tokens: PropTypes.object,\n}\n\nexport default ImageIdsTileTitle\n","import { createStyles } from '@app/react/common/hooks/createStyles'\nimport { useConfig } from '@app/services/config/hooks'\n\nimport PropTypes from 'prop-types'\nimport React, { Fragment, forwardRef, memo } from 'react'\n\nimport ImageTileContent from './ImageTileContent'\nimport ImageTileThumbnail from './ImageTileThumbnail'\nimport ImageTileTitle from './ImageTileTitle'\nimport ImageIdsTileTitle from './ImageIdsTileTitle'\n\nconst useStyles = createStyles(theme => ({\n  root: {\n    background: theme.colors.systemGrayscale10,\n    borderRadius: '2px',\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    position: 'relative',\n    textDecoration: 'none',\n    width: '100%',\n  },\n  idsRoot: {\n    borderRadius: '12px',\n  },\n  hasBorder: {\n    border: `1px solid ${theme.colors.systemGrayscale10}`,\n  },\n  thumbnailContainer: {\n    display: 'inline-flex',\n    width: '100%',\n    flexFlow: 'wrap',\n    flexGrow: 1,\n  },\n  idsThumbnailContainer: {\n    display: 'inline-flex',\n    width: '100%',\n    flexFlow: 'wrap',\n  },\n  multipleImages: {\n    flexFlow: 'column wrap',\n    display: 'flex',\n  },\n}))\n\nconst ImageTile = forwardRef((props, ref) => {\n  const styles = useStyles(props)\n  const {\n    border,\n    children,\n    fixedContent,\n    images,\n    imageGutter,\n    lazyLoad,\n    lazyLoadProps,\n    link,\n    style,\n    imageTileTitle,\n  } = props\n  const hasMultipleImages = images.length > 1\n\n  const config = useConfig()\n\n  /** Start IDS Tile Specific styles */\n  const isIdsTile = config.react?.enableIdsCategoryTile\n\n  const imageTileTitleProps = {\n    ...imageTileTitle,\n    children: imageTileTitle.text,\n  }\n\n  const imageTileContentProps = {\n    fixed: isIdsTile ? false : fixedContent,\n  }\n\n  const idsHeight = isIdsTile ? '230px' : props.height\n  const ImageTitleElement = isIdsTile ? ImageIdsTileTitle : ImageTileTitle\n  const thumbnailStyles = isIdsTile ? styles.idsThumbnailContainer : styles.thumbnailContainer\n  const idsBorder = isIdsTile ? true : border\n  /** END IDS Tile Specific styles */\n\n  let imageTileContainerProps = {\n    css: [\n      styles.root,\n      isIdsTile && styles.idsRoot,\n      idsBorder && styles.hasBorder,\n      hasMultipleImages && styles.multipleImages,\n      { height: idsHeight },\n    ],\n    style,\n  }\n  let ImageTileElement = 'div'\n\n  // If there are link props, change the tag\n  if (link) {\n    ImageTileElement = 'a'\n    imageTileContainerProps = {\n      ...imageTileContainerProps,\n      ...link,\n    }\n  }\n\n  const component = (\n    <Fragment>\n      {children || (\n        <Fragment>\n          <div style={thumbnailStyles} data-test=\"image-tile\">\n            {images.slice(0, 4).map((image, idx) => {\n              const key = image.src + idx\n              return (\n                <ImageTileThumbnail\n                  key={key}\n                  {...image}\n                  css={{\n                    flex: `1 1 calc(50% - ${imageGutter}px)`,\n                    marginTop: idx >= 2 ? imageGutter : 0,\n                    marginLeft: idx % 2 === 1 ? imageGutter : 0,\n                    ...(isIdsTile && { height: 168 }),\n                  }}\n                  lazyLoad={lazyLoad}\n                  lazyLoadProps={lazyLoadProps}\n                  fillStyle={isIdsTile ? 'contain' : 'cover'}\n                />\n              )\n            })}\n          </div>\n          <ImageTileContent {...imageTileContentProps}>\n            <ImageTitleElement {...imageTileTitleProps} />\n          </ImageTileContent>\n        </Fragment>\n      )}\n    </Fragment>\n  )\n\n  return (\n    <ImageTileElement ref={ref} {...imageTileContainerProps}>\n      {component}\n    </ImageTileElement>\n  )\n})\n\nImageTile.defaultProps = {\n  border: false,\n  imageTileTitle: {},\n  children: null,\n  fixedContent: true,\n  height: 190,\n  images: [],\n  imageGutter: 0,\n  lazyLoad: true,\n  lazyLoadProps: {},\n  link: null,\n  style: {},\n}\n\nImageTile.propTypes = {\n  /** Wrap imageTile in a border */\n  border: PropTypes.bool,\n  /** Title props. Named 'imageTileTitle' to avoid clashing with the attribute 'title' */\n  imageTileTitle: PropTypes.shape({\n    iconClass: PropTypes.string,\n    text: PropTypes.string,\n  }),\n  /** The content to display inside the imageTile. If no children are provided, use the default layout */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.element, PropTypes.string]),\n  /** Position the content on top of the thumbnail */\n  fixedContent: PropTypes.bool,\n  /** ImageTile Height */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Thumbnail props */\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      icon: PropTypes.bool,\n      iconClass: PropTypes.string,\n      src: PropTypes.string,\n      alt: PropTypes.string,\n      height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    })\n  ),\n  /** Margin spacing if they are multiple thumbnail images */\n  imageGutter: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Lazy load the image */\n  lazyLoad: PropTypes.bool,\n  /** Lazy load props */\n  // eslint-disable-next-line react/forbid-prop-types\n  lazyLoadProps: PropTypes.object,\n  /** ImageTile action */\n  link: PropTypes.shape({\n    /** Link destination */\n    href: PropTypes.string,\n    /** Link event - useful in situations where href can't be used */\n    onClick: PropTypes.func,\n    /** Link target */\n    target: PropTypes.string,\n  }),\n  /** Click handler for imageTile */\n  onClick: PropTypes.func,\n  /** Custom style object for the containing element */\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n}\n\nconst ImageTileComponent = memo(ImageTile)\n\n// Export additional components to be used to create a custom layout\nImageTileComponent.Content = ImageTileContent\nImageTileComponent.Thumbnail = ImageTileThumbnail\nImageTileComponent.Title = ImageTileTitle\n\nexport default ImageTileComponent\n"],"sourceRoot":""}