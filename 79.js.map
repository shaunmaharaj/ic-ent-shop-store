{"version":3,"sources":["webpack://UnataWidgets/./app/react/components/mobileListNav/MobileListNav.tsx"],"names":["useStyles","createStyles","theme","cartBadge","background","colors","brandHighlightRegular","chev","fontSize","typography","bodyMedium2","countBadge","alignSelf","borderRadius","radius","r4","color","systemGrayscale00","padding","spacing","s4","s8","iconAdornment","flex","s32","list","listItem","paddingBottom","paddingRight","paddingTop","textDecoration","listItemLink","display","width","loyaltyBadge","brandPrimaryRegular","variants","default","borderBottom","systemGrayscale20","pills","systemGrayscale50","icon","marginTop","s16","systemGrayscale10","border","marginBottom","listItemText","fontWeight","titleMedium","MobileListNav","cartCount","setCartCount","useState","cartService","selectors","countItems","loyaltyPoints","setLoyaltyPoints","authService","getPrimaryLoyaltyCardPoints","useEffect","store","subscribe","styles","config","useConfig","lang","useLang","mobileHomeLinksv2","intent","defaultShoppingContext","getUserContext","configVariant","variant","variantStyle","css","data-test","items","map","link","renderListItemContent","icons","iconCssClass","className","aria-hidden","langService","translate","label","count","item","points","point","renderListItem","event","href","createPlatformUrl","target","external","undefined","id","rel","context","includes","onClick","eventEmitter","emit","EVENT_TYPES","OPEN_LOYALTY_CONTEXT","NAV_SIDE_CART_OPEN","onItemClick","memo"],"mappings":"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","file":"79.js","sourcesContent":["import { memo, useEffect, useState } from 'react'\nimport { spacing } from '@instacart/ids-core'\nimport { createStyles } from '@app/react/common/hooks/createStyles'\nimport { List, ListItem, ListItemAdornment, ListItemText } from '@instacart/cocktail'\nimport {\n  auth as authService,\n  cart as cartService,\n  lang as langService,\n} from '@instacart/enterprise-services'\nimport { MobileHomeLinkV2 } from '@app/types/config'\nimport { useLang, useConfig } from '@app/services/config/hooks'\nimport { eventEmitter, EVENT_TYPES } from '@app/utils/eventEmitter'\nimport createPlatformUrl from '@app/utils/createPlatformUrl'\nimport { VariantStyleType } from './types'\n\nconst useStyles = createStyles(theme => ({\n  cartBadge: {\n    background: theme.colors.brandHighlightRegular,\n  },\n  chev: {\n    fontSize: theme.typography.bodyMedium2.fontSize,\n  },\n  countBadge: {\n    alignSelf: 'center',\n    borderRadius: theme.radius.r4,\n    color: theme.colors.systemGrayscale00,\n    fontSize: theme.typography.bodyMedium2.fontSize,\n    padding: `${spacing.s4}px ${spacing.s8}px`,\n  },\n  iconAdornment: {\n    flex: `0 0 ${spacing.s32}px`,\n  },\n  list: {\n    padding: 0,\n  },\n  listItem: {\n    color: '#000',\n    paddingBottom: spacing.s8,\n    paddingRight: spacing.s8,\n    paddingTop: spacing.s8,\n    textDecoration: 'none',\n  },\n  listItemLink: {\n    color: 'inherit',\n    display: 'flex',\n    width: '100%',\n  },\n  loyaltyBadge: {\n    background: theme.colors.brandPrimaryRegular,\n  },\n  variants: {\n    default: {\n      listItem: {\n        borderBottom: `1px solid ${theme.colors.systemGrayscale20}`,\n      },\n    },\n    pills: {\n      chev: {\n        color: theme.colors.systemGrayscale50,\n      },\n      icon: {\n        color: theme.colors.systemGrayscale50,\n      },\n      list: {\n        marginTop: spacing.s8,\n        padding: `0 ${spacing.s16}px`,\n      },\n      listItem: {\n        background: theme.colors.systemGrayscale10,\n        border: `1px solid ${theme.colors.systemGrayscale20}`,\n        marginBottom: spacing.s4,\n      },\n      listItemText: {\n        fontWeight: theme.typography.titleMedium.fontWeight,\n      },\n    },\n  },\n}))\n\nconst MobileListNav = () => {\n  const [cartCount, setCartCount] = useState<number>(cartService.selectors.countItems())\n  const [loyaltyPoints, setLoyaltyPoints] = useState<number>(\n    authService.selectors.getPrimaryLoyaltyCardPoints() || 0\n  )\n\n  useEffect(() => {\n    const unsubscribe = cartService.store.subscribe(() => {\n      setCartCount(cartService.selectors.countItems())\n    })\n    return unsubscribe\n  }, [])\n\n  useEffect(() => {\n    const unsubscribe = authService.store.subscribe(() => {\n      setLoyaltyPoints(authService.selectors.getPrimaryLoyaltyCardPoints() || 0)\n    })\n    return unsubscribe\n  }, [])\n\n  const onItemClick = (link: MobileHomeLinkV2) => {\n    if (link.event === 'loyalty') {\n      eventEmitter.emit(EVENT_TYPES.OPEN_LOYALTY_CONTEXT)\n    } else if (link.event === 'openSideCart') {\n      eventEmitter.emit(EVENT_TYPES.NAV_SIDE_CART_OPEN)\n    }\n  }\n\n  const styles = useStyles()\n  const config = useConfig()\n  const lang = useLang()\n\n  const { mobileHomeLinksv2 } = config\n  const { intent = config.defaultShoppingContext } = authService.selectors.getUserContext()\n  const configVariant = mobileHomeLinksv2.variant\n\n  const variantStyle: VariantStyleType = styles.variants[configVariant] || {}\n\n  return (\n    <List css={[styles.list, variantStyle.list]} data-test=\"mobile-list-nav\">\n      {mobileHomeLinksv2.items.map(link => {\n        const renderListItemContent = (\n          <>\n            {mobileHomeLinksv2.icons && link.iconCssClass && (\n              <ListItemAdornment css={styles.iconAdornment}>\n                <i\n                  className={link.iconCssClass}\n                  css={variantStyle.icon}\n                  data-test=\"mobile-list-nav-icon\"\n                  aria-hidden=\"true\"\n                />\n              </ListItemAdornment>\n            )}\n\n            <ListItemText css={variantStyle.listItemText}>\n              {langService.translate(link.label)}\n            </ListItemText>\n\n            {cartCount > 0 && link.count && (\n              <span css={[styles.countBadge, styles.cartBadge]}>\n                {cartCount} {cartCount > 1 ? lang.items : lang.item}\n              </span>\n            )}\n\n            {loyaltyPoints > 0 && link.points && (\n              <span css={[styles.countBadge, styles.loyaltyBadge]}>\n                {loyaltyPoints} {loyaltyPoints > 1 ? lang.points : lang.point}\n              </span>\n            )}\n\n            <ListItemAdornment css={[styles.chev, variantStyle.chev]}>\n              <i className=\"icon-chevron-right\" aria-hidden=\"true\" />\n            </ListItemAdornment>\n          </>\n        )\n\n        const renderListItem =\n          !link.event && link.href ? (\n            <a\n              href={createPlatformUrl(link.href)}\n              target={link.href && link.external ? '_blank' : undefined}\n              data-test={`listitem-${link.id}-link`}\n              css={[styles.listItemLink]}\n              rel=\"noreferrer\"\n            >\n              {renderListItemContent}\n            </a>\n          ) : (\n            renderListItemContent\n          )\n\n        // @ts-expect-error discrepancy between FulfillmentType and ShoppingContext in intent\n        return link.context?.includes(intent) || !link.context ? (\n          <ListItem\n            css={[styles.listItem, variantStyle.listItem]}\n            data-test={`listitem-${link.id}`}\n            onClick={() => link.event && onItemClick(link)}\n            key={link.id}\n          >\n            {renderListItem}\n          </ListItem>\n        ) : null\n      })}\n    </List>\n  )\n}\n\nexport default memo(MobileListNav)\n"],"sourceRoot":""}