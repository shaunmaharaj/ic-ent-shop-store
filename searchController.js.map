{"version":3,"sources":["webpack://UnataWidgets/./node_modules/lodash/castArray.js","webpack://UnataWidgets/./app/angular/constants/ic_search.js","webpack://UnataWidgets/./app/utils/language.ts","webpack://UnataWidgets/./app/angular/components/search/searchController.js"],"names":["isArray","module","exports","arguments","length","value","SUPPORTED_IC_SEARCH_FACETS","IC_SEARCH_RECALL_STRATEGIES","areWordsSignificantlyDifferent","str1","str2","singular","toLowerCase","angular","controller","$filter","$scope","$state","$stateParams","Restangular","analytics","auth","cartAnalytics","catalogCategoriesService","config","eComLightService","facetedFilterModalService","facetedSearchService","fetchedRootCategories","filterModalService","lang","mobileService","placementsService","productsService","searchCategories","searchService","tagsService","utilService","sort","defaultSort","user","status","search","params","enableFacetedSearchFilters","enableICSearch","enableDotComSearch","isDotComEnabled","categories","filterTags","filterDynamicTags","filterBarTags","filter","tag","includes","id","showPickupContextSwitch","showDeliveryContextSwitch","showCateringContextSwitch","hideFacets","facets","rootCategories","category","search_provider","getAllFacets","then","results","categoryFacets","categorizedFacetsObject","sideFacetsArray","sideFilters","map","facet","group_display_name","items","item","name","rootCategoryFacets","toString","$broadcast","catch","state","stateParams","term","search_term","brandNames","inEComLightMode","analyticScope","createNewAnalyticScope","$on","destroyAnalyticScope","categoryId","isDefined","category_id","categoryNameFromId","categoryFromId","facetCountFromID","facetCount","item_count","loading","hasPrimaryResults","hasSecondaryResults","tags","brand_name","brand_names","brandArray","brands","Array","toNameValue","key","filterCategory","go","page","current","$watch","newPage","oldPage","hideSideNav","loadResults","loadingResults","copy","search_request_id","getSnrid","offset","productsPerPage","limit","secondary_results","allow_autocorrect","all","getList","document","getElementById","toggledFilterId","focus","primary_results","initialSearchTerm","initial_search_term","placements","productPlacementsFromProducts","productAnalytics","getProductListAnalytics","slim","logPlacementImpression","p","item_type","formatImagePlacementForAnalytics","elevaate","enabled","window","elevaatePromotions","forEach","placement","sponsoredBy","push","agreementId","metadata","pageImpressionId","adProviderMetadata","dssId","productId","productIdInFeed","productPrice","price","currencyCode","elevaateCurrencyCode","pageProductId","insertPlacementsInProducts","isPrimaryResult","logEvent","logSegmentEvent","search_value","snrid","search_results_count","search_results","search_results_page","is_autocomplete","search_is_autocomplete","total_results","expected_pages","Math","round","filters","filterParams","num_primary_results","num_secondary_results","logSearch","result","String","ext_id","logCriteoStoreProducts","keyword","page_number","available_context_types","SHOPPING_MODES","PICKUP","DELIVERY","CATERING","finally","getBeacon","onLoadBeacon","searchCat","setBrandNames","handleImagePlacementClick","index","getPageHeaderResults","getSearchResultsText","getSearchReformulationText","primary_search_term","recall_strategies_applied","templateAsString","values","nothingFound","searchResult","isSpellCorrected","getSearchSpellCorrectionDisabledSref","JSON","stringify","termText","primarySearchTerm","searchingFor","searchTerm","tagNames","getTagName","join","termPostfix","isMobile","mobileCommaSeparator","totalCount","text","resultsForTerm","count","label","trim","charAt","toUpperCase","slice","onFilterModalClose","content","type","getTypeBy","openFilterModal","open","sortOptions","subset","tagOptions","brandOptions","brand","shop","defaultBrand","isSearch","openFacetedFilterModal","option","showIn","facetOptions","facetedTags","showSort","resetFacets","resetTagCrumbs","shouldShowSeeAll","tagCrumbsArray","shouldShowReset"],"mappings":"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","file":"searchController.js","sourcesContent":["var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","// A list of filters supported by IC Search. Can either be a facet group display name such as `Brands`\n// or an id such as `gluten_free`\nexport const SUPPORTED_IC_SEARCH_FACETS = [\n  'Brands',\n  'purchased',\n  'organic',\n  'gluten_free',\n  'fat_free',\n  'vegan',\n  'kosher',\n  'sugar_free',\n  'on_sale',\n  'has_offer',\n  'loyalty_deal',\n  'usa_snap_eligible',\n]\n\nexport const IC_SEARCH_RECALL_STRATEGIES = {\n  REFORMULATION: 'REFORMULATION',\n  SPELL_CORRECTION: 'SPELL_CORRECTION',\n}\n","import { singular } from 'pluralize'\n\n/**\n * Are the two words close enough?\n * Borrowed logic from Carrot: https://github.com/instacart/carrot/blob/master/customers/customers-backend/domains/view_domain/app/domain/search_view/layouts/search_response_backed/reformulation.rb#L46\n */\nexport const areWordsSignificantlyDifferent = (str1: string, str2: string): boolean => {\n  return singular(str1.toLowerCase()) !== singular(str2.toLowerCase())\n}\n","import _ from 'lodash'\nimport angular from 'angular'\nimport { SHOPPING_MODES } from '@app/angular/constants/context'\nimport {\n  productPlacementsFromProducts,\n  formatImagePlacementForAnalytics,\n  insertPlacementsInProducts,\n} from '@app/utils/placements'\nimport {\n  SUPPORTED_IC_SEARCH_FACETS,\n  IC_SEARCH_RECALL_STRATEGIES,\n} from '@app/angular/constants/ic_search'\nimport { areWordsSignificantlyDifferent } from '@app/utils/language'\n\nexport default angular\n  .module('SearchControllerModule', [])\n  .controller(\n    'SearchController',\n    function (\n      $filter,\n      $scope,\n      $state,\n      $stateParams,\n      Restangular,\n      analytics,\n      auth,\n      cartAnalytics,\n      catalogCategoriesService,\n      config,\n      eComLightService,\n      facetedFilterModalService,\n      facetedSearchService,\n      fetchedRootCategories,\n      filterModalService,\n      lang,\n      mobileService,\n      placementsService,\n      productsService,\n      searchCategories,\n      searchService,\n      tagsService,\n      utilService\n    ) {\n      if (!$stateParams.sort) {\n        $stateParams.sort =\n          config.defaultSort[auth.user.status === 'trial' ? 'trial' : 'loggedIn'].search\n        $state.params.sort = $stateParams.sort\n      }\n\n      $scope.enableFacetedSearchFilters = config.enableFacetedSearchFilters || config.enableICSearch\n      $scope.enableDotComSearch = searchService.isDotComEnabled()\n      $scope.categories = []\n      $scope.config = config\n      $scope.filterTags = tagsService.filterDynamicTags(tagsService.filterBarTags)\n      if (config.enableICSearch) {\n        $scope.filterTags = $scope.filterTags.filter(tag =>\n          SUPPORTED_IC_SEARCH_FACETS.includes(tag.id)\n        )\n      }\n\n      // Default values for showing context switch buttons when no products are found in the current context.\n      $scope.showPickupContextSwitch = false\n      $scope.showDeliveryContextSwitch = false\n      $scope.showCateringContextSwitch = false\n      // Default value for hiding side filters when no facets are found\n      $scope.hideFacets = true\n\n      // Faceted Search\n      if ($scope.enableFacetedSearchFilters) {\n        $scope.facets = []\n        const rootCategories = _.flatMap(fetchedRootCategories, category => {\n          return category.id\n        })\n\n        const params = {\n          ...$stateParams,\n          search_provider: config.enableICSearch ? 'ic' : 'buffet',\n        }\n        facetedSearchService\n          .getAllFacets(params)\n          .then(results => {\n            $scope.facets = results\n            $scope.categoryFacets = facetedSearchService.categorizedFacetsObject.categories\n            $scope.sideFacetsArray = facetedSearchService.categorizedFacetsObject.sideFilters\n\n            // If using IC Search only include the supported facets\n            if (config.enableICSearch) {\n              $scope.sideFacetsArray = $scope.sideFacetsArray\n                .map(facet =>\n                  // If the group display name is marked as supported, include it (eg. 'Brands')\n                  SUPPORTED_IC_SEARCH_FACETS.includes(facet.group_display_name)\n                    ? facet\n                    : // Otherwise only include supported items\n                      {\n                        ...facet,\n                        items: facet.items.filter(item =>\n                          SUPPORTED_IC_SEARCH_FACETS.includes(item.name)\n                        ),\n                      }\n                )\n                .filter(facet => facet.items.length)\n            }\n\n            $scope.hideFacets = results.hideFacets || $scope.sideFacetsArray.length === 0\n\n            if (\n              $scope.categoryFacets &&\n              $scope.categoryFacets.items &&\n              $scope.categoryFacets.items.length\n            ) {\n              $scope.rootCategoryFacets = $scope.categoryFacets.items.filter(facet =>\n                rootCategories.includes(facet.id.toString())\n              )\n            }\n\n            $scope.$broadcast('facetsDataReceived', $scope.facets)\n          })\n          .catch(() => {\n            $scope.hideFacets = true\n          })\n      }\n      $scope.tagsService = tagsService\n      $scope.state = $state\n      $scope.stateParams = $stateParams\n      $scope.term = $stateParams.search_term\n      $scope.brandNames = []\n      $scope.inEComLightMode = eComLightService.inEComLightMode\n      $scope.analyticScope = cartAnalytics.createNewAnalyticScope()\n      $scope.$on('$destroy', () => {\n        cartAnalytics.destroyAnalyticScope($scope.analyticScope)\n      })\n\n      $scope.categoryId = angular.isDefined($stateParams.category_id)\n        ? $stateParams.category_id\n        : null\n      $scope.searchCategories = searchCategories\n\n      $scope.categoryNameFromId = id => {\n        const category = catalogCategoriesService.categoryFromId(id.toString())\n        return (category && category.name) || ''\n      }\n\n      // TODO: Check if this is still in use\n      $scope.facetCountFromID = function (id) {\n        if (!$scope.categoryFacets) {\n          return\n        }\n\n        const facetCount = _.find($scope.categoryFacets.items, item => {\n          // eslint-disable-next-line eqeqeq\n          if (item.id == id) {\n            return true\n          }\n        })\n\n        if (facetCount) {\n          return facetCount.item_count\n        }\n        return 0\n      }\n\n      $scope.$on('$stateChangeStart', () => {\n        $scope.loading = true\n        delete $scope.results\n        $scope.hasPrimaryResults = false\n        $scope.hasSecondaryResults = false\n      })\n\n      // List of selected tags\n\n      $scope.tags = !_.isArray($state.params.tags) ? [$state.params.tags] : $state.params.tags\n\n      // List of selected brands\n      if ($state.params.brand_name || $state.params.brand_names) {\n        const brandArray = $state.params.brand_name || $state.params.brand_names\n        $scope.brands = !Array.isArray(brandArray) ? [brandArray] : brandArray\n      }\n\n      // Handle filtering clicks\n\n      $scope.filterCategory = function (categoryId) {\n        $state.go('.', { category_id: categoryId, page: null, brand_name: null })\n      }\n\n      // Pagination\n\n      $scope.page = { current: $state.params.page || 1 }\n\n      $scope.$watch('page.current', (newPage, oldPage) => {\n        if (oldPage && newPage !== oldPage) {\n          $state.go('.', { page: newPage })\n        }\n      })\n\n      // Show Side Nav on Product Search\n\n      $scope.hideSideNav = false\n\n      // If a category is chosen and we are able to find it use that category's brand_names list, else use unique list of brand_names from all categories.\n      function setBrandNames() {\n        let category = null\n        if (angular.isDefined($state.params.category_id)) {\n          category = _.find($scope.searchCategories, searchCat => {\n            return searchCat.category.id === $state.params.category_id\n          })\n        }\n\n        if (category) {\n          $scope.brandNames = category.brand_names\n        } else {\n          $scope.brandNames = _.uniq(\n            _.flatten(_.map($scope.searchCategories, 'brand_names'))\n          ).sort()\n        }\n      }\n\n      $scope.loadResults = () => {\n        $scope.loadingResults = true\n        const params = angular.copy($state.params)\n        const search_request_id = searchService.getSnrid()\n\n        // Clear params name value for the api call because it is not used\n\n        params.page = null\n\n        params.offset = $scope.page.current ? ($scope.page.current - 1) * config.productsPerPage : 0\n        params.limit = config.productsPerPage\n        params.search_provider = config.enableICSearch ? 'ic' : 'buffet'\n        params.secondary_results = config.enableICSearch\n        params.allow_autocorrect = $stateParams.allow_autocorrect !== 'false'\n        Restangular.all('store_products')\n          .getList(params, { 'X-Snr-Id': search_request_id })\n          .then(results => {\n            // (Hacky a11y fix) Move focus back to the filter which caused the reload\n            // Ideally toggling a filter wouldn't cause the entire component to reload\n            // so focus can be maintained\n            // eslint-disable-next-line no-unused-expressions\n            document.getElementById($state.params.toggledFilterId)?.focus()\n            $state.params.toggledFilterId = null\n\n            $scope.loadingResults = false\n            $scope.results = results\n            $scope.primary_results = $scope.results\n            $scope.secondary_results = []\n            $scope.initialSearchTerm = $scope.results.initial_search_term\n\n            const placements = productPlacementsFromProducts(results)\n\n            // placements must be ahead of the regular products to match order in the UI\n            const productAnalytics = analytics.getProductListAnalytics(\n              [...placements, ...results],\n              { slim: true }\n            )\n            analytics.logPlacementImpression(\n              results.placements\n                .filter(p => p.item_type === 'none')\n                .map(p => formatImagePlacementForAnalytics(p, 'search_placement')),\n              'search',\n              'search_placement'\n            )\n\n            if (config.elevaate?.enabled && config.elevaate?.tag) {\n              window.elevaatePromotions = window.elevaatePromotions || []\n              placements.forEach(placement => {\n                if (placement.sponsoredBy === 'elevaate') {\n                  window.elevaatePromotions.push({\n                    agreementId: placement.metadata.agreementId,\n                    pageImpressionId: results?.adProviderMetadata?.elevaate?.pageImpressionId,\n                    dssId: placement.metadata.dssId,\n                    productId: placement.metadata.productId,\n                    productIdInFeed: placement.metadata.productIdInFeed,\n                    productPrice: placement.metadata.price,\n                    currencyCode: config.elevaateCurrencyCode,\n                    pageProductId: placement?.id,\n                  })\n                }\n              })\n            }\n\n            // Move placements to specified position from API\n            if ($scope.results?.placements?.length > 0) {\n              // NOTE: This will mutate the results object\n              // The mutation drops all item_type === 'product' placements from the placements array\n              // under the result object, as the 'product' placements get integrated into the results array.\n              // The item_count attribute is also adjusted to reflect the movement of the placement array into items\n              $scope.results = insertPlacementsInProducts($scope.results.placements, $scope.results)\n            }\n\n            // Separate secondary result set from primary if ic_search enabled\n            if (config.enableICSearch) {\n              $scope.primary_results = $scope.results.filter(item =>\n                searchService.isPrimaryResult(item)\n              )\n              $scope.secondary_results = $scope.results.filter(\n                item => !searchService.isPrimaryResult(item)\n              )\n            }\n\n            $scope.hasPrimaryResults =\n              $scope.primary_results?.length + $scope.results.placements?.length > 0\n            $scope.hasSecondaryResults = $scope.secondary_results?.length > 0\n\n            analytics.logEvent('search results', 'search', $scope.term, productAnalytics.length)\n            analytics.logSegmentEvent('search.search_results', {\n              search_value: $scope.term,\n              snrid: search_request_id,\n              search_results_count: productAnalytics.length,\n              search_results: productAnalytics,\n              search_results_page: $scope.page.current,\n              is_autocomplete: $scope.stateParams.search_is_autocomplete || false,\n              sort: $scope.stateParams.sort,\n              total_results: results.item_count,\n              expected_pages: Math.round(results.item_count / config.productsPerPage) + 1,\n              filters: utilService.filterParams($scope.categoryNameFromId, $scope.stateParams),\n              search_provider: results.search_provider || 'buffet',\n              num_primary_results: $scope.primary_results?.length,\n              num_secondary_results: $scope.secondary_results?.length,\n            })\n\n            analytics.logSearch({\n              results: results.map(result => String(result.ext_id)),\n              term: $scope.term,\n            })\n\n            analytics.logCriteoStoreProducts({\n              items: results.map(result => String(result.ext_id)),\n              keyword: $scope.term,\n              page_number: $scope.page.current,\n              filterParams: utilService.filterParams($scope.categoryNameFromId, $scope.stateParams),\n            })\n\n            // Check if alternative context types are available\n            if (results.available_context_types) {\n              $scope.showPickupContextSwitch = results.available_context_types.includes(\n                SHOPPING_MODES.PICKUP\n              )\n              $scope.showDeliveryContextSwitch = results.available_context_types.includes(\n                SHOPPING_MODES.DELIVERY\n              )\n              $scope.showCateringContextSwitch = results.available_context_types.includes(\n                SHOPPING_MODES.CATERING\n              )\n            }\n          })\n          .finally(() => {\n            productsService.getBeacon($scope.results?.onLoadBeacon)\n          })\n      }\n\n      // Facets have their own set of brandNames, don't need to call this if enabled.\n      if (!$scope.enableFacetedSearchFilters) {\n        setBrandNames()\n      }\n\n      function toNameValue(key) {\n        return {\n          name: key,\n          value: key,\n        }\n      }\n\n      $scope.handleImagePlacementClick = (placement, index) =>\n        placementsService.handleImagePlacementClick(\n          formatImagePlacementForAnalytics(placement, 'search_placement'),\n          'search',\n          index\n        )\n\n      $scope.getPageHeaderResults = () => {\n        return $scope.getSearchResultsText()\n      }\n\n      $scope.getSearchReformulationText = () => {\n        // search not completed yet\n        if (!$scope.results) return null\n\n        const {\n          primary_search_term,\n          initial_search_term,\n          recall_strategies_applied,\n        } = $scope.results\n\n        // search term was reformulated\n        if (\n          primary_search_term &&\n          // eslint-disable-next-line eqeqeq\n          primary_search_term != initial_search_term &&\n          recall_strategies_applied?.includes(IC_SEARCH_RECALL_STRATEGIES.REFORMULATION) &&\n          areWordsSignificantlyDifferent(primary_search_term, initial_search_term)\n        ) {\n          return lang.templateAsString(lang.values.nothingFound, {\n            searchResult: initial_search_term,\n          })\n        }\n        return null\n      }\n\n      $scope.isSpellCorrected = () => {\n        // search not completed yet\n        if (!$scope.results) return false\n\n        const {\n          primary_search_term,\n          initial_search_term,\n          recall_strategies_applied,\n        } = $scope.results\n\n        return (\n          primary_search_term &&\n          // eslint-disable-next-line eqeqeq\n          primary_search_term != initial_search_term &&\n          recall_strategies_applied?.includes(IC_SEARCH_RECALL_STRATEGIES.SPELL_CORRECTION) &&\n          areWordsSignificantlyDifferent(primary_search_term, initial_search_term)\n        )\n      }\n\n      $scope.getSearchSpellCorrectionDisabledSref = () => {\n        if (!$scope.isSpellCorrected()) return null\n\n        const { initial_search_term } = $scope.results\n        return JSON.stringify({\n          allow_autocorrect: false,\n          search_term: initial_search_term,\n        })\n      }\n\n      $scope.getSearchResultsText = () => {\n        // if primary_search_term is present, that's what the API actually used to get results,\n        // however, if it is only a minor change, we will show the original term\n        let termText\n        const primarySearchTerm = $scope.results?.primary_search_term\n\n        if (\n          primarySearchTerm &&\n          areWordsSignificantlyDifferent(primarySearchTerm, $stateParams.search_term)\n        ) {\n          termText = primarySearchTerm\n        } else {\n          termText = $stateParams.search_term\n        }\n\n        if (!$scope.results) {\n          return lang.templateAsString(lang.values.searchingFor, {\n            searchTerm: termText,\n          })\n        }\n\n        const tagNames = Array.isArray($stateParams.tags)\n          ? $stateParams.tags.map(tag => $scope.getTagName(tag)).join(', ')\n          : $scope.getTagName($stateParams.tags)\n\n        const termPostfix = ` ${$stateParams.tags ? `and \"${tagNames}\"` : ''} ${\n          $stateParams.brand_name ? `and \"${$stateParams.brand_name}\"` : ''\n        } ${$scope.categoryId ? ` in ${$scope.categoryNameFromId($scope.categoryId)}` : ''}`\n        termText = $scope.enableFacetedSearchFilters\n          ? mobileService.isMobile\n            ? termText\n            : termText\n          : mobileService.isMobile\n          ? termText\n          : termText + termPostfix\n\n        const hasStateParams =\n          $stateParams.tags || $stateParams.brand_name || $stateParams.brand_names\n\n        const mobileCommaSeparator = hasStateParams && mobileService.isMobile ? ',' : ''\n        const placementsCount =\n          $scope.results && $scope.results.placements ? $scope.results.placements.length : 0\n        const itemsCount =\n          $scope.results && $scope.results.item_count ? $scope.results.item_count : 0\n        const totalCount = placementsCount + itemsCount\n\n        if ($scope.hasPrimaryResults) {\n          const text = (\n            lang.templateAsString(lang.values.resultsForTerm, {\n              // If we have a secondary result set, we can't accurately infer the count\n              // of either individual set, so we just omit the count alltogether\n              count: $scope.secondary_results?.length > 0 ? '' : totalCount,\n              label: $filter('pluralize')('result', totalCount),\n              searchTerm: termText,\n            }) + mobileCommaSeparator\n          ).trim()\n\n          // Capitalize the text if no count is prepended\n          if ($scope.secondary_results?.length > 0) {\n            return text.charAt(0).toUpperCase() + text.slice(1)\n          }\n          return text\n        }\n        return (\n          lang.templateAsString(lang.values.nothingFound, {\n            searchResult: termText,\n          }) + mobileCommaSeparator\n        )\n      }\n\n      const onFilterModalClose = ({ content, sort, tags, brand_name }) => {\n        const type = searchService.getTypeBy(content)\n\n        if (type) {\n          if (type.label === 'Products') {\n            $state.go(type.state, { sort, tags, brand_name })\n          } else {\n            $state.go(type.state)\n          }\n        }\n      }\n\n      $scope.openFilterModal = function () {\n        filterModalService\n          .open({\n            content: 'Products',\n            sortOptions: _.sortBy(_.filter(config.sortOptions), 'order'),\n            subset: 'search',\n            tagOptions: $scope.filterTags,\n            brandOptions: _.map($scope.brandNames, toNameValue),\n            sort: $state.params.sort,\n            tags: _.castArray($state.params.tags || []),\n            brand: $state.params.brand_name,\n            defaultSort:\n              config.defaultSort[auth.user.status === 'trial' ? 'trial' : 'loggedIn'].shop,\n            defaultBrand: null,\n            isSearch: true,\n          })\n          .then(onFilterModalClose)\n      }\n\n      $scope.openFacetedFilterModal = function () {\n        facetedFilterModalService\n          .open({\n            content: 'Products',\n            sortOptions: _.sortBy(\n              _.filter(config.sortOptions, option => _.includes(option.showIn, 'search')),\n              'order'\n            ),\n            tagOptions: $scope.filterTags,\n            brandOptions: _.map($scope.brandNames, toNameValue), // This may need to change for facet brands...\n            facetOptions: $scope.facetedTags,\n            facets: $scope.facets,\n            sort: $state.params.sort,\n            tags: _.castArray($state.params.tags || []),\n            brand: $state.params.brand_name,\n            defaultSort:\n              config.defaultSort[auth.user.status === 'trial' ? 'trial' : 'loggedIn'].shop,\n            searchTerm: null,\n            isSearch: true,\n            showSort: true,\n          })\n          .then(onFilterModalClose)\n      }\n\n      $scope.resetFacets = () => {\n        facetedSearchService.resetTagCrumbs()\n        $state.go('.', {\n          page: null,\n          brand_name: null,\n          brand_names: null,\n          tags: null,\n          category_id: null,\n        })\n      }\n\n      $scope.shouldShowSeeAll = () => {\n        return facetedSearchService.tagCrumbsArray.length > 0 || $stateParams.category_id\n      }\n\n      $scope.shouldShowReset = () => {\n        return facetedSearchService.tagCrumbsArray.length > 0\n      }\n\n      $scope.getTagName = tag => {\n        return facetedSearchService.getTagName(tag)\n      }\n    }\n  )\n"],"sourceRoot":""}