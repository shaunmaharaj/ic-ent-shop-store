{"version":3,"sources":["webpack://UnataWidgets/./app/react/components/icExpress/utils.ts","webpack://UnataWidgets/./app/react/components/icExpress/ExpressPlans.tsx"],"names":["getExpressPlanConfigForApiPlan","config","plan","term_length","ExpressSubscriptionPlanTerms","YEARLY","valueOf","icExpress","plans","yearly","MONTHLY","monthly","trial","getIsTrialPlan","ExpressPlans","props","lang","useLang","useConfig","styles","createStyles","tokens","expressPlan","width","border","regular","color","neutral","white","borderRadius","radius","boxShadow","colors","shadow","cursor","margin","size","spacing","medium","xxSmall","padding","textAlign","expressPlanContainer","alignItems","display","justifyContent","expressPlanSelected","background","light","extraDark","planBadge","large","fontSize","font","badge","fontWeight","none","minHeight","xxxSmall","planBadgeSelected","dark","planBadgeUnselected","grey2","planBilling","planFullPrice","body","textDecoration","planPrice","marginBottom","planRecurrance","planSavings","small","useStyles","currentSubscription","defaultSelectedPlanId","onPlanSelect","selectedPlanId","setSelectedPlanId","useState","useEffect","renderExpressPlanBadge","badgeText","id","subscription_plan","currentPlan","end_date","starts","dayjs","format","ExpressTermLengths","YEAR","interpolate","ad","bestValue","yearlyPricePerMonth","parseFloat","price","toFixed","badgeStyles","length","data-test","css","formatPriceDisplay","replace","planIds","map","includes","next_subscription_plan","planStyles","onClick","bold","variant","name","currencySymbol","promo","full_price","recurrence","billing","savings","renderExpressPlan"],"mappings":"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","file":"64.js","sourcesContent":["import { ExpressPlan, ExpressSubscriptionPlanTerms } from '@app/services/express/types'\nimport { ClientConfig, IcExpressPlan } from '@app/types/config'\n\nexport const getExpressPlanConfigForApiPlan = (\n  config: ClientConfig,\n  plan: ExpressPlan\n): IcExpressPlan => {\n  if (plan.term_length === ExpressSubscriptionPlanTerms.YEARLY.valueOf())\n    return config.icExpress.plans.yearly\n  if (plan.term_length === ExpressSubscriptionPlanTerms.MONTHLY.valueOf())\n    return config.icExpress.plans.monthly\n  return config.icExpress.plans.trial\n}\n\nexport const getIsTrialPlan = (plan: ExpressPlan): boolean => {\n  if (plan.term_length === ExpressSubscriptionPlanTerms.YEARLY.valueOf()) return false\n  if (plan.term_length === ExpressSubscriptionPlanTerms.MONTHLY.valueOf()) return false\n  return true\n}\n","import React, { useEffect, useState } from 'react'\nimport { createStyles, Text } from '@instacart/cocktail'\nimport { useConfig, useLang } from '@app/services/config/hooks'\nimport dayjs from 'dayjs'\nimport { ExpressPlan, ExpressSubscription, ExpressTermLengths } from '@app/services/express/types'\nimport interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport { getExpressPlanConfigForApiPlan } from './utils'\n\ninterface ExpressPlanProps {\n  plans: ExpressPlan[]\n  currentSubscription?: ExpressSubscription\n  defaultSelectedPlanId?: number\n  onPlanSelect: (planId: number) => void\n}\n\nconst ExpressPlans = (props: ExpressPlanProps) => {\n  const lang = useLang()\n  const config = useConfig()\n\n  const useStyles = createStyles(tokens => ({\n    expressPlan: {\n      '@media(max-width: 449px)': {\n        width: '150px',\n      },\n      '@media(min-width: 450px)': {\n        width: '200px',\n      },\n      border: `${tokens.border.width.regular}px solid ${tokens.color.neutral.white}`,\n      borderRadius: `${tokens.border.radius.regular}px`,\n      boxShadow: `0px 2px 8px 0px ${config.icExpress.colors.shadow}`,\n      cursor: 'pointer',\n      margin: `${tokens.size.spacing.medium}px ${tokens.size.spacing.xxSmall}px`,\n      padding: `${tokens.size.spacing.medium}px ${tokens.size.spacing.xxSmall}px`,\n      textAlign: 'center',\n    },\n    expressPlanContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n    },\n    expressPlanSelected: {\n      background: config.icExpress.colors.light,\n      border: `${tokens.border.width.regular}px solid ${config.icExpress.colors.extraDark}`,\n    },\n    planBadge: {\n      borderRadius: `${tokens.border.radius.large}px`,\n      fontSize: `${tokens.size.font.badge}px`,\n      fontWeight: 'bold',\n      margin: `${tokens.size.spacing.xxSmall}px ${tokens.size.spacing.none}px`,\n      minHeight: `${tokens.size.spacing.medium}}px`,\n      padding: `${tokens.size.spacing.xxxSmall}px ${tokens.size.spacing.xxSmall}px`,\n    },\n\n    planBadgeSelected: {\n      background: config.icExpress.colors.dark,\n    },\n    planBadgeUnselected: {\n      background: tokens.color.neutral.grey2,\n    },\n    planBilling: {\n      fontSize: `${tokens.size.font.badge}px`,\n    },\n    planFullPrice: {\n      fontSize: `${tokens.size.font.body}px`,\n      fontWeight: 'initial',\n      textDecoration: 'line-through',\n    },\n    planPrice: {\n      marginBottom: '-10px',\n    },\n    planRecurrance: {\n      marginBottom: `${tokens.size.spacing.medium}px`,\n    },\n    planSavings: {\n      fontSize: `${tokens.size.font.badge}px`,\n      minHeight: `${tokens.size.spacing.small}px`,\n    },\n  }))\n  const styles = useStyles(props)\n\n  const { plans, currentSubscription, defaultSelectedPlanId, onPlanSelect } = props\n\n  // State to keep track of the current selected plan\n  const [selectedPlanId, setSelectedPlanId] = useState(0)\n\n  // Hook to trigger the callback whenever a plan id is set.\n  // We can't combine setSelectedPlanId with the callback\n  // because if this is used in a parent component it blows up\n  useEffect(() => {\n    onPlanSelect(selectedPlanId)\n  }, [selectedPlanId, onPlanSelect])\n\n  // Helper Function to render a plan badge\n  const renderExpressPlanBadge = (plan: ExpressPlan) => {\n    let badgeText = ''\n    if (currentSubscription && plan.id === currentSubscription.subscription_plan.id) {\n      badgeText = lang.icExpress.currentPlan\n    } else if (currentSubscription && plan.id === selectedPlanId && currentSubscription.end_date) {\n      badgeText = `${lang.icExpress.starts} ${dayjs(currentSubscription.end_date).format(\n        'MM/DD/YY'\n      )}`\n    } else if (!currentSubscription && plan.term_length === ExpressTermLengths.YEAR) {\n      badgeText = interpolate(config.icExpress.ad.bestValue, {\n        yearlyPricePerMonth: (parseFloat(plan.price) / 12).toFixed(2),\n      })\n    }\n\n    let badgeStyles = {}\n    if (badgeText.length === 0) {\n      badgeStyles = styles.planBadge\n    } else if (plan.id === selectedPlanId) {\n      badgeStyles = { ...styles.planBadge, ...styles.planBadgeSelected }\n    } else {\n      badgeStyles = { ...styles.planBadge, ...styles.planBadgeUnselected }\n    }\n\n    return (\n      <span data-test={`express-plans-plan-id-${plan.id}-badge`} css={badgeStyles}>\n        {badgeText}\n      </span>\n    )\n  }\n\n  const formatPriceDisplay = (price: string) => {\n    return price.replace(/\\.00/g, '')\n  }\n\n  // Helper Function to render each plan box\n  const renderExpressPlan = (plan: ExpressPlan) => {\n    let planStyles = styles.expressPlan\n    if (plan.id === selectedPlanId) {\n      planStyles = { ...styles.expressPlan, ...styles.expressPlanSelected }\n    }\n\n    return (\n      <button\n        key={`express-plans-plan-id-${plan.id}`}\n        data-test={`express-plans-plan-id-${plan.id}`}\n        css={planStyles}\n        onClick={() => {\n          setSelectedPlanId(plan.id)\n        }}\n      >\n        <Text bold variant=\"large\">\n          {getExpressPlanConfigForApiPlan(config, plan).name}\n        </Text>\n        {renderExpressPlanBadge(plan)}\n        <Text css={styles.planPrice} bold variant=\"banner\">\n          {config.currencySymbol}\n          {formatPriceDisplay(plan.price || '')}\n          {plan.promo && (\n            <span css={styles.planFullPrice}>\n              {config.currencySymbol}\n              {formatPriceDisplay(plan.full_price || '')}\n            </span>\n          )}\n        </Text>\n        <Text css={styles.planRecurrance} bold variant=\"body\">\n          {getExpressPlanConfigForApiPlan(config, plan).recurrence}\n        </Text>\n        <Text css={styles.planBilling} bold>\n          {getExpressPlanConfigForApiPlan(config, plan).billing}\n        </Text>\n        <Text css={styles.planSavings}>\n          {!plan.promo && getExpressPlanConfigForApiPlan(config, plan).savings && (\n            // eslint-disable-next-line react/jsx-no-literals\n            <span>({getExpressPlanConfigForApiPlan(config, plan).savings})</span>\n          )}\n        </Text>\n      </button>\n    )\n  }\n\n  // Decide which plan should initially be selected based on the current subscription\n  if (selectedPlanId === 0) {\n    const planIds = plans.map(plan => plan.id)\n    if (defaultSelectedPlanId && planIds.includes(defaultSelectedPlanId)) {\n      setSelectedPlanId(defaultSelectedPlanId)\n    } else if (\n      currentSubscription &&\n      planIds.includes(currentSubscription.next_subscription_plan.id)\n    ) {\n      setSelectedPlanId(currentSubscription.next_subscription_plan.id)\n    } else {\n      setSelectedPlanId(planIds[0])\n    }\n  }\n\n  // render and return the contaner for all of the plans\n  return <div css={styles.expressPlanContainer}>{plans.map(plan => renderExpressPlan(plan))}</div>\n}\n\nexport default ExpressPlans\n"],"sourceRoot":""}