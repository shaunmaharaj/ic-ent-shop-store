{"version":3,"sources":["webpack://UnataWidgets/./app/angular/components/home/homeController.js"],"names":["angular","module","controller","$filter","$q","$rootScope","$scope","$state","$stateParams","$window","Restangular","analytics","auth","canvas","cartService","catalogCategoriesService","collectionsService","config","lang","loyaltyInfoService","loyaltyOnboardingService","mobileService","oneCartService","orderService","placementsService","policyService","registrationService","reservationService","shoppingSelectorService","tagsService","userService","utilService","categories","tags","quickshopTags","imageTransform","cartCountItems","countItems","buyItAgainCollection","undefined","showBuyItAgain","homepageFeaturedProductsCollection","showHomepageFeaturedProducts","showWaysToShop","isModuleEnabled","user","store","store_banner","key","buyItAgainText","homepageFeaturedProductsText","hasBannerImage","showHeroContent","showBannerContent","reactQuickLinkEnabled","react","enableQuickLinks","isReactDemo","fetchCategories","then","visibleRootCategories","getHeroContent","isMobile","heroContent","length","bannerContentPromise","getBannerContent","bannerContent","homepageCollectionsPromise","bannerTarget","banner","target","openIn","logPromotedPlacement","placement","location","index","urlPassedCollectionIds","getURLPassedCollectionsList","useUrlPassedCollections","allowPassingCollectionIDAsQueryParams","homepage","openLoyalty","eventEmitter","emit","EVENT_TYPES","OPEN_LOYALTY_CONTEXT","getCollectionsFromSet","content","buyItAgain","enabled","filter","collection","id","collectionPlacements","collections","map","data","getHomePageCollections","getCollectionData","getCollection","COLLECTION_CONSTANTS","PRODUCT_LIMIT","collectionData","copy","maxBannerCollectionLengthArray","all","Array","Math","max","getList","limit","one_cart_enabled","user_timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","response","orders","loginToOrders","open","LOGIN_CONTEXTS","VIEW_ORDER_HISTORY","status","USER_STATUSES","TRIAL","go","handleViewOrderClick","order","quickLinks","quickLink","ql","hasLoyaltyPoints","getLoyaltyCards","primaryCard","getPrimaryLoyaltyCard","iconText","points_balance","context","intent","quickLinksFiltered","o","list","cart","quickLinkClick","href","state","stateParams","dotComLinkPath","link","dotComModule","url","isMobileApp","on","QUICK_LINK_CLICK","loyaltyPoints","getLoyaltyCard","onItemClick","event","$broadcast","timeslotLabelFn","timeslotUtils","getMainLabel","displayReservation","verboseLevel","returnLabel","format","reservation","apiDateFormat","DEFAULT_TIMESLOT_DATE_FORMAT","fetchBuyItAgainCollection","bustCache","BIA_COLLECTION_ID","isArray","items","captureMessage","name","displayName","forEach","item","store_product","tag","fetchHomepageFeaturedProductsCollection","homepageFeaturedProducts","HOMEPAGE_FP_COLLECTION_ID","displayThreshold","$on","action","CONTEXT_ACTIONS","CONTEXT_UPDATED","logHomepageView","logPageView","logSegmentEvent","getBannerSegmentPayload","openPolicyModal","isIntentChangeDisabled","modifyingInstacartOrder","getContext","defaultShoppingContext","intentIcon","intentLabel","values","shoppingContextAltTitles","instore","shoppingSelector","title","onIntentChange","intentLocation","authService","selectors","getContextLocationString","shouldShowIntentTimeslot","store_hours","policyModal","showPricingPolicyInHeader","isPricingPolicyEnabled","hideTimeslotReservationFromTrialUsers","intentTimeslotLabel","todaysHours","previewTimeslot","timeslotAvailable","yourTimeslot","intentTimeslotDetails"],"mappings":"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","file":"homeController.js","sourcesContent":["import _ from 'lodash'\nimport angular from 'angular'\nimport { captureMessage } from '@sentry/browser'\nimport { isReactDemo } from '@app/utils/isReactDemo'\nimport { DEFAULT_TIMESLOT_DATE_FORMAT } from '@app/angular/constants/timeslots'\nimport { COLLECTION_CONSTANTS } from '@app/angular/constants/collections'\nimport { LOGIN_CONTEXTS } from '@app/angular/constants/loginContexts'\nimport { imageTransform, auth as authService } from '@instacart/enterprise-services'\nimport { utils as timeslotUtils } from '@instacart/enterprise-timeslots'\nimport { eventEmitter, EVENT_TYPES } from '@app/utils/eventEmitter'\nimport { CONTEXT_ACTIONS } from '@app/angular/constants/events'\nimport { USER_STATUSES } from '@app/angular/constants/user'\nimport { isModuleEnabled } from '@app/utils/isModuleEnabled'\nimport { getBannerSegmentPayload, hasBannerImage } from '@app/utils/banners'\n\nexport default angular\n  .module('HomeControllerModule', [])\n  .controller(\n    'HomeController',\n    function (\n      $filter,\n      $q,\n      $rootScope,\n      $scope,\n      $state,\n      $stateParams,\n      $window,\n      Restangular,\n      analytics,\n      auth,\n      canvas,\n      cartService,\n      catalogCategoriesService,\n      collectionsService,\n      config,\n      lang,\n      loyaltyInfoService,\n      loyaltyOnboardingService,\n      mobileService,\n      oneCartService,\n      orderService,\n      placementsService,\n      policyService,\n      registrationService,\n      reservationService,\n      shoppingSelectorService,\n      tagsService,\n      userService,\n      utilService\n    ) {\n      $scope.reservationService = reservationService\n      $scope.auth = auth\n      $scope.canvas = canvas\n      $scope.categories = []\n      $scope.config = config\n      $scope.shoppingSelectorService = shoppingSelectorService\n      $scope.tags = tagsService.quickshopTags\n      $scope.utilService = utilService\n      $scope.imageTransform = imageTransform\n      $scope.cartCountItems = cartService.countItems\n      $scope.buyItAgainCollection = undefined\n      $scope.showBuyItAgain = false\n      $scope.homepageFeaturedProductsCollection = undefined\n      $scope.showHomepageFeaturedProducts = false\n      $scope.showWaysToShop = isModuleEnabled('waysToShop', auth.user.store?.store_banner?.key)\n      $scope.buyItAgainText = 'buy it again carousel'\n      $scope.homepageFeaturedProductsText = 'featured products carousel'\n      $scope.hasBannerImage = hasBannerImage()\n      $scope.showHeroContent = true\n      $scope.showBannerContent = true\n      $scope.reactQuickLinkEnabled = config.react.enableQuickLinks || isReactDemo() // TODO: remove this when no longer needed\n\n      catalogCategoriesService.fetchCategories().then(() => {\n        $scope.categories = catalogCategoriesService.visibleRootCategories()\n      })\n\n      // Fetch hero banner placement data\n      placementsService.getHeroContent(mobileService.isMobile).then(heroContent => {\n        $scope.heroContent = heroContent\n        $scope.showHeroContent = !!$scope.heroContent?.length\n      })\n\n      // Fetch small banner placement data\n      const bannerContentPromise = placementsService.getBannerContent().then(bannerContent => {\n        $scope.bannerContent = bannerContent\n        $scope.showBannerContent = !!$scope.bannerContent?.length\n      })\n\n      $scope.bannerTarget = banner => {\n        return banner?.target?.openIn === 'new_tab' ? '_blank' : undefined\n      }\n\n      $scope.logPromotedPlacement = (placement, location, index) =>\n        placementsService.logPromotedPlacement(placement, location, index)\n\n      $scope.urlPassedCollectionIds = placementsService.getURLPassedCollectionsList($stateParams)\n      // Fetch collections based on query param passed collection ID's\n      let homepageCollectionsPromise\n      const useUrlPassedCollections =\n        config.allowPassingCollectionIDAsQueryParams?.homepage &&\n        $scope.urlPassedCollectionIds?.length > 0\n      if (useUrlPassedCollections) {\n        homepageCollectionsPromise = collectionsService\n          .getCollectionsFromSet($scope.urlPassedCollectionIds)\n          .then(content => {\n            // If buy it again is enabled, and the retailer has the same frequently purchased\n            // collection (id 1) passed via collections query param we don't want to show it so\n            // there's not duplicate collections on the hompepage, so we filter it out\n            if (config.buyItAgain.enabled) {\n              content = content.filter(collection => collection.id !== '1')\n            }\n            $scope.collectionPlacements = content\n            $scope.collections = content?.map(data => ({ ...data })) ?? []\n          })\n      } else {\n        // Default behaviour: Fetch collections via placements/homepage_collections API\n        homepageCollectionsPromise = placementsService.getHomePageCollections().then(content => {\n          // If buy it again is enabled, and the retailer has the same frequently purchased\n          // collection (id 1) as a placement we don't want to show it so there's not duplicate\n          // collections on the hompepage, so we filter it out\n          if (config.buyItAgain.enabled) {\n            content = content.filter(placement => placement.target?.collection?.id !== '1')\n          }\n          $scope.collectionPlacements = content\n          $scope.collections = content?.map(data => ({ ...data })) ?? []\n        })\n      }\n\n      // Collections call to generate the items list. The API call is not needed in the case where collections\n      // are passed in via query params.\n      $scope.getCollectionData = (collection, index) => {\n        if (!useUrlPassedCollections) {\n          collectionsService\n            .getCollection(collection.target?.collection.id, COLLECTION_CONSTANTS.PRODUCT_LIMIT)\n            .then(collectionData => {\n              angular.copy(collectionData, $scope.collections[index])\n            })\n        }\n      }\n\n      // Create an array to loop over and alternate homepage banners and collections in mobile\n      if (mobileService.isMobile) {\n        $scope.maxBannerCollectionLengthArray = []\n\n        $q.all([homepageCollectionsPromise, bannerContentPromise]).then(() => {\n          $scope.maxBannerCollectionLengthArray = new Array(\n            Math.max($scope.collections.length, $scope.bannerContent.length)\n          )\n        })\n      }\n\n      // Fetch orders for the last 30 days\n\n      Restangular.all('orders')\n        .getList({\n          limit: 3,\n          one_cart_enabled: oneCartService.enabled(),\n          user_timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        })\n        .then(response => {\n          $scope.orders = response\n        })\n\n      $scope.loginToOrders = function () {\n        registrationService\n          .open('login', null, null, null, null, null, LOGIN_CONTEXTS.VIEW_ORDER_HISTORY)\n          .then(() => {\n            if (auth.user?.status === USER_STATUSES.TRIAL) {\n              return\n            }\n            $state.go('main.account.orderHistory')\n          })\n      }\n\n      $scope.handleViewOrderClick = order => orderService.handleViewOrderClick(order)\n\n      // Generate Quick Links from config\n\n      $scope.quickLinks = _.sortBy(\n        _.map(config.quickLinks, (quickLink, id) => {\n          const ql = _.assign({}, quickLink, { id })\n\n          if (id === 'loyalty' && config.hasLoyaltyPoints) {\n            userService.getLoyaltyCards().then(() => {\n              const primaryCard = userService.getPrimaryLoyaltyCard()\n              if (primaryCard) {\n                ql.iconText = `${primaryCard.points_balance || 0} Points`\n              }\n            })\n          }\n\n          return ql\n        }),\n        'order'\n      )\n\n      // Filter Quick links based on context\n\n      if (auth.user.context.intent === 'instore') {\n        $scope.quickLinksFiltered = _.filter($scope.quickLinks, o => {\n          return o.context.list\n        })\n      } else {\n        $scope.quickLinksFiltered = _.filter($scope.quickLinks, o => {\n          return o.context.cart\n        })\n      }\n\n      $scope.quickLinkClick = function (ql) {\n        if (ql.id === 'loyalty') {\n          openLoyalty()\n        } else if (ql.href) {\n          $window.open(ql.href, '_blank')\n        } else if (ql.state && ql.stateParams) {\n          $state.go(ql.state, ql.stateParams)\n        } else if (ql.state) {\n          $state.go(ql.state)\n        } else if (ql.dotComLinkPath) {\n          const link = config.dotComModule.url + ql.dotComLinkPath\n          if (mobileService.isMobileApp()) {\n            $window.open(link, '_blank')\n          } else {\n            $window.location = link\n          }\n        }\n      }\n\n      eventEmitter.on(EVENT_TYPES.QUICK_LINK_CLICK, $scope.quickLinkClick)\n\n      $scope.loyaltyPoints = userService.getLoyaltyCard().points_balance\n      $scope.onItemClick = (event, link) => {\n        if (link.event === 'loyalty') {\n          openLoyalty()\n        } else if (link.event === 'openSideCart') {\n          $rootScope.$broadcast('sideCart', 'open')\n        }\n      }\n\n      $scope.timeslotLabelFn = () =>\n        timeslotUtils.getMainLabel($scope.reservationService.displayReservation, {\n          verboseLevel: 1,\n          returnLabel: false,\n          format: reservationService.reservation\n            ? config.apiDateFormat\n            : DEFAULT_TIMESLOT_DATE_FORMAT,\n        })\n\n      function openLoyalty() {\n        eventEmitter.emit(EVENT_TYPES.OPEN_LOYALTY_CONTEXT)\n      }\n\n      const fetchBuyItAgainCollection = ({ bustCache }) => {\n        if (config.buyItAgain?.enabled) {\n          collectionsService\n            .getCollection(\n              COLLECTION_CONSTANTS.BIA_COLLECTION_ID,\n              COLLECTION_CONSTANTS.PRODUCT_LIMIT,\n              bustCache\n            )\n            .then(collection => {\n              const collectionIsValid = collection && Array.isArray(collection.items)\n              if (!collectionIsValid) {\n                $scope.showBuyItAgain = false\n                captureMessage('invalid buyItAgain collection data returned, not rendering it')\n                return\n              }\n\n              $scope.buyItAgainCollection = collection\n              $scope.buyItAgainCollection.name = config.buyItAgain.displayName\n              $scope.buyItAgainCollection.items.forEach(item => {\n                item.store_product.tags = item.store_product.tags.filter(tag => tag !== 'purchased')\n              })\n              $scope.showBuyItAgain =\n                !!$scope.buyItAgainCollection.items && $scope.buyItAgainCollection.items.length > 5\n            })\n        }\n      }\n      const fetchHomepageFeaturedProductsCollection = ({ bustCache }) => {\n        if (config.homepageFeaturedProducts?.enabled) {\n          collectionsService\n            .getCollection(\n              COLLECTION_CONSTANTS.HOMEPAGE_FP_COLLECTION_ID,\n              COLLECTION_CONSTANTS.PRODUCT_LIMIT,\n              bustCache\n            )\n            .then(collection => {\n              const collectionIsValid = collection && Array.isArray(collection.items)\n              if (!collectionIsValid) {\n                $scope.showHomepageFeaturedProducts = false\n                captureMessage(\n                  'invalid homepageFeaturedProducts collection data returned, not rendering it'\n                )\n                return\n              }\n\n              $scope.homepageFeaturedProductsCollection = collection\n              $scope.homepageFeaturedProductsCollection.name =\n                config.homepageFeaturedProducts.displayName\n              $scope.showHomepageFeaturedProducts =\n                !!$scope.homepageFeaturedProductsCollection.items &&\n                $scope.homepageFeaturedProductsCollection.items.length >=\n                  config.homepageFeaturedProducts.displayThreshold\n            })\n        }\n      }\n\n      fetchBuyItAgainCollection({ bustCache: false })\n      fetchHomepageFeaturedProductsCollection({ bustCache: false })\n\n      $rootScope.$on('auth', (event, action) => {\n        if (action === CONTEXT_ACTIONS.CONTEXT_UPDATED) {\n          fetchBuyItAgainCollection({ bustCache: true })\n          fetchHomepageFeaturedProductsCollection({ bustCache: true })\n        }\n      })\n\n      $scope.logHomepageView = () => {\n        $scope.canvas.logPageView('homeview')\n        analytics.logSegmentEvent('store.homepage_view', getBannerSegmentPayload())\n      }\n\n      $scope.openPolicyModal = () => {\n        policyService.open('pricing')\n      }\n\n      /**\n       * The following code relates to the intent/store/timeslot details section\n       */\n      $scope.isIntentChangeDisabled = $rootScope.modifyingInstacartOrder\n      $scope.intent = auth.getContext().intent || config.defaultShoppingContext\n      $scope.intentIcon = () => ($scope.intent === 'instore' ? 'list' : $scope.intent)\n      $scope.intentLabel = () =>\n        $scope.intent === 'instore'\n          ? lang.values.shoppingContextAltTitles?.instore || config.shoppingSelector.instore.title\n          : config.shoppingSelector[$scope.intent].title\n\n      $scope.onIntentChange = () => shoppingSelectorService.open('confirmation')\n\n      $scope.intentLocation = () => authService.selectors.getContextLocationString()\n\n      $scope.shouldShowIntentTimeslot = () =>\n        $scope.intent === 'instore'\n          ? !!auth.user.store.store_hours\n          : !(\n              config.policyModal.showPricingPolicyInHeader &&\n              config.policyModal.isPricingPolicyEnabled\n            ) && !(config.hideTimeslotReservationFromTrialUsers && auth.user.status === 'trial')\n\n      $scope.intentTimeslotLabel = () =>\n        $scope.intent === 'instore'\n          ? lang.values.todaysHours\n          : reservationService.previewTimeslot\n          ? lang.values.timeslotAvailable\n          : lang.values.yourTimeslot\n\n      $scope.intentTimeslotDetails = () =>\n        $scope.intent === 'instore'\n          ? $filter('todaysHours')(auth.user.store.store_hours)\n          : $scope.timeslotLabelFn()\n    }\n  )\n"],"sourceRoot":""}