{"version":3,"sources":["webpack://UnataWidgets/./node_modules/@capacitor-community/http/dist/esm/utils.js","webpack://UnataWidgets/./node_modules/@capacitor-community/http/dist/esm/cookie.js","webpack://UnataWidgets/./node_modules/@capacitor-community/http/dist/esm/request.js","webpack://UnataWidgets/./node_modules/@capacitor-community/http/dist/esm/web.js"],"names":["encode","str","encodeURIComponent","replace","decodeURIComponent","escape","decode","getCookies","output","map","document","cookie","cookies","split","k","v","trim","entries","Object","key","value","push","buildRequestInit","options","extra","assign","method","headers","type","originalKeys","keys","toLocaleLowerCase","reduce","acc","index","normalizeHttpHeaders","includes","body","JSON","stringify","data","params","URLSearchParams","set","toString","form","FormData","append","request","async","requestInit","webFetchExtra","urlParams","shouldEncode","accumulator","entry","encodedValue","item","Array","isArray","forEach","slice","substr","buildUrlParams","shouldEncodeUrlParams","url","response","fetch","contentType","get","responseType","ok","blob","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","indexOf","onerror","error","readAsDataURL","readBlobAsBase64","json","text","status","super","this","post","put","patch","del","getCookiesMap","setCookie","expires","path","encodedKey","getCookie","deleteCookie","clearCookies","Date","toUTCString","uploadFile","formData","name","fetchOptions","downloadFile"],"mappings":"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","file":"8.js","sourcesContent":["/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n//# sourceMappingURL=utils.js.map","import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n//# sourceMappingURL=cookie.js.map","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // Build request initializers based off of content-type\n    if (type.includes('application/json')) {\n        output.body = JSON.stringify(options.data);\n    }\n    else if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data') ||\n        typeof options.data === 'object') {\n        const form = new FormData();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            form.append(key, value);\n        }\n        output.body = form;\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n//# sourceMappingURL=request.js.map","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async () => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            const blob = await response.blob();\n            return {\n                blob,\n            };\n        };\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}