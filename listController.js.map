{"version":3,"sources":["webpack://UnataWidgets/./app/angular/components/account/lists/listController.js"],"names":["angular","module","controller","$sce","$scope","analytics","auth","cartAnalytics","catalogCategoriesService","config","configurableProductService","imageURLService","lang","list","listDetails","listPrintService","productDetailsModal","Object","assign","selectedMap","toggleEdit","listService","selectedItems","form","allSelected","loadList","loadListToCart","shopContextIntent","getContext","intent","SHOPPING_MODES","selectItem","item","itemIndex","itemInList","items","splice","store_product","id","push","length","selectAll","forEach","listItem","isItemCurrentlyOutOfStock","status","removeFromList","targetList","requirePricing","isRemoving","removeItems","then","categorize","finally","editName","update","nameForm","name","$setPristine","editListName","incrementItem","quantity","decrementItem","unavailableItemsExist","filter","removeUnavailable","unavailableItems","isInitialLoad","index","originalIndex","getOrderedCategoriesAndProductsWithCategories","orderedCategories","categorizedProducts","addList","keys","addToCartItems","includes","map","addItem","analyticsSourceKeys","saveForLaterLists","openModal","open","location","enterpriseProductService","utils","isProductAvailable","outOfStockWarningPopover","trustAsHtml","values","outOfStockDescription"],"mappings":"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","file":"listController.js","sourcesContent":["import angular from 'angular'\nimport { SHOPPING_MODES } from '@app/angular/constants/context'\nimport { product as enterpriseProductService } from '@instacart/enterprise-services'\n\nexport default angular\n  .module('ListControllerModule', [])\n  .controller(\n    'ListController',\n    function (\n      $sce,\n      $scope,\n      analytics,\n      auth,\n      cartAnalytics,\n      catalogCategoriesService,\n      config,\n      configurableProductService,\n      imageURLService,\n      lang,\n      list,\n      listDetails,\n      listPrintService,\n      productDetailsModal\n    ) {\n      Object.assign($scope, {\n        selectedMap: {},\n        toggleEdit: false,\n        list: listDetails,\n        listService: list,\n        selectedItems: [],\n        form: { allSelected: false },\n        loadList: list.loadListToCart,\n        shopContextIntent: auth.getContext().intent,\n        config,\n        SHOPPING_MODES,\n        imageURLService,\n        listPrintService,\n        productDetailsModal,\n        configurableProductService,\n      })\n\n      $scope.selectItem = item => {\n        const itemIndex = list.itemInList(item, { items: $scope.selectedItems }, null, true)\n\n        if (itemIndex !== -1) {\n          $scope.selectedItems.splice(itemIndex, 1)\n          $scope.selectedMap[item.store_product.id] = false\n          $scope.form.allSelected = false\n        } else {\n          $scope.selectedItems.push(item)\n          $scope.selectedMap[item.store_product.id] = true\n          if ($scope.selectedItems.length === $scope.list.items.length) {\n            $scope.form.allSelected = true\n          }\n        }\n      }\n\n      $scope.selectAll = () => {\n        if ($scope.form.allSelected) {\n          // Select All\n          $scope.list.items.forEach(listItem => {\n            const itemIndex = list.itemInList(listItem, { items: $scope.selectedItems }, null, true)\n\n            if (\n              itemIndex === -1 &&\n              !$scope.isItemCurrentlyOutOfStock(listItem) &&\n              listItem.store_product.status\n            ) {\n              $scope.selectedItems.push(listItem)\n              $scope.selectedMap[listItem.store_product.id] = true\n            }\n          })\n        } else {\n          // Deselect All\n          $scope.selectedItems.length = 0\n          $scope.list.items.forEach(listItem => {\n            $scope.selectedMap[listItem.store_product.id] = false\n          })\n        }\n      }\n\n      /**\n       * Removes the list of 'items' from the 'targetList'\n       *\n       * @param {array} items\n       * @param {object} targetList\n       * @param {boolean} requirePricing default to true\n       * @returns {undefined}\n       */\n      $scope.removeFromList = (items, targetList, requirePricing = true) => {\n        $scope.isRemoving = true\n\n        list\n          .removeItems(items, targetList, null, requirePricing)\n          .then(() => {\n            items.forEach(item => {\n              delete $scope.selectedMap[item.store_product.id]\n            })\n\n            $scope.categorize()\n          })\n          .finally(() => {\n            $scope.isRemoving = false\n            $scope.selectedItems.length = 0\n            $scope.selectedMap = {}\n            $scope.form.allSelected = false\n          })\n      }\n\n      $scope.editName = () => {\n        $scope.listService.update($scope.list).then(() => {\n          $scope.nameForm.name.$setPristine()\n          $scope.toggleEdit = false\n        })\n      }\n\n      $scope.editListName = () => {\n        $scope.toggleEdit = true\n      }\n\n      $scope.incrementItem = item => {\n        // eslint-disable-next-line no-plusplus\n        item.quantity++\n        $scope.listService.update($scope.list)\n      }\n\n      $scope.decrementItem = item => {\n        // eslint-disable-next-line no-plusplus\n        item.quantity--\n        if (item.quantity <= 0) {\n          $scope.removeFromList([item], $scope.list)\n        } else {\n          $scope.listService.update($scope.list)\n        }\n      }\n\n      // Remove Unavailable items\n\n      $scope.unavailableItemsExist = targetList => {\n        return targetList.items.filter(\n          item => !item.store_product.status || $scope.isItemCurrentlyOutOfStock(item)\n        ).length\n      }\n\n      $scope.removeUnavailable = targetList => {\n        const unavailableItems = targetList.items.filter(\n          item => !item.store_product.status || $scope.isItemCurrentlyOutOfStock(item)\n        )\n\n        $scope.removeFromList(unavailableItems, targetList, false)\n      }\n\n      // Sort products by category\n\n      $scope.categorize = (isInitialLoad = false) => {\n        $scope.list.items.forEach((item, index) => {\n          item.originalIndex = index\n\n          if (isInitialLoad) {\n            $scope.selectedMap[item.store_product.id] = false\n          }\n        })\n\n        catalogCategoriesService\n          .getOrderedCategoriesAndProductsWithCategories($scope.list.items)\n          .then(({ orderedCategories, categorizedProducts }) => {\n            $scope.orderedCategories = orderedCategories\n            $scope.categorizedProducts = categorizedProducts\n          })\n      }\n\n      $scope.addList = items => {\n        const selectedItems = Object.keys($scope.selectedMap).filter(id => {\n          return $scope.selectedMap[id] === true\n        })\n\n        const addToCartItems = items\n          .filter(item => selectedItems.includes(item.id))\n          .map(item => {\n            cartAnalytics.addItem(\n              item.store_product,\n              item.quantity,\n              item.originalIndex,\n              config.analyticsSourceKeys.saveForLaterLists,\n              {}\n            )\n            return item\n          })\n\n        $scope.loadList(addToCartItems)\n        $scope.selectedItems.length = 0\n        $scope.selectedMap = {}\n        $scope.form.allSelected = false\n      }\n\n      $scope.categorize(true)\n\n      $scope.openModal = item => {\n        if (item.store_product?.status) {\n          productDetailsModal.open(item.store_product.id, {\n            location: config.analyticsSourceKeys.saveForLaterLists,\n          })\n        }\n      }\n\n      $scope.isItemCurrentlyOutOfStock = item => {\n        return !enterpriseProductService.utils.isProductAvailable(item.store_product)\n      }\n\n      $scope.outOfStockWarningPopover = $sce.trustAsHtml(\n        `<div class=\"restrict-width\">\n          <span class=\"icon-warning add-to-cart__warning\" aria-hidden=\"true\"></span> ${lang.values.outOfStockDescription}\n        </div>`\n      )\n    }\n  )\n"],"sourceRoot":""}