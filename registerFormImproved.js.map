{"version":3,"sources":["webpack://UnataWidgets/./app/angular/components/shared/registerFormImproved/registerFormImproved.html","webpack://UnataWidgets/./app/angular/constants/registerContext.js","webpack://UnataWidgets/./app/angular/components/shared/registerFormImproved/registerFormImproved.js"],"names":["module","exports","REGISTER_CONTEXTS","POSTAL_CODE_REGEX","angular","directive","replace","scope","socialSignOnData","subscriptionCode","onRegister","template","controller","$attrs","$rootScope","$sce","$scope","$timeout","analytics","anonymousIdService","auth","cartService","config","express","lang","recaptchaService","storesService","userAnalytics","utilService","values","formContext","context","invalidFocusFn","trigger","recaptcha","enabled","isEnabled","token","action","ACTIONS","REGISTER","nameRegex","namePattern","passwordRegex","passwordPattern","showPassword","account","email","password","loyalty_cards","card_number","delivery_address","enterprise_subscription_code","initialAddress","requireFullAddress","shoppingContextProcess","delivery","addressLabel","address","postalCode","submitButtonText","signUp","createNewAccount","showRegistrationCardHelp","helpSrcContent","trustAsHtml","loadAssetImage","loyaltyCardNumberLocation","tooltipExpanded","toggleTooltip","collectAddressDuringRegistration","enableDefaultStoreFromAddress","getContext","intent","FULFILLMENT_TYPES","DELIVERY","provinceObject","states","filter","val","user","province","name","provinceShortCode","length","value","address1","street_address","city","province_short","postal_code","deliveryPostalCode","cityState","updateCityStateFromZipCode","label","detail","location_type","location","address_line_1","state","zip_code","api","addressAutocomplete","getICAddressAutocomplete","query","then","response","options","split","$apply","setInitialAddress","enableInstacartAddressAutocomplete","addressField","id","blurred","valid","error","addressChosenCallback","addressFieldBlur","requireAddressDuringRegistration","requiredForm","registerForm","$setValidity","$setTouched","$setUntouched","missingFields","document","getElementsByClassName","focus","toggleShowPassword","requirePrimaryCardInitDuringRegistration","primary_card","hasLoyalty","disableLoyaltyOnRegistrationPage","shouldDisplayLoyalty","hasUnataIssuedLoyaltyIds","shouldDisplayLoyaltyToggleLink","showLoyaltyIdField","toggleLoyalty","collectPhoneNumbersDuringRegistration","phoneNumberField","deliveryAddressPhoneNumberFields","primary_number_key","key","social_email","social_accounts","status","user_reg_info","first_name","last_name","phone_number","preferredPhoneKey","phone","defaultRequired","test","onRecaptchaSuccess","recaptchaToken","onRecaptchaExpired","register","async","$invalid","querySelectorAll","querySelector","recaptchaError","copy","siteKey","googleRecaptcha","registering","defaultStoreId","storeNumber","countItems","addressParams","getAddressCoordinates","params","SHOPPING_MODES","INSTORE_LIST","show_ecommerce","CATERING","show_catering","PICKUP","show_pickup","lat","latitude","long","longitude","stores","fetch","err","getDefaultStoreId","store_id","updateProfile","saveNotifications","updateBackendId","setContext","sendUserUpdatedStore","sendAvailableStoreContexts","logUserRegistrationAttempt","success","loyalty_onboarding","improved_registration","enableImprovedRegistration","$broadcast","logFBUserRegistered","icExpress","getCurrentSubscription","logSegmentEvent","source","catch","data","message","responseError","dev_message","getElementById","focusFormFieldError","resetLastCheckbox"],"mappings":"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","file":"registerFormImproved.js","sourcesContent":["module.exports = \"<form name=registerForm ng-submit=\\\"register(); analytics.logEvent('register', 'submit')\\\" invalid-focus focus-first-input novalidate> <div class=form-group ng-if=\\\"::(config.collectNameDuringRegistration && !config.collectAddressDuringRegistration)\\\"> <div class=form-row> <label for=registration-first-name-no-address>{{ ::lang.values.firstName }}</label> <div class=input-field> <input type=text class=input name=firstName ng-required=::config.requireNameDuringRegistration ng-model=account.first_name placeholder={{::lang.values.firstName}} id=registration-first-name-no-address aria-label={{::lang.aria.firstName}} aria-describedby=registration-first-name-no-address-error maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern={{::config.namePattern}} /> <span class=validation-icon aria-hidden=true></span> <span id=registration-first-name-no-address-error class=required-field ng-show=\\\"config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.required\\\">{{::lang.values.requiredForm.firstName}}</span> <span id=registration-first-name-no-address-error class=required-field ng-show=\\\"config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.maxlength\\\">{{::lang.values.requiredForm.firstNameMaxLength}}</span> <span id=registration-first-name-no-address-error class=required-field ng-show=\\\"config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.pattern\\\">{{::lang.values.requiredForm.firstNamePattern}}</span> </div> </div> <div class=form-row> <label for=registration-last-name-no-address>{{ ::lang.values.lastName }}</label> <div class=input-field> <input type=text class=input name=lastName ng-required=::config.requireNameDuringRegistration ng-model=account.last_name placeholder={{::lang.values.lastName}} id=registration-last-name-no-address aria-label={{::lang.aria.lastName}} aria-describedby=registration-last-name-no-address-error maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern={{::config.namePattern}} /> <span class=validation-icon aria-hidden=true></span> <span id=registration-last-name-no-address-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.required\\\">{{::lang.values.requiredForm.lastName}}</span> <span id=registration-last-name-no-address-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.maxlength\\\">{{::lang.values.requiredForm.lastNameMaxLength}}</span> <span id=registration-last-name-no-address-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.pattern\\\">{{::lang.values.requiredForm.lastNamePattern}}</span> </div> </div> </div> <div class=form-group> <div class=form-row> <label for=registration-email>{{::lang.values.email}}</label> <div class=\\\"input-field icon-left\\\"> <span class=\\\"icon-left icon-email\\\" aria-hidden=true></span> <input type=email class=input name=username required ng-model=account.email placeholder={{::lang.values.email}} id=registration-email aria-label={{::lang.aria.email}} aria-describedby=registration-email-error maxlength={{::config.maxEmailLength}} ng-maxlength={{::config.maxEmailLength}} /> <span class=validation-icon aria-hidden=true></span> <span id=registration-email-error class=required-field ng-show=\\\"(registerForm.username.$touched || registerForm.$submitted) && registerForm.username.$error.required\\\">{{::lang.values.requiredForm.email}}</span> <span id=registration-email-error class=required-field ng-show=\\\"(registerForm.username.$touched || registerForm.$submitted) && registerForm.username.$error.email\\\">{{::lang.values.requiredForm.email}}</span> <span id=registration-email-error class=required-field ng-show=\\\"(registerForm.username.$touched || registerForm.$submitted) && registerForm.username.$error.maxlength\\\">{{::lang.values.requiredForm.emailMaxLength}}</span> </div> </div> <div class=form-row> <label for=registration-password>{{::lang.values.password}}</label> <div class=\\\"input-field icon-left\\\"> <span class=\\\"icon-left icon-key-alt\\\" aria-hidden=true></span> <input ng-model=account.password name=password type=\\\"{{ showPassword ? 'text' : 'password' }}\\\" required ng-pattern=passwordRegex ng-minlength={{::config.passwordMinLength}} ng-maxlength={{::config.passwordMaxLength}} placeholder={{::lang.values.password}} id=registration-password class=\\\"input form-password\\\" aria-label={{::lang.aria.password}} aria-describedby=registration-password-error ng-model-options=\\\"{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }\\\"/> <button type=button ng-class=\\\"showPassword ? 'icon-mask' : 'icon-unmask'\\\" ng-click=toggleShowPassword() aria-label=\\\"{{::lang.values.view + ' ' + lang.values.password}}\\\"></button> <p class=input-help>{{::lang.values.passwordInputHelpText}}</p> <span id=registration-password-error class=required-field ng-if=\\\"(registerForm.password.$touched || registerForm.$submitted) && registerForm.password.$error.required\\\">{{::lang.values.requiredForm.password}} </span> <span id=registration-password-error class=required-field ng-if=\\\"(registerForm.password.$touched || registerForm.$submitted) && registerForm.password.$error.minlength\\\">{{::lang.values.passwordInvalidMinLength}} </span> <span id=registration-password-error class=required-field ng-if=\\\"(registerForm.password.$touched || registerForm.$submitted) && registerForm.password.$error.maxlength\\\">{{::lang.values.passwordInvalidMaxLength}} </span> <span id=registration-password-error class=required-field ng-if=\\\"(registerForm.password.$touched || registerForm.$submitted) &&\\n            !registerForm.password.$error.minlength &&\\n            !registerForm.password.$error.maxlength &&\\n            registerForm.password.$error.pattern\\\">{{::lang.values.passwordInvalid}} </span> </div> </div> </div> <div class=form-group> <div ng-if=\\\":: (shouldDisplayLoyalty && shouldDisplayLoyaltyToggleLink)\\\" class=show-hide-loyalty-box> <span role=button class=show-loyalty-id ng-click=toggleLoyalty() aria-controls=\\\"{{ showLoyaltyIdField ? 'register-loyalty-id-field' :  '' }}\\\" aria-expanded=\\\"{{ shouldDisplayLoyalty && (formContext === 'loyaltyRegister') && showLoyaltyIdField }}\\\">{{showLoyaltyIdField ? lang.values.dontHaveALoyaltyCard : lang.values.alreadyHaveALoyaltyCard}}</span> </div> <div ng-if=\\\"shouldDisplayLoyalty && (formContext === 'loyaltyRegister') && showLoyaltyIdField\\\" class=form-row id=register-loyalty-id-field> <label for=registration-loyalty>{{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}}</label> <div class=\\\"input-field icon-left\\\"> <span class=\\\"icon-left icon-heart\\\" aria-hidden=true></span> <input type=text class=input ng-model=account.loyalty_cards[0].card_number placeholder=\\\"{{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}}\\\" ng-pattern={{::config.loyaltyCardPattern}} maxlength={{::config.loyaltyCardMaxLength}} ng-maxlength={{::config.loyaltyCardMaxLength}} id=registration-loyalty /> <span class=validation-icon aria-hidden=true></span> <div class=input-help ng-if=lang.values.loyaltyInputHelpText> <span id=loyalty-input-help ng-bind-html=::lang.values.loyaltyInputHelpText></span> <button ng-if=::config.showRegistrationCardHelp type=button uib-popover-html=helpSrcContent popover-trigger=\\\"focus mouseenter\\\" description-id=loyalty-input-help-tooltip register-help aria-label=\\\"{{::lang.aria.imageOf}} {{::lang.values.loyaltyCardNumberLocation}}\\\" ng-click=toggleTooltip() aria-expanded=\\\"{{ tooltipExpanded }}\\\" aria-controls=loyalty-input-help></button> </div> </div> </div> <div ng-if=\\\"shouldDisplayLoyalty && (formContext === 'mainRegister')\\\" class=form-row> <label for=registration-loyalty> {{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}} </label> <div class=\\\"input-field icon-left\\\"> <span class=\\\"icon-left icon-heart\\\" aria-hidden=true></span> <input type=text class=input ng-model=account.loyalty_cards[0].card_number placeholder={{::lang.values.loyaltyCard}} id=registration-loyalty ng-pattern={{::config.loyaltyCardPattern}} maxlength={{::config.loyaltyCardMaxLength}} ng-maxlength={{::config.loyaltyCardMaxLength}} aria-label={{::lang.aria.loyaltyCard}} /> <span class=validation-icon aria-hidden=true></span> <div class=input-help ng-if=lang.values.loyaltyInputHelpText> <span id=loyalty-input-help ng-bind-html=::lang.values.loyaltyInputHelpText></span> <button ng-if=::config.showRegistrationCardHelp type=button uib-popover-html=helpSrcContent popover-trigger=\\\"focus mouseenter\\\" description-id=loyalty-input-help-tooltip register-help aria-label=\\\"{{::lang.aria.imageOf}} {{::lang.values.loyaltyCardNumberLocation}}\\\" ng-click=toggleTooltip() aria-expanded=\\\"{{ tooltipExpanded }}\\\" aria-controls=loyalty-input-help></button> </div> </div> </div> </div> <div class=form-group ng-if=::config.collectPhoneNumbersDuringRegistration> <div class=form-row> <input ng-if=\\\":: field.hideInRegistrationFormDuplicateValueKey\\\" ng-model=account[phoneNumberField.key] ng-value=\\\"account[phoneNumberField.key] = account[phoneNumberField.hideInRegistrationFormDuplicateValueKey]\\\" type=hidden /> <label for=registration-telephone-{{phoneNumberField.key}} class=ng-required>{{::phoneNumberField.label}}</label> <div class=input-field> <phone-input label={{phoneNumberField.label}} component-id=registration-telephone-{{phoneNumberField.key}} error-id=registration-telephone-{{phoneNumberField.key}}-error model=account[phoneNumberField.key]></phone-input> <div class=input-help ng-if=::phoneNumberField.helpText> {{::phoneNumberField.helpText}} </div> <span id=registration-telephone-{{phoneNumberField.key}}-error class=required-field ng-if=\\\"(registerForm.phoneNumber.$touched || registerForm.$submitted) && registerForm.phoneNumber.$invalid\\\"> {{::lang.values.requiredForm.phone}} </span> </div> </div> </div> <div class=form-group ng-if=::config.collectAddressDuringRegistration> <div class=form-row> <label for=registration-first-name>{{ ::lang.values.firstName }}</label> <div class=input-field> <input type=text class=input name=firstName ng-required=config.requireNameDuringRegistration ng-model=account.delivery_address.first_name placeholder={{::lang.values.firstName}} id=registration-first-name aria-label={{::lang.aria.firstName}} maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern=nameRegex aria-describedby=registration-first-name-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-first-name-error class=required-field ng-show=\\\"config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.required\\\">{{::lang.values.requiredForm.firstName}}</span> <span id=registration-first-name-error class=required-field ng-show=\\\"config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.maxlength\\\">{{::lang.values.requiredForm.firstNameMaxLength}}</span> <span id=registration-first-name-error class=required-field ng-show=\\\"config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.pattern\\\">{{::lang.values.requiredForm.firstNamePattern}}</span> </div> </div> <div class=form-row> <label for=registration-last-name>{{ ::lang.values.lastName }}</label> <div class=input-field> <input type=text class=input name=lastName ng-required=config.requireNameDuringRegistration ng-model=account.delivery_address.last_name placeholder={{::lang.values.lastName}} id=registration-last-name aria-label={{::lang.aria.lastName}} maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern=nameRegex aria-describedby=registration-last-name-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-last-name-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.required\\\"> {{::lang.values.requiredForm.lastName}} </span> <span id=registration-last-name-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.maxlength\\\"> {{::lang.values.requiredForm.lastNameMaxLength}} </span> <span id=registration-last-name-error class=required-field ng-if=\\\"config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.pattern\\\"> {{::lang.values.requiredForm.lastNamePattern}} </span> </div> </div> </div> <div class=form-group ng-if=::config.enableInstacartAddressAutocomplete> <div class=form-row> <label for=address-autocomplete ng-class=\\\"{ 'ng-required': config.requireAddressDuringRegistration }\\\">{{ ::lang.values.address }}</label> <div class=input-field> <react-address-autocomplete select-id=::addressField.id aria-label=::lang.values.address on-address-selected=addressChosenCallback require-full-address=::config.shoppingContextProcess.delivery.requireFullAddress initial-option=initialAddress error=\\\"((addressField.blurred || registerForm.$submitted) && addressField.error ? addressField.error : null)\\\" valid=\\\"((addressField.blurred || registerForm.$submitted) && addressField.valid)\\\" placeholder=::lang.values.address select-all-on-focus=true on-blur=addressFieldBlur></react-address-autocomplete> <span ng-class=\\\"{ 'error': (addressField.blurred || registerForm.$submitted) && addressField.error, 'valid': (addressField.blurred || registerForm.$submitted) && addressField.valid }\\\" class=validation-icon-address aria-hidden=true></span> <p class=input-help> <span ng-if=\\\"config.enableDefaultStoreFromAddress && lang.values.defaultStoreFromAddress\\\"> {{::lang.values.defaultStoreFromAddress}} </span> </p> </div> </div> </div> <div class=form-group ng-if=\\\"::!config.enableInstacartAddressAutocomplete && !requireFullAddress\\\"> <div class=form-row> <label for=registration-address ng-class=\\\"{ 'ng-required': config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration }\\\">{{ ::addressLabel }}</label> <div class=input-field> <input ng-model=account.delivery_address.postal_code ng-change=updateCityStateFromZipCode(account.delivery_address.postal_code) ng-required=::config.requireAddressDuringRegistration type=text class=input name=address placeholder={{::lang.values.postalCode}} aria-label={{::lang.aria.postalCode}} id=registration-address ng-pattern={{::config.postalCodePattern}} aria-describedby=registration-address-error autocomplete=new-user-address /> <span class=validation-icon aria-hidden=true></span> <p class=input-help> <span ng-if=cityState>{{ ::cityState }}</span><span ng-if=\\\"config.enableDefaultStoreFromAddress && lang.values.defaultStoreFromAddress\\\"> {{::lang.values.defaultStoreFromAddress}} </span> </p> <span id=registration-address-error class=required-field ng-if=\\\"(registerForm.address.$touched || registerForm.$submitted) && registerForm.address.$invalid\\\">{{::lang.values.requiredForm.postalCode}}</span> </div> </div> </div> <div class=form-group ng-if=\\\"::!config.enableInstacartAddressAutocomplete && requireFullAddress\\\"> <div class=form-row> <label for=registration-address ng-class=\\\"{ 'ng-required': config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration }\\\">{{ ::addressLabel }}</label> <div class=input-field> <address-autocomplete-input input-id=registration-address input-class=\\\"input address-input-field\\\" input-name=address input-placeholder=::lang.values.address address-chosen-callback=addressChosenCallback initial-address=account.delivery_address.address1 input-required=::config.requireAddressDuringRegistration show-street-address=true></address-autocomplete-input> <span id=registration-address-error class=required-field ng-if=\\\"(registerForm.address.$touched || registerForm.$submitted) && registerForm.address.$invalid\\\">{{::lang.values.requiredForm.address}}</span> </div> </div> <div class=form-row> <label for=registration-address2>{{lang.values.addressLine2}}</label> <div class=input-field> <input id=registration-address2 type=text class=input name=address2 ng-model=account.delivery_address.address2 placeholder={{lang.values.addressLine2Placeholder}} aria-label={{::lang.aria.addressLine2}} maxlength={{::config.deliveryAddressFieldsMaxLength}} /> <span class=validation-icon aria-hidden=true></span> </div> </div> <div class=form-row> <label for=registration-city>{{::lang.values.city}}</label> <div class=input-field> <input id=registration-city type=text class=\\\"input address-input-field\\\" name=city ng-model=account.delivery_address.city ng-required=::config.requireAddressDuringRegistration placeholder={{lang.values.city}} aria-label={{::lang.aria.city}} maxlength={{::config.formFieldMaxLengths.city}} aria-describedby=registration-city-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-city-error class=required-field ng-if=\\\"config.requireAddressDuringRegistration && (registerForm.city.$touched || registerForm.$submitted) && registerForm.city.$error.required\\\"> {{::lang.values.requiredForm.city}} </span> </div> </div> <div class=form-row> <label for=registration-state ng-class=\\\"{ 'ng-required': config.requireAddressDuringRegistration || config.requireStateDuringRegistration }\\\">{{::lang.values.province}}</label> <div class=input-field> <div province-is-required=\\\"::config.requireAddressDuringRegistration || config.requireStateDuringRegistration\\\" province-select province=account.delivery_address.province input-id-attr=registration-state></div> <span id=registration-state-error class=required-field ng-if=\\\"config.requireAddressDuringRegistration && registerForm.province.$touched && registerForm.province.$invalid\\\">{{::lang.values.requiredForm.province}}</span> </div> </div> <div class=form-row> <label for=registration-postal-code>{{::lang.values.postalCode}}</label> <div class=input-field> <input id=registration-postal-code type=text class=\\\"input address-input-field\\\" name=postalCode ng-model=account.delivery_address.postal_code ng-required=\\\"::config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration\\\" placeholder={{lang.values.postalCode}} aria-label={{::lang.aria.postalCode}} pattern={{::config.postalCodePattern}} aria-describedby=registration-postal-code-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-postal-code-error class=required-field ng-if=\\\"(config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration) && (registerForm.postalCode.$touched || registerForm.$submitted) && registerForm.postalCode.$invalid\\\"> {{::lang.values.requiredForm.postalCode}} </span> <p class=input-help> <span ng-if=\\\"config.enableDefaultStoreFromAddress && lang.values.defaultStoreFromAddress\\\"> {{::lang.values.defaultStoreFromAddress}} </span> </p> </div> </div> </div> <div class=form-group include-if-exists=\\\"'smsOptInContent.html'\\\" ng-model=account></div> <div class=form-group notification-settings-table show-group-titles=false at-registration=true on-save=saveNotifications></div> <div class=form-group> <div ng-repeat=\\\"field in ::config.customProfileFields\\\" ng-if=::field.showAtRegistration class=form-row> <label for=registration-custom-profile-{{::field.key}} ng-class=\\\"{ 'ng-required': field.required}\\\">{{::field.label}}</label> <div class=input-field ng-switch on=::field.type ng-class=\\\"[(field.icon || ''), {'icon-left': field.icon}]\\\"> <input ng-switch-when=password type=password class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern=\\\"{{::field.pattern || '.*'}}\\\" maxlength=\\\"{{::field.maxLength || null}}\\\"/> <input ng-switch-when=text type=text class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern=\\\"{{::field.pattern || '.*'}}\\\" maxlength=\\\"{{::field.maxLength || null}}\\\"/> <input ng-switch-default type=text class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern=\\\"{{::field.pattern || '.*'}}\\\" maxlength=\\\"{{::field.maxLength || null}}\\\"/> <span class=validation-icon aria-hidden=true></span> <div class=input-help ng-if=::field.helpText>{{::field.helpText}}</div> </div> </div> </div> <div class=form-group ng-if=\\\"config.subscriptions.enabled && subscriptionCode\\\"> <div class=form-row> <label for=registration-subscription>{{::lang.values.subscriptionRegisterCode}}</label> <div class=input-field> <input type=text class=input ng-model=account.enterprise_subscription_code placeholder={{::lang.values.subscriptionRegisterCode}} aria-label={{::lang.aria.subscriptionRegisterCode}} id=registration-subscription /> <span class=validation-icon aria-hidden=true></span> </div> </div> </div> <div class=form-row ng-if=::config.collectTermsAcceptanceDuringRegistration> <input id=registration-terms-acceptance class=checkbox type=checkbox required ng-model=account.accept_terms /> <label class=\\\"left-align registration-terms-acceptance-label\\\" for=registration-terms-acceptance ng-bind-html=lang.values.termsAndConditionsAcceptance></label> </div> <div class=form-group> <div include-if-exists=\\\"'registerFormExtraContent.html'\\\"></div> </div> <recaptcha-checkbox ng-if=::recaptcha.enabled class=recaptcha-container action=recaptcha.action on-success=onRecaptchaSuccess on-expired=onRecaptchaExpired /> <div class=form-submit-group> <button type=submit ng-disabled=registering id=registration-submit class=\\\"button mobile-bottom\\\" ng-class=\\\"{'loading': registering, 'loyalty-onboarding-call-to-action': loyaltyOnboardingStep}\\\"> {{::submitButtonText}} </button> <div class=terms-and-conditions ng-if=::config.loyaltyOnboarding.form.termsAndConditions> <span ng-bind-html=::config.loyaltyOnboarding.form.termsAndConditions></span> </div> </div> <div ng-if=error class=\\\"message error reveal form-row\\\" scroll-into-view scroll-container=.modal-content compile=error></div> </form> \";","export const REGISTER_CONTEXTS = {\n  MAIN_REGISTER: 'mainRegister',\n  LOYALTY_ONBOARDING: 'loyaltyOnboarding',\n}\n","import _ from 'lodash'\nimport angular from 'angular'\nimport { FULFILLMENT_TYPES } from '@app/angular/constants/checkout'\nimport { ACTIONS } from '@app/angular/constants/recaptcha'\nimport { REGISTER_CONTEXTS } from '@app/angular/constants/registerContext'\nimport { SHOPPING_MODES } from '@app/angular/constants/context'\nimport { user } from '@instacart/enterprise-services'\nimport template from './registerFormImproved.html'\n\nconst POSTAL_CODE_REGEX = /^\\d{5}(?:[-\\s]*\\d{4})?$/\n\nexport default angular\n  .module('RegisterFormImprovedDirectiveModule', [])\n  .directive('registerFormImproved', function () {\n    return {\n      replace: true,\n      scope: {\n        socialSignOnData: '=?',\n        subscriptionCode: '=?',\n        onRegister: '&?',\n      },\n      template,\n      // eslint-disable-next-line complexity\n      controller(\n        $attrs,\n        $rootScope,\n        $sce,\n        $scope,\n        $timeout,\n        analytics,\n        anonymousIdService,\n        auth,\n        cartService,\n        config,\n        express,\n        lang,\n        recaptchaService,\n        storesService,\n        userAnalytics,\n        utilService,\n        values\n      ) {\n        // Defines whether the form is on the main register flow (context=\"mainRegister\") or the loyalty onboarding flow (context=\"loyaltyRegister\")\n        // This is passed in as an attribute when the directive is implemented.\n\n        $scope.formContext = $attrs.context\n        $scope.config = config\n        $scope.lang = lang\n        $scope.invalidFocusFn = {}\n        $scope.trigger = $attrs.trigger\n        $scope.recaptcha = {\n          enabled: recaptchaService.isEnabled(),\n          token: null,\n          action: ACTIONS.REGISTER,\n        }\n        $scope.nameRegex = config.namePattern\n        $scope.passwordRegex = config.passwordPattern\n        $scope.showPassword = false\n        $scope.account = {\n          email: '',\n          password: '',\n          loyalty_cards: [\n            {\n              card_number: '',\n            },\n          ],\n          delivery_address: {},\n          enterprise_subscription_code: $scope.subscriptionCode || '',\n        }\n        $scope.initialAddress = null\n        $scope.requireFullAddress = config.shoppingContextProcess.delivery?.requireFullAddress\n        $scope.addressLabel = $scope.requireFullAddress\n          ? lang.values.address\n          : lang.values.postalCode\n        $scope.submitButtonText =\n          $scope.formContext === REGISTER_CONTEXTS.LOYALTY_ONBOARDING\n            ? lang.values.signUp\n            : lang.values.createNewAccount\n\n        if (config.showRegistrationCardHelp) {\n          $scope.helpSrcContent = $sce.trustAsHtml(\n            `<img src=\"${utilService.loadAssetImage(\n              'images/card-help.jpg'\n              // Using labelledby as the lang value can contain markup\n            )}\" aria-labelledby=\"loyalty-input-help\" alt=\"${\n              lang.values.loyaltyCardNumberLocation\n            }\" title=\"${lang.values.loyaltyCardNumberLocation}\" id=\"loyalty-input-help\">`\n          )\n\n          $scope.tooltipExpanded = false\n\n          $scope.toggleTooltip = function () {\n            $scope.tooltipExpanded = !$scope.tooltipExpanded\n          }\n        }\n\n        // default store: autofill registration address based on intent\n        // eslint-disable-next-line complexity\n        if (\n          $scope.config.collectAddressDuringRegistration &&\n          $scope.config.enableDefaultStoreFromAddress &&\n          auth.getContext().intent === FULFILLMENT_TYPES.DELIVERY\n        ) {\n          // get short code from province\n          const provinceObject = values.states.filter(\n            val => auth.user.context?.province === val.name\n          )\n          const provinceShortCode = provinceObject.length ? provinceObject[0].value : ''\n\n          const address1 = auth.user.context?.street_address\n          const city = auth.user.context?.city\n          const province = auth.user.context?.province_short || provinceShortCode\n          const postal_code = auth.user.context?.deliveryPostalCode\n\n          $scope.account.delivery_address = { address1, city, province, postal_code }\n\n          if (city && province) {\n            $scope.cityState = `${city}, ${province}`\n          } else {\n            updateCityStateFromZipCode(postal_code)\n          }\n\n          setInitialAddress($scope.account.delivery_address)\n        }\n\n        if (config.enableInstacartAddressAutocomplete) {\n          $scope.addressField = {\n            id: 'registration-address',\n            blurred: false,\n            valid: false,\n            error: null,\n          }\n\n          $scope.addressChosenCallback = address => {\n            $scope.$apply(() => {\n              if (address?.location) {\n                const { location } = address\n                $scope.account.delivery_address.address1 = location.address_line_1\n                $scope.account.delivery_address.city = location.city\n                $scope.account.delivery_address.province = location.state\n                $scope.account.delivery_address.postal_code = location.zip_code\n              } else {\n                $scope.account.delivery_address.address1 = null\n                $scope.account.delivery_address.city = null\n                $scope.account.delivery_address.province = null\n                $scope.account.delivery_address.postal_code = null\n                $scope.addressField.valid = false\n              }\n            })\n          }\n\n          $scope.addressFieldBlur = () => {\n            $scope.$apply(() => {\n              $scope.addressField.blurred = true\n\n              if (\n                config.requireAddressDuringRegistration &&\n                // at the minimum, we need the postal code\n                !$scope.account.delivery_address.postal_code\n              ) {\n                $scope.addressField.error = lang.values.requiredForm.address\n              } else {\n                $scope.addressField.error = null\n              }\n\n              if ($scope.account.delivery_address.postal_code && !$scope.addressField.error) {\n                $scope.addressField.valid = true\n              }\n            })\n          }\n        } else {\n          $scope.addressChosenCallback = address => {\n            // address can be manually edited by user so should update alone\n            if (address.address1) {\n              $scope.account.delivery_address.address1 = address.address1\n              $scope.registerForm.address.$setValidity('address', true)\n            }\n            if (address.city || address.province_short || address.postal_code) {\n              $scope.account.delivery_address.city = address.city\n              $scope.registerForm.city.$setTouched()\n              address.city && $scope.registerForm.city.$setValidity('city', true)\n              $scope.account.delivery_address.province = address.province_short\n              $scope.registerForm.province.$setTouched()\n              address.province_short && $scope.registerForm.province.$setValidity('province', true)\n              $scope.account.delivery_address.postal_code = address.postal_code\n              $scope.registerForm.postalCode.$setTouched()\n              address.postal_code && $scope.registerForm.postalCode.$setValidity('postalCode', true)\n            }\n\n            if (!config.requireAddressDuringRegistration && !address.address1) {\n              $scope.registerForm.address.$setValidity('address', true)\n              $scope.registerForm.address.$setUntouched()\n            }\n\n            $timeout(() => {\n              const missingFields = document.getElementsByClassName(\n                'address-input-field ng-invalid'\n              )\n              if (missingFields.length) {\n                missingFields[0].focus()\n              }\n            })\n          }\n        }\n\n        $scope.updateCityStateFromZipCode = updateCityStateFromZipCode\n\n        $scope.toggleShowPassword = () => {\n          $scope.showPassword = !$scope.showPassword\n        }\n\n        if (config.requirePrimaryCardInitDuringRegistration) {\n          $scope.account.loyalty_cards[0].primary_card = true\n        }\n\n        if (config.hasLoyalty && !config.disableLoyaltyOnRegistrationPage) {\n          $scope.shouldDisplayLoyalty = true\n\n          if (config.hasUnataIssuedLoyaltyIds && $scope.formContext === 'loyaltyRegister') {\n            $scope.shouldDisplayLoyaltyToggleLink = true\n\n            // Hide loyalty id field when the user first sees the form\n            $scope.showLoyaltyIdField = false\n          } else {\n            // Show loyalty id field when the user first sees the form\n            $scope.showLoyaltyIdField = true\n          }\n\n          $scope.toggleLoyalty = function () {\n            $scope.showLoyaltyIdField = !$scope.showLoyaltyIdField\n          }\n        }\n\n        // One user only has one phone number field set primary to first one\n        if (config.collectPhoneNumbersDuringRegistration) {\n          $scope.phoneNumberField = config.deliveryAddressPhoneNumberFields[0]\n          $scope.account.primary_number_key = $scope.phoneNumberField.key\n        }\n\n        if ($scope.socialSignOnData) {\n          $scope.account.email = $scope.socialSignOnData.social_email\n          $scope.account.social_accounts = _.map(\n            $scope.socialSignOnData.user.social_accounts,\n            account => {\n              account.status = true\n              return account\n            }\n          )\n\n          // Pre-populate form with first and last name returned by IDP\n          if ($scope.socialSignOnData.user_reg_info) {\n            const {\n              first_name = '',\n              last_name = '',\n              phone_number = '',\n            } = $scope.socialSignOnData.user_reg_info\n\n            if (config.collectAddressDuringRegistration) {\n              $scope.account.delivery_address.first_name = first_name\n              $scope.account.delivery_address.last_name = last_name\n            } else {\n              $scope.account.first_name = first_name\n              $scope.account.last_name = last_name\n            }\n\n            const preferredPhoneKey =\n              $scope.account.primary_number_key || config.phone.defaultRequired\n            $scope.account[preferredPhoneKey] = phone_number\n          }\n        }\n\n        $scope.onRecaptchaSuccess = recaptchaToken => {\n          $scope.$apply(() => {\n            $scope.recaptcha.token = recaptchaToken\n          })\n        }\n\n        $scope.onRecaptchaExpired = () => {\n          $scope.$apply(() => {\n            $scope.recaptcha.token = null\n          })\n        }\n\n        $scope.register = async () => {\n          delete $scope.error\n\n          if ($scope.registerForm.$invalid) {\n            document.querySelectorAll('.ng-invalid:not(form)')[0].focus()\n            return\n          }\n\n          if (config.enableInstacartAddressAutocomplete && $scope.addressField.error) {\n            document.querySelector(`#${$scope.addressField.id} input`).focus()\n            return\n          }\n\n          if ($scope.recaptcha.enabled && !$scope.recaptcha.token) {\n            $scope.error = $scope.lang.values.recaptchaError\n            return\n          }\n\n          const account = angular.copy($scope.account)\n\n          if (!account.loyalty_cards[0].card_number) {\n            account.loyalty_cards = []\n          }\n\n          if ($scope.recaptcha.enabled) {\n            account.recaptcha = {\n              token: $scope.recaptcha.token,\n              siteKey: config.googleRecaptcha?.siteKey,\n            }\n          }\n\n          $scope.registering = true\n\n          // Get default store from zip code unless user has explicitly set store\n          // or has added items to cart\n          const shouldGetDefaultStore =\n            $scope.config.enableDefaultStoreFromAddress &&\n            !(auth.getContext()?.storeNumber || cartService.countItems() > 0)\n\n          const defaultStoreId = shouldGetDefaultStore\n            ? await getDefaultStoreId(account.delivery_address, auth.getContext().intent)\n            : null\n\n          if (defaultStoreId) {\n            account.store_id = defaultStoreId\n          }\n\n          return auth\n            .updateProfile(account)\n            .then(() => $scope.saveNotifications())\n            .then(anonymousIdService.updateBackendId)\n            .then(() => {\n              return defaultStoreId\n                ? auth\n                    .setContext({ storeNumber: defaultStoreId })\n                    .then(auth.sendUserUpdatedStore(auth.user))\n                    .then(auth.sendAvailableStoreContexts(auth.user))\n                    .then(cartService.fetch)\n                : null\n            })\n            .then(() => {\n              if ($scope.trigger === 'loyaltyOnboarding') {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: true,\n                  loyalty_onboarding: true,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              } else {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: true,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              }\n\n              $rootScope.$broadcast('registered')\n              $scope.registering = false\n              analytics.logFBUserRegistered()\n\n              if (config.icExpress.enabled) {\n                express.getCurrentSubscription()\n              }\n\n              // Subscription analytics tracking\n              if (account.enterprise_subscription_code) {\n                // TODO: remove this event hook once analytics is ported over to react\n                analytics.logSegmentEvent('subscription.redeem_gift_code', {\n                  success: true,\n                  source: 'registration',\n                })\n              }\n\n              if ($scope.onRegister) {\n                return $scope.onRegister()\n              }\n            })\n            .catch(response => {\n              if ($scope.trigger === 'loyaltyOnboarding') {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: false,\n                  loyalty_onboarding: true,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              } else {\n                userAnalytics.logUserRegistrationAttempt({\n                  success: false,\n                  improved_registration: $scope.config.enableImprovedRegistration,\n                })\n              }\n              $scope.error = response.data ? response.data.message : response.message\n              $scope.registering = false\n              focusFormFieldError(response)\n              $scope.recaptcha.token = null\n              recaptchaService.resetLastCheckbox()\n            })\n        }\n\n        function updateCityStateFromZipCode(postalCode) {\n          if (!POSTAL_CODE_REGEX.test(postalCode)) {\n            $scope.cityState = ''\n            $scope.account.delivery_address.city = null\n            $scope.account.delivery_address.province = null\n          } else {\n            return user.api.addressAutocomplete\n              .getICAddressAutocomplete({ query: postalCode })\n              .then(response => {\n                $scope.cityState = (response.options?.length && response.options[0].detail) || ''\n\n                if ($scope.cityState) {\n                  const [city, province] = $scope.cityState.split(', ')\n\n                  $scope.account.delivery_address.city = city\n                  $scope.account.delivery_address.province = province\n\n                  $scope.$apply(() => {\n                    $scope.registerForm.address.$setValidity('address', true)\n                  })\n                } else {\n                  $scope.cityState = ''\n                  $scope.account.delivery_address.city = null\n                  $scope.account.delivery_address.province = null\n                  $scope.$apply(() => {\n                    $scope.registerForm.address.$setValidity('address', false)\n                  })\n                }\n              })\n          }\n        }\n\n        async function getDefaultStoreId({ address1, city, province, postal_code }, intent) {\n          try {\n            const addressParams =\n              address1 && city && province\n                ? `${address1}, ${city}, ${province}, ${postal_code}`\n                : postal_code\n\n            const location = await storesService.getAddressCoordinates(addressParams)\n\n            const params = {}\n\n            if (intent !== SHOPPING_MODES.INSTORE_LIST) {\n              params.show_ecommerce = true\n            }\n\n            if (intent === SHOPPING_MODES.CATERING) {\n              params.show_catering = true\n            } else if (intent === SHOPPING_MODES.PICKUP) {\n              params.show_pickup = true\n            }\n\n            if (location) {\n              params.lat = location.latitude\n              params.long = location.longitude\n            }\n\n            const stores = await storesService.fetch(params)\n            return stores.length > 0 ? stores[0].id : null\n          } catch (err) {\n            return null\n          }\n        }\n\n        function setInitialAddress(address) {\n          const { address1, city, province, postal_code } = address\n          // Complete address\n          if (address1 && city && province && postal_code) {\n            $scope.initialAddress = {\n              label: `${address1}, ${city}, ${province} ${postal_code}`,\n              value: {\n                label: address1,\n                detail: `${city}, ${province} ${postal_code}`,\n                location_type: 'address',\n                location: {\n                  address_line_1: address1,\n                  city,\n                  state: province,\n                  zip_code: postal_code,\n                },\n              },\n            }\n          } else if (city && province && postal_code) {\n            $scope.initialAddress = {\n              label: `${postal_code} ${city}, ${province}`,\n              value: {\n                label: postal_code,\n                detail: `${city}, ${province}`,\n                location_type: 'postal_code',\n                location: {\n                  zip_code: postal_code,\n                },\n              },\n            }\n          } else if (postal_code) {\n            user.api.addressAutocomplete\n              .getICAddressAutocomplete({ query: postal_code })\n              .then(response => {\n                const detail = response?.options?.length && response.options[0].detail\n                const [city, province] = detail?.split(', ') || ''\n\n                $scope.$apply(() => {\n                  $scope.initialAddress = {\n                    label: city && province ? `${postal_code} ${city}, ${province}` : postal_code,\n                    value: {\n                      label: postal_code,\n                      detail: city && province ? `${city}, ${province}` : '',\n                      location_type: 'postal_code',\n                      location: {\n                        zip_code: postal_code,\n                      },\n                    },\n                  }\n                })\n              })\n          }\n        }\n\n        function focusFormFieldError(responseError) {\n          switch (responseError.error) {\n            case 40002:\n              if (\n                responseError.dev_message === 'This is not a valid email address.' ||\n                responseError.dev_message === 'This email is already registered.'\n              ) {\n                document.getElementById('registration-email').focus()\n              } else {\n                document.getElementById('registration-password').focus()\n              }\n              break\n            case 40301:\n              document\n                .getElementById(`registration-telephone-${$scope.account.primary_number_key}`)\n                .focus()\n              break\n            default:\n              break\n          }\n        }\n      },\n    }\n  })\n"],"sourceRoot":""}