{"version":3,"sources":["webpack://UnataWidgets/./packages/enterprise-loyalty-barcode/components/Barcode.tsx","webpack://UnataWidgets/./packages/enterprise-loyalty-barcode/utils/index.ts","webpack://UnataWidgets/./packages/enterprise-loyalty-barcode/components/LoyaltyBarcodeDynamic.tsx","webpack://UnataWidgets/./packages/enterprise-loyalty-barcode/components/LoyaltyBarcodeStatic.tsx","webpack://UnataWidgets/./packages/enterprise-loyalty-barcode/components/LoyaltyBarcode.tsx","webpack://UnataWidgets/./packages/enterprise-loyalty-barcode/components/UserLoyaltyBarcode.tsx"],"names":["Barcode","props","value","options","alt","restProps","imageRef","createRef","useEffect","JsBarcode","current","ref","memo","useStyles","createStyles","tokens","root","padding","barcode","display","width","height","marginLeft","marginRight","overflow","textAlign","label","size","spacing","xSmall","lineHeight","fontSize","font","large","fontWeight","weight","bold","utils","mediaQuery","minWidth","breakpoint","medium","caption","displayName","LoyaltyBarcodeDynamic","cardNumber","barcodeNumber","useBarcodeNumberLabel","styles","loyaltyCardNumber","configService","selectors","getLang","config","getConfig","showLabel","jsBarcodeOptions","formatting","showBarcode","loyaltyBarcode","formattedCardNumber","displayedCardNumber","prepend","wrapWithAsterisks","prefix","visible","formatCardNumber","numberForBarcodeGeneration","length","langService","interpolate","labelComponent","css","component","data-test","fallback","LoyaltyBarcodeStatic","barcodeImage","src","LoyaltyBarcode","card","card_number","barcode_number","barcode_image","useLoyaltyBarcodeComponent","undefined","UserLoyaltyBarcode","isLoading","useUserQuery","suspense","shape","auth","getPrimaryLoyaltyCard"],"mappings":"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","file":"90.js","sourcesContent":["import React, { memo, useEffect, createRef } from 'react'\nimport JsBarcode from 'jsbarcode'\n\nexport interface Props {\n  /** Barcode Value */\n  value: string\n  options?: JsBarcode.Options\n  alt?: string\n  width?: number\n  height?: number\n}\n\n/**\n * Barcode component that wraps JS Barcode.\n */\nconst Barcode: React.FC<Props> = props => {\n  const { value, options, alt = 'Barcode', ...restProps } = props\n  const imageRef = createRef<HTMLImageElement>()\n\n  useEffect(() => {\n    JsBarcode(imageRef.current, value, { ...options })\n  }, [imageRef, options, value])\n\n  return <img ref={imageRef} alt={alt} {...restProps} />\n}\n\nexport default memo(Barcode)\n","import { createStyles, utils } from '@instacart/cocktail'\n\nexport interface LoyaltyBarcodeFormatting {\n  prepend?: {\n    prefix?: string\n    visible: boolean\n  }\n  wrapWithAsterisks: boolean\n}\n\n/**\n * Applies any transformations to the supplied card number\n * string as required based on configs.\n * Some transformations are meant only for code calculations behind the scenes,\n * we may not want to show those transformations the end-user (configurable)\n *\n * @param {string} cardNumber - the card number\n * @returns {Object}\n * @returns {string} formattedCardNumber - the formatted card number, used behind the scenes (e.g. rendering barcode)\n * @returns {string} displayedCardNumber - the card number that the user is familiar with (i.e. what's printed on their physical card)\n */\nexport function formatCardNumber(cardNumber: string, formatting: LoyaltyBarcodeFormatting) {\n  const { prepend, wrapWithAsterisks } = formatting\n\n  let displayedCardNumber = cardNumber\n  let formattedCardNumber = cardNumber\n\n  if (prepend && prepend.prefix) {\n    formattedCardNumber = `${prepend.prefix}${cardNumber}`\n    if (prepend.visible) {\n      displayedCardNumber = formattedCardNumber\n    }\n  }\n\n  if (wrapWithAsterisks) {\n    formattedCardNumber = `*${formattedCardNumber}*`\n  }\n\n  return { formattedCardNumber, displayedCardNumber }\n}\n\nexport const useStyles = createStyles(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (tokens: any) => ({\n    root: {\n      padding: 0,\n    },\n    barcode: {\n      display: 'block',\n      width: 202,\n      height: 60,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      overflow: 'hidden',\n      textAlign: 'center',\n    },\n    label: {\n      textAlign: 'center',\n      padding: tokens.size.spacing.xSmall,\n      lineHeight: 1.2,\n      fontSize: tokens.size.font.large,\n      fontWeight: tokens.font.weight.bold - 100,\n      [utils.mediaQuery.minWidth(tokens.breakpoint.medium)]: {\n        padding: tokens.size.spacing.xSmall,\n        fontSize: tokens.size.font.caption - 1,\n      },\n    },\n  }),\n  { displayName: 'LoyaltyBarcode' }\n)\n","import React, { memo } from 'react'\nimport { Text } from '@instacart/cocktail'\nimport { ErrorBoundary } from '@instacart/enterprise-ui-common'\nimport { lang as langService, config as configService } from '@instacart/enterprise-services'\nimport Barcode from './Barcode'\nimport { formatCardNumber, LoyaltyBarcodeFormatting, useStyles } from '../utils'\n\nexport interface Props {\n  cardNumber: string\n  barcodeNumber?: string\n  useBarcodeNumberLabel?: boolean\n}\n\n/**\n * Loyalty Barcode componnent.\n */\nconst LoyaltyBarcodeDynamic: React.FC<Props> = props => {\n  const { cardNumber, barcodeNumber, useBarcodeNumberLabel } = props\n  const styles = useStyles(props)\n  const { loyaltyCardNumber } = configService.selectors.getLang()\n  const config = configService.selectors.getConfig()\n\n  const { showLabel, jsBarcodeOptions, formatting, showBarcode } = config.loyaltyBarcode as {\n    showLabel: boolean\n    jsBarcodeOptions: JsBarcode.Options\n    formatting: LoyaltyBarcodeFormatting\n    showBarcode: boolean\n  }\n\n  const { formattedCardNumber, displayedCardNumber } = formatCardNumber(cardNumber, formatting)\n  const numberForBarcodeGeneration =\n    barcodeNumber && barcodeNumber.length > 0 ? barcodeNumber : formattedCardNumber\n  const label = langService.interpolate(loyaltyCardNumber, {\n    cardNumber: useBarcodeNumberLabel && barcodeNumber ? barcodeNumber : displayedCardNumber,\n  })\n  const labelComponent = (\n    <Text css={styles.label} component=\"div\" data-test=\"barcode-label\">\n      {label}\n    </Text>\n  )\n\n  return (\n    <div css={styles.root}>\n      <ErrorBoundary key={numberForBarcodeGeneration} fallback={labelComponent}>\n        {showBarcode && (\n          <Barcode\n            css={styles.barcode}\n            value={numberForBarcodeGeneration}\n            options={jsBarcodeOptions}\n          />\n        )}\n        {showLabel && labelComponent}\n      </ErrorBoundary>\n    </div>\n  )\n}\n\nexport default memo(LoyaltyBarcodeDynamic)\n","import React, { memo } from 'react'\nimport { Text } from '@instacart/cocktail'\nimport { lang as langService, config as configService } from '@instacart/enterprise-services'\nimport { useStyles } from '../utils'\n\nexport interface Props {\n  cardNumber: string\n  barcodeImage?: string\n  barcodeNumber?: string\n  useBarcodeNumberLabel?: boolean\n}\n\n/**\n * Static Loyalty Barcode\n * Uses Card image and number.\n */\nconst LoyaltyBarcodeStatic: React.FC<Props> = props => {\n  const { cardNumber, barcodeImage, barcodeNumber, useBarcodeNumberLabel } = props\n  const styles = useStyles(props)\n  const { loyaltyCardNumber } = configService.selectors.getLang()\n  const config = configService.selectors.getConfig()\n\n  const { showLabel, showBarcode } = config.loyaltyBarcode as {\n    showLabel: boolean\n    showBarcode: boolean\n  }\n\n  const label = langService.interpolate(loyaltyCardNumber, {\n    cardNumber: useBarcodeNumberLabel && barcodeNumber ? barcodeNumber : cardNumber,\n  })\n\n  return (\n    <div css={styles.root}>\n      {showBarcode && barcodeImage && barcodeImage.length > 0 && (\n        <img css={styles.barcode} src={barcodeImage} alt=\"Barcode\" />\n      )}\n      {showLabel && (\n        <Text css={styles.label} component=\"div\" data-test=\"barcode-label\">\n          {label}\n        </Text>\n      )}\n    </div>\n  )\n}\n\nexport default memo(LoyaltyBarcodeStatic)\n","import React, { memo } from 'react'\nimport { config as configService } from '@instacart/enterprise-services'\nimport { LoyaltyCard } from '@instacart/enterprise-services/loyalty/api/loyaltyCards'\nimport LoyaltyBarcodeDynamic from './LoyaltyBarcodeDynamic'\nimport LoyaltyBarcodeStatic from './LoyaltyBarcodeStatic'\n\nexport interface Props {\n  card: LoyaltyCard\n  useBarcodeNumberLabel?: boolean\n}\n\n/**\n * Loyalty Barcode componnent.\n * Wraps either a static or dynamicly generated barcode.\n */\nconst LoyaltyBarcode: React.FC<Props> = ({ card, useBarcodeNumberLabel }) => {\n  const {\n    card_number: cardNumber,\n    barcode_number: barcodeNumber,\n    barcode_image: barcodeImage,\n  } = card\n  const config = configService.selectors.getConfig()\n  const useBarcodeComponent = config.useLoyaltyBarcodeComponent as boolean\n\n  return useBarcodeComponent ? (\n    <LoyaltyBarcodeDynamic\n      cardNumber={cardNumber}\n      barcodeNumber={barcodeNumber || undefined}\n      useBarcodeNumberLabel={useBarcodeNumberLabel}\n    />\n  ) : (\n    <LoyaltyBarcodeStatic\n      cardNumber={cardNumber}\n      barcodeImage={barcodeImage}\n      barcodeNumber={barcodeNumber || undefined}\n      useBarcodeNumberLabel={useBarcodeNumberLabel}\n    />\n  )\n}\n\nexport default memo(LoyaltyBarcode)\n","import React, { memo } from 'react'\nimport { LoadingBlock } from '@instacart/cocktail'\nimport { auth } from '@instacart/enterprise-services'\nimport { useUserQuery } from '@instacart/enterprise-services-hooks/auth'\nimport LoyaltyBarcode from './LoyaltyBarcode'\n\nexport interface UserLoyaltyBarcodeProps {}\n\nconst UserLoyaltyBarcode: React.FC<UserLoyaltyBarcodeProps> = () => {\n  const { isLoading } = useUserQuery({ suspense: false })\n\n  if (isLoading) {\n    return <LoadingBlock shape=\"square\" height={100} width={200} />\n  }\n\n  // Get the users primary loyalty card\n  const card = auth.selectors.getPrimaryLoyaltyCard()\n\n  // Render the barcode if the card exists\n  if (card) {\n    return <LoyaltyBarcode card={card} />\n  }\n\n  // If the user doesn't have a loyalty card - render nothing\n  return null\n}\n\nexport default memo(UserLoyaltyBarcode)\n"],"sourceRoot":""}