{"version":3,"sources":["webpack://UnataWidgets/./app/angular/components/account/rateProducts/rateProductsController.js"],"names":["angular","module","controller","$element","$filter","$scope","$timeout","config","imageURLService","lang","mobileService","currentProductIndex","currentProduct","totalPointsAwarded","mobile","fetchProducts","product","api","getAll","tags","has_image","then","response","products","items","updateRemainingMessage","$apply","nextProduct","el","element","document","querySelector","addClass","removeClass","remaining","length","message","template","values","ratingsRemaining","pluralizedItem","item","onRate","result","points","awarded","total","balance","pointsAdded","pluralizedPoint","point","pluralizedPointTotal","mode","$watch","totalPointsMessage","loyaltyCard"],"mappings":"oIAAA,4EAGeA,cACZC,OAAO,+BAAgC,IACvCC,WACC,yBAHW,4FAIX,SAAUC,EAAUC,EAASC,EAAQC,EAAUC,EAAQC,EAAiBC,EAAMC,GAC5EL,EAAOM,oBAAsB,EAC7BN,EAAOO,eAAiB,KACxBP,EAAOQ,mBAAqB,EAC5BR,EAAOG,gBAAkBA,EACzBH,EAAOE,OAASA,EAChBF,EAAOS,OAASJ,EAKhBL,EAAOU,cAAgB,WACrBC,IAAQC,IAAID,QACTE,OAAO,CAAEC,KAAM,CAAC,YAAa,iBAAkBC,WAAW,IAC1DC,KAAKC,IACJjB,EAAOkB,SAAWD,EAASE,MAC3BnB,EAAOM,oBAAsB,EAC7BN,EAAOO,eAAiBP,EAAOkB,SAAS,GACxClB,EAAOoB,yBACPpB,EAAOqB,YAIbrB,EAAOU,gBAIPV,EAAOsB,YAAc,WAInB,MAAMC,EAAK5B,IAAQ6B,QAAQC,SAASC,cAAc,yBAClDH,EAAGI,SAAS,OAEZ1B,EAAS,KACPsB,EAAGK,YAAY,OAGf5B,EAAOM,sBACPN,EAAOO,eAAiBP,EAAOkB,SAASlB,EAAOM,qBAE/CN,EAAOoB,0BACN,MAKLpB,EAAOoB,uBAAyB,WAC9BpB,EAAO6B,UAAY7B,EAAOkB,SAASY,OAAS9B,EAAOM,oBACnDN,EAAO+B,QAAU3B,EAAK4B,SAAS5B,EAAK6B,OAAOC,iBAAkB,CAC3DL,UAAW7B,EAAO6B,UAClBM,eAAgBpC,EAAQ,YAARA,CAAqBK,EAAK6B,OAAOG,KAAMpC,EAAO6B,cAOlE7B,EAAOqC,OAAS,SAAUC,GACxB,GAAIA,EAAOC,QAAUD,EAAOC,OAAOC,QAAS,CAC1C,MAAMD,EAASD,EAAOC,OAAOC,QACvBC,EAAQH,EAAOC,OAAOG,QAC5B1C,EAAOQ,oBAAsB+B,EAE7BvC,EAAO+B,QAAU3B,EAAK4B,SAAS5B,EAAK6B,OAAOU,YAAa,CACtDJ,SACAK,gBAAiB7C,EAAQ,YAARA,CAAqBK,EAAK6B,OAAOY,MAAON,GACzDE,QACAK,qBAAsB/C,EAAQ,YAARA,CAAqBK,EAAK6B,OAAOY,MAAOJ,OAOpEzC,EAAO+C,KAAO,GAEd/C,EAAO+C,KAAO,WAER/C,EAAOkB,UAAsC,GAA1BlB,EAAOkB,SAASY,SACrC9B,EAAO+C,KAAO,SAGX/C,EAAOkB,WACVlB,EAAO+C,KAAO,WAId/C,EAAOkB,UACPlB,EAAOkB,SAASY,OAAS,GACzB9B,EAAOM,oBAAsBN,EAAOkB,SAASY,SAE7C9B,EAAO+C,KAAO,UAId/C,EAAOkB,UACPlB,EAAOkB,SAASY,OAAS,GAEzB9B,EAAOM,qBAAuBN,EAAOkB,SAASY,SAE9C9B,EAAO+C,KAAO,SAIlB/C,EAAOgD,OAAOhD,EAAO+C,MAIrB/C,EAAOiD,mBAAqB,WAC1B,OAAO7C,EAAK4B,SAAS5B,EAAK6B,OAAOzB,mBAAoB,CACnDiC,MAAOzC,EAAOQ,mBACdoC,gBAAiB7C,EAAQ,YAARA,CAAqBK,EAAK6B,OAAOY,MAAO7C,EAAOQ,oBAChE0C,YAAa9C,EAAK6B,OAAOiB","file":"rateProductsController.js","sourcesContent":["import angular from 'angular'\nimport { product } from '@instacart/enterprise-services'\n\nexport default angular\n  .module('RateProductsControllerModule', [])\n  .controller(\n    'RateProductsController',\n    function ($element, $filter, $scope, $timeout, config, imageURLService, lang, mobileService) {\n      $scope.currentProductIndex = 0\n      $scope.currentProduct = null\n      $scope.totalPointsAwarded = 0\n      $scope.imageURLService = imageURLService\n      $scope.config = config\n      $scope.mobile = mobileService\n\n      // Fetch products from the api\n      // FIXME: Should pass appropriate filters to API, spec TBD\n\n      $scope.fetchProducts = function () {\n        product.api.product\n          .getAll({ tags: ['purchased', 'has_not_rated'], has_image: false })\n          .then(response => {\n            $scope.products = response.items\n            $scope.currentProductIndex = 0\n            $scope.currentProduct = $scope.products[0]\n            $scope.updateRemainingMessage()\n            $scope.$apply()\n          })\n      }\n\n      $scope.fetchProducts() // Fetch products initially\n\n      // Rate the enxt product\n\n      $scope.nextProduct = function () {\n        // Evil DOM manipulation hack to add / remove the classname to animate the card stack\n        // In a perfect world, we'd use ng-animate or a directive for this\n\n        const el = angular.element(document.querySelector('.rate-products-stack'))\n        el.addClass('out')\n\n        $timeout(() => {\n          el.removeClass('out')\n\n          // eslint-disable-next-line no-plusplus\n          $scope.currentProductIndex++\n          $scope.currentProduct = $scope.products[$scope.currentProductIndex]\n\n          $scope.updateRemainingMessage()\n        }, 500) // Needs to match the length of the animation\n      }\n\n      // Update the message which tells the user how many items are left to be rated\n\n      $scope.updateRemainingMessage = function () {\n        $scope.remaining = $scope.products.length - $scope.currentProductIndex\n        $scope.message = lang.template(lang.values.ratingsRemaining, {\n          remaining: $scope.remaining,\n          pluralizedItem: $filter('pluralize')(lang.values.item, $scope.remaining),\n        })\n      }\n\n      // Passed as a callback function to the rating directive\n      // Handles updating points awarded message and tracking total points\n\n      $scope.onRate = function (result) {\n        if (result.points && result.points.awarded) {\n          const points = result.points.awarded\n          const total = result.points.balance\n          $scope.totalPointsAwarded += points\n\n          $scope.message = lang.template(lang.values.pointsAdded, {\n            points,\n            pluralizedPoint: $filter('pluralize')(lang.values.point, points),\n            total,\n            pluralizedPointTotal: $filter('pluralize')(lang.values.point, total),\n          })\n        }\n      }\n\n      // Keep track of which mode the view is in: empty, rating, done or loading\n\n      $scope.mode = ''\n\n      $scope.mode = function () {\n        // eslint-disable-next-line eqeqeq\n        if ($scope.products && $scope.products.length == 0) {\n          $scope.mode = 'empty'\n        }\n\n        if (!$scope.products) {\n          $scope.mode = 'loading'\n        }\n\n        if (\n          $scope.products &&\n          $scope.products.length > 0 &&\n          $scope.currentProductIndex < $scope.products.length\n        ) {\n          $scope.mode = 'rating'\n        }\n\n        if (\n          $scope.products &&\n          $scope.products.length > 0 &&\n          // eslint-disable-next-line eqeqeq\n          $scope.currentProductIndex == $scope.products.length\n        ) {\n          $scope.mode = 'done'\n        }\n      }\n\n      $scope.$watch($scope.mode) // Update mode flag every digest\n\n      // Generate the message showing total points awarded when users finish rating products\n\n      $scope.totalPointsMessage = function () {\n        return lang.template(lang.values.totalPointsAwarded, {\n          total: $scope.totalPointsAwarded,\n          pluralizedPoint: $filter('pluralize')(lang.values.point, $scope.totalPointsAwarded),\n          loyaltyCard: lang.values.loyaltyCard,\n        })\n      }\n    }\n  )\n"],"sourceRoot":""}