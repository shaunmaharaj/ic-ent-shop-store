{"version":3,"sources":["webpack://UnataWidgets/./packages/enterprise-order-tracking/common/types.ts","webpack://UnataWidgets/./packages/enterprise-order-tracking/common/constants.ts","webpack://UnataWidgets/./packages/enterprise-order-tracking/components/OrderProgress.tsx","webpack://UnataWidgets/./packages/enterprise-order-tracking/components/OrderStatus.tsx","webpack://UnataWidgets/./packages/enterprise-order-tracking/containers/App.tsx","webpack://UnataWidgets/./packages/enterprise-order-tracking/index.ts"],"names":["Stage","AlertType","ButtonSize","ORDERED_STAGES","ORDER_PLACED","IN_PROGRESS","ORDER_COMPLETE","ORDER_STATUS_MAP","authapproved","autherror","authrequest","cancelled","CANCELLED_STAGE","done","inprogress","loaded","new","shipped","unassigned","POLLED_STAGES","useStyles","createStyles","tokens","MEDIA_QUERY_LARGE_SCREEN","utils","mediaQuery","minWidth","breakpoint","small","ON_COLOR","color","brand","primary","regular","OFF_COLOR","neutral","grey3","TEXT_COLOR","grey4","container","display","width","height","padding","flexDirection","alignItems","justifyContent","item","base","flex","fontSize","size","font","body","active","current","dot","background","position","zIndex","borderRadius","border","radius","circle","float","marginTop","marginLeft","transition","toMs","animation","speed","slow","line","backgroundSize","backgroundPosition","prior","text","spacing","transform","textAlign","OrderProgress","props","stage","currentStage","styles","lang","configService","selectors","getConfig","orderTracker","orderProgress","currentStageIdx","indexOf","data-test","css","map","stageIdx","aria-current","component","label","memo","grey1","xSmall","large","title","fontWeight","weight","bold","marginBottom","xxSmall","description","poweredByInstacart","left","layout","bottom","right","medium","textTransform","image","img","top","buttonRow","minHeight","xxxSmall","buttonContainer","marginRight","button","buttonContainerCancel","OrderStatus","resources","buttonSize","REGULAR","enableOrderDetailButton","enablePickupDetailButton","enableModifyButton","enableCancelButton","enableTipsRatingButton","showOrderDetailButton","showPickupDetailButton","showModifyButton","showCancelButton","showTipsRatingButton","onOrderDetail","onPickupDetail","onModify","onCancel","onTipRating","notice","orderStatus","fulfillmentTypeLang","providedBy","src","alt","providedByInstacartLogoAria","aria-hidden","disabled","onClick","modifyButtonLang","modifyButton","viewOrderProgressButton","variant","pickupDetailsButton","cancelButton","tipsRatingButton","orderStatusFn","xLarge","fadeInAfterDelay","orderStatusCancelledFn","Object","assign","stageBox","alertBox","maxHeight","orderStatuses","values","reduce","out","keyframes","opacity","content","App","initialOrderStatus","pollingFrequencyMs","orderId","config","app","initialStage","timeout","ms","Number","isInteger","state","setState","useState","error","includes","undefined","Error","useEffect","timeoutId","setTimeout","async","getOrder","data","status","getOrderApiStage","orderService","api","orders","get","err","console","warn","clearTimeout","success","ERROR","SUCCESS","isValidStage","isShowableStage","isFulfillableStage","data-stage","updatingError","updatingSuccess","orderHistoryView","includeOrderTrackerProgressLine","orderPlacedModifyNotice"],"mappings":"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","file":"91.js","sourcesContent":["export enum Stage {\n  ORDER_PLACED = 'orderPlaced',\n  IN_PROGRESS = 'inProgress',\n  ORDER_COMPLETE = 'orderComplete',\n  CANCELLED_STAGE = 'orderCancelled',\n}\n\nexport interface StatusLangProps {\n  [Stage.ORDER_PLACED]: string\n  [Stage.IN_PROGRESS]: string\n  [Stage.ORDER_COMPLETE]: string\n  [Stage.CANCELLED_STAGE]: string\n}\n\nexport interface OrderStatusMap {\n  [key: string]: Stage\n}\n\nexport enum AlertType {\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\nexport enum ButtonSize {\n  SMALL = 'small',\n  REGULAR = 'regular',\n  LARGE = 'large',\n}\n\nexport type GetOrderFunction = (orderId: number) => Promise<{ status?: string }>\n\nexport type OrderStatusAnimation = {\n  [key in Stage]?: {\n    container: {\n      animation: string\n    }\n  }\n}\n","import { Stage, OrderStatusMap } from './types'\n\n/** Ordered stages */\nexport const ORDERED_STAGES: Stage[] = [Stage.ORDER_PLACED, Stage.IN_PROGRESS, Stage.ORDER_COMPLETE]\n\n/** Misc constants */\nexport const ARIA_CURRENT_ACTIVE = 'step'\nexport const DEFAULT_POLLING_FREQUENCY_MS = 60000\n\n/** Size constants */\nexport const DOT_SIZE = 8 // The size of the dot on the progress line\nexport const LINE_SIZE = 2 // The height of the progress line\nexport const VERTICAL_LINE_LENGTH = 50 // For vertical line length when not current\n\n/** Maps the API returned statuses to one of the stages */\nexport const ORDER_STATUS_MAP: OrderStatusMap = {\n  authapproved: Stage.IN_PROGRESS,\n  autherror: Stage.IN_PROGRESS,\n  authrequest: Stage.IN_PROGRESS,\n  cancelled: Stage.CANCELLED_STAGE,\n  done: Stage.ORDER_COMPLETE,\n  inprogress: Stage.IN_PROGRESS,\n  loaded: Stage.IN_PROGRESS,\n  new: Stage.ORDER_PLACED,\n  shipped: Stage.ORDER_COMPLETE,\n  unassigned: Stage.IN_PROGRESS,\n}\n\n/**\n * TODO No backend developers have time to implement Websockets at the moment.\n * Future: Remove this polling methodology and implement a proper interface for using Web sockets\n */\nexport const POLLED_STAGES = [Stage.ORDER_PLACED, Stage.IN_PROGRESS]\n","import React, { memo } from 'react'\nimport { config as configService } from '@instacart/enterprise-services'\nimport { createStyles, Text, utils } from '@instacart/cocktail'\nimport { Stage, StatusLangProps } from '../common/types'\nimport { ARIA_CURRENT_ACTIVE, DOT_SIZE, LINE_SIZE, ORDERED_STAGES } from '../common/constants'\n\nexport interface Lang {\n  label: StatusLangProps\n}\n\nexport interface OrderProgressProps {\n  /** The current stage of the order */\n  stage: Stage\n  /** Optional styles object */\n  styles?: object\n}\n\nconst useStyles = createStyles(tokens => {\n  const MEDIA_QUERY_LARGE_SCREEN = utils.mediaQuery.minWidth(tokens.breakpoint.small)\n  const ON_COLOR = tokens.color.brand.primary.regular\n  const OFF_COLOR = tokens.color.neutral.grey3\n  const TEXT_COLOR = tokens.color.neutral.grey4\n\n  return {\n    container: {\n      display: 'flex',\n      width: '100%',\n      height: '100%',\n      padding: '0 2.5%',\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n      justifyContent: 'flex-start',\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        padding: '0 15%',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n    },\n\n    item: {\n      base: {\n        flex: '1 0 auto',\n        display: 'block',\n        fontSize: tokens.size.font.body,\n        color: TEXT_COLOR,\n\n        ':last-child': {\n          flex: '0 1 auto',\n        },\n      },\n      // Overrides on item.base:\n      active: {\n        color: ON_COLOR,\n      },\n      current: {\n        color: ON_COLOR,\n      },\n    },\n\n    dot: {\n      base: {\n        background: OFF_COLOR,\n        position: 'absolute',\n        zIndex: 1,\n        width: DOT_SIZE,\n        height: DOT_SIZE,\n        borderRadius: tokens.border.radius.circle,\n        display: 'inline-block',\n        float: 'left',\n        marginTop: -DOT_SIZE / 2 + 1,\n        marginLeft: -DOT_SIZE / 2 + 1,\n\n        [MEDIA_QUERY_LARGE_SCREEN]: {\n          marginLeft: 0,\n        },\n      },\n      // Overrides on dot.base:\n      active: {\n        background: ON_COLOR,\n      },\n      current: {\n        transition: utils.toMs`all 0ms ease-out ${tokens.animation.speed.slow - 50}`,\n        background: ON_COLOR,\n      },\n    },\n\n    line: {\n      base: {\n        display: 'block',\n        width: LINE_SIZE,\n        height: '100%',\n        background: `linear-gradient(to bottom, ${ON_COLOR} 50%, ${OFF_COLOR} 50%)`,\n        backgroundSize: '100% 200%',\n        backgroundPosition: 'right bottom',\n\n        [MEDIA_QUERY_LARGE_SCREEN]: {\n          width: '100%',\n          height: LINE_SIZE,\n          background: `linear-gradient(to right, ${ON_COLOR} 50%, ${OFF_COLOR} 50%)`,\n          backgroundSize: '200% 100%',\n          backgroundPosition: 'right top',\n        },\n      },\n      // Overrides on line.base:\n      active: {\n        backgroundPosition: 'left top',\n\n        [MEDIA_QUERY_LARGE_SCREEN]: {\n          backgroundPosition: 'left bottom',\n        },\n      },\n      prior: {\n        transition: utils.toMs`all ${tokens.animation.speed.slow} ease-out`,\n      },\n      current: {},\n    },\n\n    text: {\n      position: 'absolute',\n      marginLeft: tokens.size.spacing.small,\n      transform: 'translate(0, -50%)',\n      marginTop: 0,\n      textAlign: 'left',\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        marginLeft: 0,\n        transform: 'translate(-50%, 0)',\n        marginTop: tokens.size.spacing.small,\n        textAlign: 'center',\n      },\n    },\n  }\n})\n\n/**\n * COMPONENT\n */\nconst OrderProgress: React.FC<OrderProgressProps> = (props: OrderProgressProps) => {\n  const { stage: currentStage } = props\n  const styles = useStyles(props)\n  const config = configService.selectors.getConfig()\n  const lang: Lang = config.lang.orderTracker.orderProgress\n  const currentStageIdx = ORDERED_STAGES.indexOf(currentStage)\n\n  return (\n    <div data-test=\"orderProgress\" css={styles.container}>\n      {ORDERED_STAGES.map((stage: Stage, stageIdx: number) => {\n        return (\n          <span\n            key={stage}\n            data-test={`stageLabel-${stage}`}\n            aria-current={stageIdx === currentStageIdx && ARIA_CURRENT_ACTIVE}\n            css={[\n              styles.item.base,\n              stageIdx < currentStageIdx && styles.item.active,\n              stageIdx === currentStageIdx && styles.item.current,\n            ]}\n          >\n            <span\n              css={[\n                styles.dot.base,\n                stageIdx < currentStageIdx && styles.dot.active,\n                stageIdx === currentStageIdx && styles.dot.current,\n              ]}\n            />\n            <Text css={styles.text} component=\"span\">\n              {lang.label[stage]}\n            </Text>\n            <span\n              css={[\n                styles.line.base,\n                stageIdx < currentStageIdx && styles.line.active,\n                stageIdx === currentStageIdx - 1 && styles.line.prior,\n                stageIdx === currentStageIdx && styles.line.current,\n              ]}\n            />\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default memo(OrderProgress)\n","import React, { memo } from 'react'\nimport { config as configService } from '@instacart/enterprise-services'\nimport { Button, createStyles, Image, Text, utils } from '@instacart/cocktail'\nimport { ButtonSize, Stage, StatusLangProps } from '../common/types'\n\nexport interface Lang {\n  cancelButton: string\n  deliveredBy: string\n  description: StatusLangProps\n  modifyButton: string\n  pickupDetailsButton: string\n  providedBy: string\n  providedByInstacartLogoAria: string\n  tipsRatingButton: string\n  title: StatusLangProps\n  viewOrderProgressButton: string\n}\n\nexport interface ExternalProps {\n  /** Order Status resources */\n  resources: {\n    fulfillmentTypeLang: string\n    modifyButtonLang?: string\n    poweredByInstacart: string\n  }\n  /** Size of buttons */\n  buttonSize?: ButtonSize\n  /** Whether to show the order detail button */\n  enableOrderDetailButton?: boolean\n  /** Whether to show the pickup detail button */\n  enablePickupDetailButton?: boolean\n  /** Whether to show the modify button */\n  enableModifyButton?: boolean\n  /** Whether to show the cancel button */\n  enableCancelButton?: boolean\n  /** Whether to show the tips & rating button */\n  enableTipsRatingButton?: boolean\n  /** Function to trigger when the order detail button is clicked */\n  onOrderDetail?: (event: React.MouseEvent) => void\n  /** Function to trigger when the pickup detail button is clicked */\n  onPickupDetail?: (event: React.MouseEvent) => void\n  /** Function to trigger when the modify button is clicked */\n  onModify?: (event: React.MouseEvent) => void\n  /** Function to trigger when the cancel button is clicked */\n  onCancel?: (event: React.MouseEvent) => void\n  /** Function to trigger when the tips & rating button is clicked */\n  onTipRating?: (event: React.MouseEvent) => void\n  /** Whether to show the order detail button */\n  showOrderDetailButton?: boolean\n  /** Whether to show the pickup detail button */\n  showPickupDetailButton?: boolean\n  /** Whether to show the modify button */\n  showModifyButton?: boolean\n  /** Whether to show the cancel button */\n  showCancelButton?: boolean\n  /** Whether to show the tips & rating button */\n  showTipsRatingButton?: boolean\n}\n\nexport interface OrderStatusProps extends ExternalProps {\n  /** An additional piece of text to show under the description */\n  notice?: string\n  /** The current stage of the order */\n  stage: Stage\n  /** Optional styles object */\n  styles?: object\n}\n\nconst useStyles = createStyles(tokens => {\n  const MEDIA_QUERY_LARGE_SCREEN = utils.mediaQuery.minWidth(tokens.breakpoint.small)\n\n  return {\n    container: {\n      position: 'relative',\n      background: tokens.color.neutral.grey1,\n      padding: tokens.size.spacing.xSmall,\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        padding: tokens.size.spacing.large,\n      },\n    },\n    title: {\n      fontWeight: tokens.font.weight.bold,\n      fontSize: tokens.size.font.large,\n      marginBottom: tokens.size.spacing.xxSmall,\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        fontSize: tokens.size.font.large,\n      },\n    },\n    description: {\n      fontSize: tokens.size.font.body,\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        fontSize: tokens.size.font.body,\n      },\n    },\n    poweredByInstacart: {\n      container: {\n        position: 'absolute',\n        left: tokens.size.layout.xxSmall,\n        bottom: tokens.size.layout.xSmall,\n\n        [MEDIA_QUERY_LARGE_SCREEN]: {\n          left: 'auto',\n          right: tokens.size.layout.medium,\n        },\n      },\n      text: {\n        display: 'inline-block',\n        color: tokens.color.neutral.grey4,\n        fontSize: tokens.size.font.body,\n        fontWeight: 600,\n        textTransform: 'capitalize',\n      },\n      image: {\n        marginLeft: tokens.size.spacing.xxSmall,\n        img: {\n          position: 'relative',\n          top: 2,\n          height: tokens.size.spacing.medium,\n        },\n      },\n    },\n    buttonRow: {\n      minHeight: tokens.size.layout.large,\n      marginBottom: tokens.size.layout.large,\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        marginBottom: tokens.size.spacing.xxxSmall,\n      },\n    },\n    buttonContainer: {\n      display: 'inline-block',\n      marginTop: tokens.size.spacing.xSmall,\n      marginRight: tokens.size.spacing.xxSmall,\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        marginTop: tokens.size.spacing.medium,\n      },\n\n      button: {\n        textTransform: 'capitalize',\n      },\n    },\n    buttonContainerCancel: {\n      button: {\n        padding: tokens.size.spacing.xxxSmall,\n      },\n    },\n  }\n})\n\nconst OrderStatus: React.FC<OrderStatusProps> = (props: OrderStatusProps) => {\n  const {\n    stage: currentStage,\n    resources,\n    buttonSize = ButtonSize.REGULAR,\n    enableOrderDetailButton = true,\n    enablePickupDetailButton = true,\n    enableModifyButton = true,\n    enableCancelButton = true,\n    enableTipsRatingButton = true,\n    showOrderDetailButton = false,\n    showPickupDetailButton = false,\n    showModifyButton = false,\n    showCancelButton = false,\n    showTipsRatingButton = false,\n    onOrderDetail,\n    onPickupDetail,\n    onModify,\n    onCancel,\n    onTipRating,\n    notice,\n  } = props\n\n  const styles = useStyles(props)\n  const config = configService.selectors.getConfig()\n  const lang = config.lang.orderTracker.orderStatus\n\n  return (\n    <div data-test=\"orderStatus\" css={styles.container}>\n      <Text data-test=\"orderStatusTitle\" css={styles.title}>\n        {lang.title[currentStage]}\n      </Text>\n      <Text data-test=\"orderStatusDesc\" css={styles.description}>\n        {lang.description[currentStage]}\n      </Text>\n      {notice ? (\n        <Text data-test=\"orderStatusNotice\" css={styles.description}>\n          {notice}\n        </Text>\n      ) : null}\n      <div data-test=\"orderStatusProvidedByInstacart\" css={styles.poweredByInstacart.container}>\n        <Text css={styles.poweredByInstacart.text}>\n          {resources.fulfillmentTypeLang} {lang.providedBy}\n        </Text>\n        <Image\n          src={resources.poweredByInstacart}\n          alt={lang.providedByInstacartLogoAria}\n          aria-hidden=\"true\"\n          css={styles.poweredByInstacart.image}\n        />\n      </div>\n      <div css={styles.buttonRow} data-test={`button-row-${buttonSize}`}>\n        {showModifyButton && (\n          <span css={styles.buttonContainer}>\n            <Button\n              data-test=\"orderModify\"\n              disabled={!enableModifyButton}\n              size={buttonSize}\n              onClick={onModify}\n            >\n              {resources.modifyButtonLang || lang.modifyButton}\n            </Button>\n          </span>\n        )}\n        {showOrderDetailButton && (\n          <span css={styles.buttonContainer}>\n            <Button\n              data-test=\"orderDetail\"\n              disabled={!enableOrderDetailButton}\n              size={buttonSize}\n              onClick={onOrderDetail}\n            >\n              {lang.viewOrderProgressButton}\n            </Button>\n          </span>\n        )}\n        {showPickupDetailButton && (\n          <span css={styles.buttonContainer}>\n            <Button\n              data-test=\"pickupDetail\"\n              disabled={!enablePickupDetailButton}\n              size={buttonSize}\n              variant=\"outline\"\n              onClick={onPickupDetail}\n            >\n              {lang.pickupDetailsButton}\n            </Button>\n          </span>\n        )}\n        {showCancelButton && (\n          <span css={[styles.buttonContainer, styles.buttonContainerCancel]}>\n            <Button\n              data-test=\"orderCancel\"\n              disabled={!enableCancelButton}\n              size={buttonSize}\n              variant=\"link\"\n              color=\"highlight\"\n              onClick={onCancel}\n            >\n              {lang.cancelButton}\n            </Button>\n          </span>\n        )}\n        {showTipsRatingButton && (\n          <span css={styles.buttonContainer}>\n            <Button\n              data-test=\"orderTipRating\"\n              disabled={!enableTipsRatingButton}\n              size={buttonSize}\n              color=\"secondary\"\n              onClick={onTipRating}\n            >\n              {lang.tipsRatingButton}\n            </Button>\n          </span>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default memo(OrderStatus)\n","import React, { useEffect, useState } from 'react'\nimport { config as configService, order as orderService } from '@instacart/enterprise-services'\nimport { keyframes } from '@emotion/core'\nimport { Alert, createStyles, utils } from '@instacart/cocktail'\nimport { AlertType, GetOrderFunction, OrderStatusAnimation, Stage } from '../common/types'\nimport {\n  DEFAULT_POLLING_FREQUENCY_MS,\n  ORDER_STATUS_MAP,\n  ORDERED_STAGES,\n  POLLED_STAGES,\n  VERTICAL_LINE_LENGTH,\n} from '../common/constants'\nimport OrderProgress, { Lang as OrderProgressLang } from '../components/OrderProgress'\nimport OrderStatus, { ExternalProps, Lang as OrderStatusLang } from '../components/OrderStatus'\n\nexport interface Lang {\n  app: {\n    orderPlacedModifyNotice: string\n    updatingError: string\n    updatingSuccess: string\n  }\n  orderProgress: OrderProgressLang\n  orderStatus: OrderStatusLang\n}\n\nexport interface Props extends ExternalProps {\n  /** The initial server status of the order */\n  initialOrderStatus: string\n  /** The order Id (for polling purposes) */\n  orderId: number\n  /** The polling frequency in MS, or 0 to disable polling */\n  pollingFrequencyMs?: number\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst useStyles = createStyles(tokens => {\n  const MEDIA_QUERY_LARGE_SCREEN = utils.mediaQuery.minWidth(tokens.breakpoint.small)\n\n  const orderStatusFn = (stage: Stage) => ({\n    container: {\n      width: `calc(100% - ${tokens.size.spacing.medium}px)`,\n      left: tokens.size.spacing.medium,\n      top: tokens.size.layout.xLarge,\n      animation: utils.toMs`\n        ${fadeInAfterDelay(stage)} ${tokens.animation.speed.slow * 1.25} ease-in\n      `,\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        width: '100%',\n        left: 0,\n        top: 0,\n        animation: 'none',\n      },\n    },\n    buttonRow: {\n      ':empty': stage === Stage.ORDER_COMPLETE ? { minHeight: 0 } : {},\n    },\n  })\n\n  const orderStatusCancelledFn = () => {\n    const base = orderStatusFn(Stage.CANCELLED_STAGE)\n    Object.assign(base.container, {\n      animation: 'none',\n      left: 0,\n      width: `calc(100% - ${tokens.size.spacing.xxSmall}px)`,\n    })\n    base.buttonRow[':empty'] = { minHeight: 0 }\n    return base\n  }\n\n  return {\n    /**\n     * STYLES (Using \"css=\")\n     */\n    container: {\n      position: 'relative',\n    },\n    stageBox: {\n      display: 'block',\n      minHeight: VERTICAL_LINE_LENGTH,\n\n      [MEDIA_QUERY_LARGE_SCREEN]: {\n        display: 'inline',\n        minHeight: 'none',\n      },\n    },\n    alertBox: {\n      marginBottom: tokens.size.spacing.medium,\n    },\n\n    /**\n     * OVERRIDES (Using \"styles=\")\n     */\n    orderProgress: {\n      container: {\n        position: 'absolute',\n        marginTop: tokens.size.layout.medium,\n        marginBottom: tokens.size.layout.xLarge,\n\n        [MEDIA_QUERY_LARGE_SCREEN]: {\n          position: 'static',\n        },\n      },\n      item: {\n        base: {\n          maxHeight: VERTICAL_LINE_LENGTH,\n\n          [MEDIA_QUERY_LARGE_SCREEN]: {\n            maxHeight: 'none',\n          },\n        },\n        current: {\n          maxHeight: 'none',\n        },\n      },\n    },\n\n    orderStatuses: Object.values(Stage).reduce<OrderStatusAnimation>((out, stage) => {\n      return {\n        ...out,\n        [stage]: stage === Stage.CANCELLED_STAGE ? orderStatusCancelledFn() : orderStatusFn(stage),\n      }\n    }, {}),\n  }\n})\n\n/**\n * Creates a fade in animation that starts after 50% of the time has elapsed\n * This is used to fade in the status box when in mobile view\n * Emotion caches animations, but each animation needs to be unique so it is applied for each stage\n */\nfunction fadeInAfterDelay(stage: Stage) {\n  return keyframes({\n    '0%': { opacity: 0, content: `'${stage}'` },\n    '50%': { opacity: 0 },\n    '100%': { opacity: 1 },\n  })\n}\n\n/**\n * Gets the updated stage from the api for a given order Id\n * @param {GetOrderFunction} getOrder     - Fetches an order, returning a promise of data\n * @param {number} orderId        - The order Id to fetch\n * @returns {Promise<String>}     - The current status of the order\n * @throws Error                  - Error if not valid status was returned by the server\n */\nasync function getOrderApiStage(getOrder: GetOrderFunction, orderId: number) {\n  const data = await getOrder(orderId)\n  const stage = data?.status && ORDER_STATUS_MAP[data.status]\n\n  if (!stage) {\n    throw new Error(`Invalid stage returned by the server: \"${data.status}\"`)\n  }\n  return stage\n}\n\nfunction isValidMs(ms?: number): ms is number {\n  return typeof ms === 'number' && Number.isInteger(ms) && ms >= 0\n}\n\nconst App: React.FC<Props> = (props: Props) => {\n  const {\n    resources,\n    buttonSize,\n    enableOrderDetailButton = true,\n    enablePickupDetailButton = true,\n    enableModifyButton = true,\n    enableCancelButton = true,\n    enableTipsRatingButton = true,\n    initialOrderStatus,\n    pollingFrequencyMs,\n    onOrderDetail,\n    onPickupDetail,\n    onModify,\n    onCancel,\n    onTipRating,\n    orderId,\n    showOrderDetailButton = true,\n    showPickupDetailButton = true,\n    showModifyButton = true,\n    showCancelButton = true,\n    showTipsRatingButton = true,\n  } = props\n\n  const styles = useStyles(props)\n  const config = configService.selectors.getConfig()\n  const i18n = config.lang.orderTracker\n  const lang = i18n.app\n  const initialStage = ORDER_STATUS_MAP[initialOrderStatus]\n  const timeout = isValidMs(pollingFrequencyMs) ? pollingFrequencyMs : DEFAULT_POLLING_FREQUENCY_MS\n\n  const [state, setState] = useState<{ stage: Stage; error?: Error; timeout: number }>({\n    stage: initialStage,\n    timeout,\n    error: !Object.values(Stage).includes(initialStage)\n      ? new Error(`Invalid initial: \"${initialStage}\"`)\n      : undefined,\n  })\n\n  /**\n   * This effect looks after updating the stage from the api\n   * It works like this:\n   * 1. If the current status is not pollable, stop\n   * 2. Set a timeout to pollingFrequencyMs\n   * 3. Fetch current stage from API\n   * 4. Update `status` via setStatus with the current stage\n   * 5. useEffect is triggered to set a new timeout because `status` got updated, back to #1\n   *    #5 is why we're using an object \"state\", because we want to force a re-render on each poll\n   * -- IF there is an error, the next timeout is doubled to reduce spamming the server\n   *\n   */\n  useEffect(() => {\n    if (!state.timeout) return // If polling is disabled\n    if (!POLLED_STAGES.includes(state.stage)) return // Nothing to do if it's not a polled stage\n\n    const timeoutId = setTimeout(async () => {\n      try {\n        const stage = await getOrderApiStage(\n          orderService.api.orders.get as GetOrderFunction,\n          orderId\n        )\n        setState({ stage, timeout })\n      } catch (err) {\n        console.warn(err, `${state.timeout} ms`) // eslint-disable-line no-console\n        setState({ stage: state.stage, timeout: state.timeout * 2, error: err })\n      }\n    }, state.timeout)\n\n    return () => clearTimeout(timeoutId)\n  }, [orderId, state, timeout])\n\n  const { error, stage } = state\n  const success = stage !== initialStage && stage !== Stage.CANCELLED_STAGE\n  const variant = error ? AlertType.ERROR : AlertType.SUCCESS\n\n  const isValidStage = Object.values(Stage).includes(stage)\n  const isShowableStage = ORDERED_STAGES.includes(stage)\n  const isFulfillableStage = stage === Stage.IN_PROGRESS || stage === Stage.ORDER_COMPLETE\n\n  return (\n    <div data-test=\"orderApp\" data-stage={stage}>\n      {error || success ? (\n        <Alert data-test={`alert-${variant}`} variant={variant} css={styles.alertBox}>\n          {(error && lang.updatingError) || (success && lang.updatingSuccess)}\n        </Alert>\n      ) : (\n        ''\n      )}\n      {isValidStage && (\n        <div data-test=\"orderContainer\" css={styles.container}>\n          {isShowableStage && config.orderHistoryView?.includeOrderTrackerProgressLine && (\n            <OrderProgress stage={stage} styles={styles.orderProgress} data-test=\"orderProgress\" />\n          )}\n\n          {isShowableStage ? (\n            ORDERED_STAGES.map(currentStage => (\n              /**\n               * See README.md for a detailed overview of how the styling works here and why we use\n               * a loop for OrderStatus. TL;DR: It's for mobile sizing.\n               */\n              <span key={currentStage} css={styles.stageBox}>\n                {currentStage === stage && (\n                  <OrderStatus\n                    stage={stage}\n                    resources={resources}\n                    buttonSize={buttonSize}\n                    enableOrderDetailButton={enableOrderDetailButton}\n                    enablePickupDetailButton={enablePickupDetailButton}\n                    enableTipsRatingButton={enableTipsRatingButton}\n                    enableCancelButton={enableCancelButton}\n                    enableModifyButton={enableModifyButton}\n                    onOrderDetail={onOrderDetail}\n                    onPickupDetail={onPickupDetail}\n                    onModify={onModify}\n                    onCancel={onCancel}\n                    onTipRating={onTipRating}\n                    notice={\n                      stage === Stage.ORDER_PLACED && enableModifyButton && showModifyButton\n                        ? lang.orderPlacedModifyNotice\n                        : ''\n                    }\n                    styles={styles.orderStatuses[stage]}\n                    showOrderDetailButton={showOrderDetailButton && isFulfillableStage}\n                    showPickupDetailButton={showPickupDetailButton && isFulfillableStage}\n                    showModifyButton={showModifyButton && stage === Stage.ORDER_PLACED}\n                    showCancelButton={showCancelButton && stage === Stage.ORDER_PLACED}\n                    showTipsRatingButton={showTipsRatingButton && stage === Stage.ORDER_COMPLETE}\n                    data-test=\"orderStatus\"\n                  />\n                )}\n              </span>\n            ))\n          ) : (\n            <span css={styles.stageBox}>\n              <OrderStatus\n                stage={stage}\n                resources={resources}\n                styles={styles.orderStatuses[Stage.CANCELLED_STAGE]}\n                data-test=\"orderStatus\"\n              />\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import App from './containers/App'\n\nexport default App\n"],"sourceRoot":""}