{"version":3,"sources":["webpack://UnataWidgets/./app/react/components/quickLinks/selectors.ts","webpack://UnataWidgets/./app/react/components/quickLinks/styles.ts","webpack://UnataWidgets/./app/react/components/quickLinks/QuickLinkItem.tsx","webpack://UnataWidgets/./app/react/components/quickLinks/QuickLinks.tsx"],"names":["quickLinksConfig","createSelector","configSelector","config","hasLoyaltyPoints","quickLinks","sortedQuickLinks","authService","selectors","getPrimaryLoyaltyCard","primaryLoyaltyCard","sortBy","Object","keys","map","key","ql","id","iconText","points_balance","filteredQuickLinks","getUserIntent","intent","filter","o","context","list","cart","styleVariables","createStyleVariables","containerBackgroundColor","containerColor","labelBackgroundColor","labelColor","useStyles","createStyles","theme","variables","content","display","height","verticalAlign","width","alignItems","backgroundColor","colors","borderRadius","radius","r8","color","fontSize","spacing","s48","overflow","padding","s4","contentTitle","marginLeft","whiteSpace","wordBreak","icon","lineHeight","left","position","top","quickLink","border","QuickLinkItem","name","styles","handleClick","useCallback","eventEmitter","emit","EVENT_TYPES","QUICK_LINK_CLICK","css","onClick","data-test","className","classNames","aria-hidden","quickLinkItem","margin","quickLinkList","marginTop","s12","textAlign","QuickLinks","lang","useLang","disableQuickLinkCards","useConfig","useSelector","length","aria-label"],"mappings":"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","file":"84.js","sourcesContent":["import { createSelector } from 'reselect'\nimport { configSelector } from '@app/services/config/selectors'\nimport { auth as authService } from '@instacart/enterprise-services'\nimport sortBy from 'lodash/sortBy'\n\nexport const quickLinksConfig = createSelector(configSelector, config => ({\n  hasLoyaltyPoints: config.hasLoyaltyPoints,\n  quickLinks: config.quickLinks,\n}))\n\n/**\n * Construct quick links from config\n */\nexport const sortedQuickLinks = createSelector(\n  quickLinksConfig,\n  authService.selectors.getPrimaryLoyaltyCard,\n  ({ quickLinks, hasLoyaltyPoints }, primaryLoyaltyCard) =>\n    sortBy(\n      Object.keys(quickLinks || {}).map(key => {\n        const ql = { ...quickLinks[key], id: key }\n\n        if (key === 'loyalty' && hasLoyaltyPoints) {\n          if (primaryLoyaltyCard) {\n            ql.iconText = `${primaryLoyaltyCard.points_balance || 0} Points`\n          }\n        }\n\n        return ql\n      }),\n      'order'\n    )\n)\n\n/**\n * Filter quick links by intent\n */\nexport const filteredQuickLinks = createSelector(\n  sortedQuickLinks,\n  authService.selectors.getUserIntent,\n  (quickLinks, intent) => {\n    if (intent === 'instore') {\n      return quickLinks.filter(o => o.context.list)\n    }\n    return quickLinks.filter(o => o.context.cart)\n  }\n)\n","// This code is extracted into a separate file to avoid circular dependency issues\n\nimport { createStyleVariables } from '@app/react/common/hooks/createStyles'\nimport { QuickLinkItemStyle } from './types'\n\nexport const styleVariables = createStyleVariables<QuickLinkItemStyle>('quickLinks', {\n  containerBackgroundColor: 'systemGrayscale00',\n  containerColor: 'systemGrayscale70',\n  labelBackgroundColor: 'systemGrayscale70',\n  labelColor: 'systemGrayscale00',\n})\n","import { useCallback } from 'react'\nimport classNames from 'classnames'\nimport { spacing } from '@instacart/ids-core'\nimport { QuickLink } from '@app/types/config'\nimport { eventEmitter, EVENT_TYPES } from '@app/utils/eventEmitter'\nimport { createStyles } from '@app/react/common/hooks/createStyles'\nimport { styleVariables } from '@app/react/components/quickLinks/styles'\n\nexport interface QuickLinkItemProps {\n  quickLink: QuickLink\n}\n\nconst useStyles = createStyles(\n  (theme, variables) => ({\n    content: {\n      '&:before': {\n        content: '\" \"',\n        display: 'inline-block',\n        height: '40px',\n        verticalAlign: 'middle',\n        width: '0',\n      },\n      alignItems: 'center',\n      backgroundColor: theme.colors[variables.labelBackgroundColor],\n      borderRadius: `0 0 ${theme.radius.r8}px ${theme.radius.r8}px`,\n      color: theme.colors[variables.labelColor],\n      display: 'flex',\n      fontSize: '12px',\n      height: spacing.s48,\n      overflow: 'hidden',\n      padding: spacing.s4,\n    },\n    contentTitle: {\n      marginLeft: '-2px',\n      whiteSpace: 'normal',\n      width: '100%',\n      wordBreak: 'break-word',\n    },\n    icon: {\n      display: 'block',\n      fontSize: '45px',\n      height: '100px',\n      lineHeight: '100px',\n    },\n    iconText: {\n      fontSize: '12px',\n      left: 0,\n      lineHeight: '20px',\n      position: 'absolute',\n      top: '65px',\n      width: '100%',\n    },\n    quickLink: {\n      backgroundColor: theme.colors[variables.containerBackgroundColor],\n      border: '1px solid #ccc',\n      borderRadius: `${theme.radius.r8}px`,\n      color: theme.colors[variables.containerColor],\n      position: 'relative',\n      width: '100%',\n    },\n  }),\n  styleVariables\n)\n\nconst QuickLinkItem = ({ quickLink }: QuickLinkItemProps) => {\n  // const { dotComModule } = useConfig()\n  // const history = useHistory()\n  const { iconText, id, name, icon } = quickLink\n  const styles = useStyles()\n\n  const handleClick = useCallback(() => {\n    eventEmitter.emit(EVENT_TYPES.QUICK_LINK_CLICK, quickLink)\n  }, [quickLink])\n\n  return (\n    <button css={styles.quickLink} onClick={handleClick} data-test={`quicklink-${id}`}>\n      <span\n        css={styles.icon}\n        className={classNames('quicklink-icon', { [`icon-${icon}`]: icon })}\n        aria-hidden=\"true\"\n      />\n\n      {iconText && <span css={styles.iconText}>{iconText}</span>}\n\n      <span css={styles.content} data-test={`quicklink-${id}-title`}>\n        <span css={styles.contentTitle}>{name}</span>\n      </span>\n    </button>\n  )\n}\n\nexport default QuickLinkItem\n","import { useSelector } from 'react-redux'\nimport { spacing } from '@instacart/ids-core'\nimport { useConfig, useLang } from '@app/services/config/hooks'\nimport { createStyles } from '@app/react/common/hooks/createStyles'\nimport { filteredQuickLinks } from './selectors'\nimport QuickLinkItem from './QuickLinkItem'\n\nconst useStyles = createStyles(\n  () =>\n    ({\n      quickLinkItem: {\n        display: 'inline-block',\n        height: '150px',\n        margin: '0 1%',\n        verticalAlign: 'middle',\n        width: '30%',\n      },\n      quickLinkList: {\n        marginTop: spacing.s12,\n        overflow: 'auto',\n        padding: `0 ${spacing.s12}px`,\n        textAlign: 'center',\n        whiteSpace: 'nowrap',\n        width: '100%',\n      },\n    } as const)\n)\n\nconst QuickLinks = () => {\n  const lang = useLang()\n  const styles = useStyles()\n  const { disableQuickLinkCards } = useConfig()\n\n  // filter out quick links base on intent\n  const quickLinks = useSelector(filteredQuickLinks)\n\n  // loyalty is enabled with data\n  if (disableQuickLinkCards || !quickLinks.length) return null\n\n  // Note: Classname can be removed once retailer customization of icon are migrated to new system\n  // currently needed: .quick-links.quicklink-icon\n  return (\n    <div data-test=\"quick-links\" className=\"quick-links\">\n      <h2 className=\"screen-reader-text\">{lang.quickLinks}</h2>\n      <ul css={styles.quickLinkList} data-test=\"quicklinks-mobile\">\n        {quickLinks.map(quickLink => (\n          <li\n            key={`quick-link-key-${quickLink.id}`}\n            css={styles.quickLinkItem}\n            aria-label={`Quick Link - ${quickLink.name}`}\n          >\n            <QuickLinkItem quickLink={quickLink} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default QuickLinks\n"],"sourceRoot":""}