{"version":3,"sources":["webpack://UnataWidgets/./app/react/components/icExpress/ExpressGiftCardRedeemModal/views/ExpressGiftCardRedeemSuccess.tsx","webpack://UnataWidgets/./app/react/components/icExpress/ExpressGiftCardRedeemModal/views/ExpressGiftCardRedeemFormView.tsx","webpack://UnataWidgets/./app/react/components/icExpress/ExpressGiftCardRedeemModal/ExpressGiftCardRedeemModal.tsx"],"names":["useStyles","createStyles","tokens","badgeContainer","alignItems","display","justifyContent","button","margin","size","spacing","large","none","ExpressGiftCardRedeemSuccessView","onContinue","planEndDate","styles","lang","useLang","config","useConfig","component","variant","bold","align","icExpress","redeemGiftCard","giftCardRedeemedSuccessfully","css","src","expressBadgeWithStars","alt","interpolate","welcomeToIcExpressText","programName","name","data-test","dangerouslySetInnerHTML","__html","yourPlanEnds","endDate","onClick","fullWidth","startShoppingCTA","heading","fontWeight","font","weight","termsLink","color","brand","primary","regular","ExpressGiftCardRedeemFormView","onSuccess","tokenValue","setTokenValue","useState","loading","setLoading","hasError","setHasError","handleInputChange","useCallback","e","target","value","handleRedeem","async","subscriptionUser","redeemGiftCardRequest","gift_card_token","title","id","error","placeholder","enterGiftCardPlaceHolder","onChange","redeemFailedMessage","disabled","redeemButtonCTA","href","promotionTermsUrl","termsAndConditions","label","mobileHeader","paddingBottom","xxLarge","paddingTop","mobileRoot","height","modalContent","padding","xLarge","VIEW","ExpressGiftCardRedeemModal","onCancel","isMobile","useIsMobile","currentView","setCurrentView","FORM","dispatch","useDispatch","currentSubscription","useCurrentSubscription","handleRedeemSuccess","actions","setSubscription","SUCCESS","renderFormView","renderSuccessView","formattedEndDate","dayjs","subscription","end_date","format","ExpressGiftCardRedeemSuccess","content","useMemo","roundedCorners","position","layout"],"mappings":"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","file":"73.js","sourcesContent":["import React from 'react'\nimport { Button, createStyles, Text } from '@instacart/cocktail'\nimport expressBadgeWithStars from 'static/images/ic-express/express-badge-with-stars.svg'\nimport { useConfig, useLang } from '@app/services/config/hooks'\nimport interpolate from '@instacart/enterprise-services/lang/interpolate'\n\ninterface ExpressGiftCardRedeemSuccessViewProps {\n  onContinue: () => void\n  planEndDate?: string\n}\n\nconst useStyles = createStyles(tokens => ({\n  badgeContainer: {\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  button: {\n    margin: `${tokens.size.spacing.large}px ${tokens.size.spacing.none}px`,\n  },\n}))\n\nconst ExpressGiftCardRedeemSuccessView = ({\n  onContinue,\n  planEndDate,\n}: ExpressGiftCardRedeemSuccessViewProps) => {\n  const styles = useStyles()\n  const lang = useLang()\n  const config = useConfig()\n  return (\n    <>\n      <Text component=\"h2\" variant=\"banner\" bold align=\"center\">\n        {lang.icExpress.redeemGiftCard.giftCardRedeemedSuccessfully}\n      </Text>\n      <div css={styles.badgeContainer}>\n        <img src={expressBadgeWithStars} alt=\"success-stars-badge\" />\n      </div>\n      <Text component=\"h3\" variant=\"h3\" align=\"center\">\n        {interpolate(lang.icExpress.welcomeToIcExpressText, {\n          programName: config.icExpress.name,\n        })}\n      </Text>\n      {planEndDate && (\n        <Text component=\"p\" variant=\"body\" align=\"center\">\n          {/* eslint-disable-next-line react/no-danger */}\n          <span\n            data-test=\"plan-ends-text\"\n            dangerouslySetInnerHTML={{\n              __html: interpolate(lang.icExpress.redeemGiftCard.yourPlanEnds, {\n                endDate: planEndDate,\n              }),\n            }}\n          />\n        </Text>\n      )}\n      <Button css={styles.button} onClick={onContinue} fullWidth>\n        {lang.icExpress.startShoppingCTA}\n      </Button>\n    </>\n  )\n}\n\nexport default ExpressGiftCardRedeemSuccessView\n","import React, { useState, useCallback } from 'react'\nimport { Button, Input, createStyles, Text, FormHelpText } from '@instacart/cocktail'\nimport { redeemGiftCardRequest } from '@app/services/express/api'\nimport { ExpressSubscriptionUser } from '@app/services/express/types'\nimport { useConfig, useLang } from '@app/services/config/hooks'\n\ninterface ExpressGiftCardRedeemFormViewProps {\n  onSuccess: (subscriptionUser: ExpressSubscriptionUser) => void\n}\n\nconst useStyles = createStyles(tokens => ({\n  button: {\n    margin: `${tokens.size.spacing.large}px ${tokens.size.spacing.none}px`,\n  },\n  heading: {\n    fontWeight: tokens.font.weight.bold,\n  },\n  termsLink: {\n    color: tokens.color.brand.primary.regular,\n  },\n}))\n\nconst ExpressGiftCardRedeemFormView = ({ onSuccess }: ExpressGiftCardRedeemFormViewProps) => {\n  const [tokenValue, setTokenValue] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [hasError, setHasError] = useState(false)\n  const lang = useLang()\n  const config = useConfig()\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setTokenValue(e.target.value)\n    },\n    [setTokenValue]\n  )\n  const styles = useStyles()\n\n  const handleRedeem = useCallback(async () => {\n    setLoading(true)\n    setHasError(false)\n    try {\n      const subscriptionUser = await redeemGiftCardRequest({\n        gift_card_token: tokenValue,\n      })\n      setLoading(false)\n      onSuccess(subscriptionUser)\n    } catch (e) {\n      setLoading(false)\n      setHasError(true)\n    }\n  }, [tokenValue, setLoading, onSuccess, setHasError])\n\n  return (\n    <>\n      <Text css={styles.heading} component=\"h1\" variant=\"banner\" bold align=\"center\">\n        {lang.icExpress.redeemGiftCard.title}\n      </Text>\n      <Input\n        id=\"express-gift-card-redeem\"\n        error={hasError}\n        fullWidth\n        placeholder={lang.icExpress.redeemGiftCard.enterGiftCardPlaceHolder}\n        value={tokenValue}\n        onChange={handleInputChange}\n      />\n      {hasError && (\n        <FormHelpText error={hasError}>\n          {lang.icExpress.redeemGiftCard.redeemFailedMessage}\n        </FormHelpText>\n      )}\n      <Button\n        css={styles.button}\n        fullWidth\n        disabled={loading || !tokenValue}\n        onClick={handleRedeem}\n        loading={loading}\n        color={loading ? 'secondary' : 'primary'}\n      >\n        {lang.icExpress.redeemGiftCard.redeemButtonCTA}\n      </Button>\n      <Text align=\"center\" bold color=\"brandPrimary\">\n        <a href={config.icExpress.promotionTermsUrl} css={styles.termsLink}>\n          {config.icExpress.termsAndConditions.label}\n        </a>\n      </Text>\n    </>\n  )\n}\n\nexport default ExpressGiftCardRedeemFormView\n","import React, { useState, useMemo, useCallback } from 'react'\nimport {\n  createStyles,\n  ModalContainer,\n  ModalContainerAdornment,\n  ModalHeaderAdornment,\n  ModalContent,\n  ModalXButton,\n  ModalHeader,\n} from '@instacart/cocktail'\nimport { useIsMobile } from '@app/react/common/hooks/useIsMobile'\nimport { ExpressSubscriptionUser } from '@app/services/express/types'\nimport { useDispatch } from 'react-redux'\nimport { actions } from '@app/services/express/slice'\nimport { useCurrentSubscription } from '@app/services/express/hooks'\nimport dayjs from 'dayjs'\nimport ExpressGiftCardRedeemSuccess from './views/ExpressGiftCardRedeemSuccess'\nimport ExpressGiftCardRedeemFormView from './views/ExpressGiftCardRedeemFormView'\n\ninterface ExpressGiftCardRedeemModalProps {\n  onCancel: () => void\n  onSuccess: () => void\n}\n\nconst useStyles = createStyles(tokens => ({\n  button: {\n    margin: `${tokens.size.spacing.large}px ${tokens.size.spacing.none}px`,\n  },\n  heading: {\n    fontWeight: tokens.font.weight.bold,\n  },\n  mobileHeader: {\n    paddingBottom: `${tokens.size.spacing.xxLarge}px`,\n    paddingTop: `${tokens.size.spacing.xxLarge}px`,\n  },\n  mobileRoot: {\n    height: '100%',\n  },\n  modalContent: {\n    padding: `${tokens.size.spacing.large}px ${tokens.size.spacing.xLarge}px`,\n  },\n}))\n\nenum VIEW {\n  FORM,\n  SUCCESS,\n}\n\nconst ExpressGiftCardRedeemModal = ({ onCancel, onSuccess }: ExpressGiftCardRedeemModalProps) => {\n  const isMobile = useIsMobile()\n  const styles = useStyles()\n  const [currentView, setCurrentView] = useState(VIEW.FORM)\n  const dispatch = useDispatch()\n  const currentSubscription = useCurrentSubscription()\n\n  const handleRedeemSuccess = useCallback(\n    (subscriptionUser: ExpressSubscriptionUser) => {\n      dispatch(actions.setSubscription(subscriptionUser))\n      setCurrentView(VIEW.SUCCESS)\n    },\n    [setCurrentView, dispatch]\n  )\n\n  const renderFormView = useCallback(() => {\n    return <ExpressGiftCardRedeemFormView onSuccess={handleRedeemSuccess} />\n  }, [handleRedeemSuccess])\n\n  const renderSuccessView = useCallback(() => {\n    const formattedEndDate = dayjs(currentSubscription?.subscription?.end_date).format(\n      'MMMM D, YYYY'\n    )\n    return <ExpressGiftCardRedeemSuccess onContinue={onSuccess} planEndDate={formattedEndDate} />\n  }, [onSuccess, currentSubscription])\n\n  const content = useMemo(() => {\n    const viewRenderMap = {\n      [VIEW.FORM]: renderFormView,\n      [VIEW.SUCCESS]: renderSuccessView,\n    }\n    return viewRenderMap[currentView]()\n  }, [currentView, renderFormView, renderSuccessView])\n\n  return (\n    <ModalContainer roundedCorners={!isMobile} css={isMobile && styles.mobileRoot}>\n      {!isMobile && (\n        <ModalContainerAdornment>\n          <ModalXButton onClick={onCancel} />\n        </ModalContainerAdornment>\n      )}\n      {isMobile && (\n        <ModalHeader css={styles.mobileHeader}>\n          <ModalHeaderAdornment position=\"left\">\n            <ModalXButton onClick={onCancel} />\n          </ModalHeaderAdornment>\n        </ModalHeader>\n      )}\n      <ModalContent layout=\"medium\" css={styles.modalContent}>\n        {content}\n      </ModalContent>\n    </ModalContainer>\n  )\n}\n\nexport default ExpressGiftCardRedeemModal\n"],"sourceRoot":""}