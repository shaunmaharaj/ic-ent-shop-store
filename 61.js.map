{"version":3,"sources":["webpack://UnataWidgets/./app/react/components/icExpress/ExpressPlanModal.tsx","webpack://UnataWidgets/./app/react/components/icExpress/utils.ts","webpack://UnataWidgets/./app/react/components/icExpress/ExpressPlans.tsx"],"names":["ExpressPlanModal","props","lang","useLang","desktop","useMediaQuery","tokens","utils","mediaQuery","minWidth","breakpoint","small","styles","createStyles","button","margin","size","spacing","xxxSmall","none","width","buttonGroup","marginTop","medium","heading","fontWeight","font","weight","bold","modalContent","li","listStyleType","padding","large","useStyles","config","useConfig","plans","currentSubscription","onPlanChange","onCancel","selectedPlanId","setSelectedPlanId","useState","roundedCorners","onClick","data-test","css","layout","component","variant","align","icExpress","changePlan","dangerouslySetInnerHTML","__html","interpolate","yourPlanEnds","endDate","dayjs","end_date","Date","format","planName","getExpressPlanConfigForApiPlan","subscription_plan","toLowerCase","changePlanDisclaimer","onPlanSelect","disabled","next_subscription_plan","id","saveChanges","cancel","plan","term_length","ExpressSubscriptionPlanTerms","YEARLY","valueOf","yearly","MONTHLY","monthly","trial","getIsTrialPlan","ExpressPlans","expressPlan","border","regular","color","neutral","white","borderRadius","radius","boxShadow","colors","shadow","cursor","xxSmall","textAlign","expressPlanContainer","alignItems","display","justifyContent","expressPlanSelected","background","light","extraDark","planBadge","fontSize","badge","minHeight","planBadgeSelected","dark","planBadgeUnselected","grey2","planBilling","planFullPrice","body","textDecoration","planPrice","marginBottom","planRecurrance","planSavings","defaultSelectedPlanId","useEffect","renderExpressPlanBadge","badgeText","currentPlan","starts","ExpressTermLengths","YEAR","ad","bestValue","yearlyPricePerMonth","parseFloat","price","toFixed","badgeStyles","length","formatPriceDisplay","replace","planIds","map","includes","planStyles","name","currencySymbol","promo","full_price","recurrence","billing","savings","renderExpressPlan"],"mappings":"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","file":"61.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  createStyles,\n  ModalContainer,\n  ModalContainerAdornment,\n  ModalContent,\n  ModalXButton,\n  Text,\n  useMediaQuery,\n  utils,\n} from '@instacart/cocktail'\nimport { useConfig, useLang } from '@app/services/config/hooks'\nimport { ExpressPlan, ExpressSubscription } from '@app/services/express/types'\nimport interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport dayjs from 'dayjs'\nimport ExpressPlans from './ExpressPlans'\nimport { getExpressPlanConfigForApiPlan } from './utils'\n\ninterface ExpressPlanModalProps {\n  plans: ExpressPlan[]\n  currentSubscription: ExpressSubscription\n  onPlanChange: (planId: number) => void\n  onCancel: () => void\n}\n\nconst ExpressPlanModal = (props: ExpressPlanModalProps) => {\n  const lang = useLang()\n  const desktop = useMediaQuery(tokens => utils.mediaQuery.minWidth(tokens.breakpoint.small))\n\n  const useStyles = createStyles(tokens => ({\n    button: {\n      margin: `${tokens.size.spacing.xxxSmall}px ${tokens.size.spacing.none}px`,\n      width: '100%',\n    },\n    buttonGroup: {\n      marginTop: `${tokens.size.spacing.medium}px`,\n    },\n    heading: {\n      fontWeight: tokens.font.weight.bold,\n    },\n    modalContent: {\n      li: {\n        listStyleType: 'inherit',\n        margin: '0px 20px 0px 20px',\n      },\n      padding: `${tokens.size.spacing.large}px`,\n    },\n  }))\n  const styles = useStyles(props)\n  const config = useConfig()\n  const { plans, currentSubscription, onPlanChange, onCancel } = props\n  const [selectedPlanId, setSelectedPlanId] = useState(0)\n\n  return (\n    <ModalContainer roundedCorners={desktop}>\n      {desktop && (\n        <ModalContainerAdornment>\n          <ModalXButton onClick={() => onCancel()} data-test=\"desktop-modal-close\" />\n        </ModalContainerAdornment>\n      )}\n      <ModalContent css={styles.modalContent} layout=\"dialog\">\n        <Text css={styles.heading} component=\"h1\" variant=\"banner\" bold align=\"center\">\n          {lang.icExpress.changePlan}\n        </Text>\n        <Text>\n          <ul>\n            <li>\n              <div\n                // eslint-disable-next-line react/no-danger\n                dangerouslySetInnerHTML={{\n                  __html: interpolate(lang.icExpress.yourPlanEnds, {\n                    endDate: dayjs(currentSubscription.end_date || new Date()).format(\n                      'MMMM D, YYYY'\n                    ),\n                    planName: getExpressPlanConfigForApiPlan(\n                      config,\n                      currentSubscription.subscription_plan\n                    ).planName.toLowerCase(),\n                  }),\n                }}\n              />\n            </li>\n            <li>{lang.icExpress.changePlanDisclaimer}</li>\n          </ul>\n        </Text>\n\n        <ExpressPlans\n          plans={plans}\n          currentSubscription={currentSubscription}\n          onPlanSelect={setSelectedPlanId}\n        />\n\n        <div css={styles.buttonGroup}>\n          <Button\n            data-test=\"plan-modal-save\"\n            css={styles.button}\n            disabled={\n              selectedPlanId === 0 ||\n              selectedPlanId === currentSubscription.next_subscription_plan.id\n            }\n            onClick={() => onPlanChange(selectedPlanId)}\n          >\n            {lang.saveChanges}\n          </Button>\n          <Button\n            data-test=\"plan-modal-cancel\"\n            css={styles.button}\n            variant=\"link\"\n            onClick={() => onCancel()}\n          >\n            {lang.cancel}\n          </Button>\n        </div>\n      </ModalContent>\n    </ModalContainer>\n  )\n}\n\nexport default ExpressPlanModal\n","import { ExpressPlan, ExpressSubscriptionPlanTerms } from '@app/services/express/types'\nimport { ClientConfig, IcExpressPlan } from '@app/types/config'\n\nexport const getExpressPlanConfigForApiPlan = (\n  config: ClientConfig,\n  plan: ExpressPlan\n): IcExpressPlan => {\n  if (plan.term_length === ExpressSubscriptionPlanTerms.YEARLY.valueOf())\n    return config.icExpress.plans.yearly\n  if (plan.term_length === ExpressSubscriptionPlanTerms.MONTHLY.valueOf())\n    return config.icExpress.plans.monthly\n  return config.icExpress.plans.trial\n}\n\nexport const getIsTrialPlan = (plan: ExpressPlan): boolean => {\n  if (plan.term_length === ExpressSubscriptionPlanTerms.YEARLY.valueOf()) return false\n  if (plan.term_length === ExpressSubscriptionPlanTerms.MONTHLY.valueOf()) return false\n  return true\n}\n","import React, { useEffect, useState } from 'react'\nimport { createStyles, Text } from '@instacart/cocktail'\nimport { useConfig, useLang } from '@app/services/config/hooks'\nimport dayjs from 'dayjs'\nimport { ExpressPlan, ExpressSubscription, ExpressTermLengths } from '@app/services/express/types'\nimport interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport { getExpressPlanConfigForApiPlan } from './utils'\n\ninterface ExpressPlanProps {\n  plans: ExpressPlan[]\n  currentSubscription?: ExpressSubscription\n  defaultSelectedPlanId?: number\n  onPlanSelect: (planId: number) => void\n}\n\nconst ExpressPlans = (props: ExpressPlanProps) => {\n  const lang = useLang()\n  const config = useConfig()\n\n  const useStyles = createStyles(tokens => ({\n    expressPlan: {\n      '@media(max-width: 449px)': {\n        width: '150px',\n      },\n      '@media(min-width: 450px)': {\n        width: '200px',\n      },\n      border: `${tokens.border.width.regular}px solid ${tokens.color.neutral.white}`,\n      borderRadius: `${tokens.border.radius.regular}px`,\n      boxShadow: `0px 2px 8px 0px ${config.icExpress.colors.shadow}`,\n      cursor: 'pointer',\n      margin: `${tokens.size.spacing.medium}px ${tokens.size.spacing.xxSmall}px`,\n      padding: `${tokens.size.spacing.medium}px ${tokens.size.spacing.xxSmall}px`,\n      textAlign: 'center',\n    },\n    expressPlanContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n    },\n    expressPlanSelected: {\n      background: config.icExpress.colors.light,\n      border: `${tokens.border.width.regular}px solid ${config.icExpress.colors.extraDark}`,\n    },\n    planBadge: {\n      borderRadius: `${tokens.border.radius.large}px`,\n      fontSize: `${tokens.size.font.badge}px`,\n      fontWeight: 'bold',\n      margin: `${tokens.size.spacing.xxSmall}px ${tokens.size.spacing.none}px`,\n      minHeight: `${tokens.size.spacing.medium}}px`,\n      padding: `${tokens.size.spacing.xxxSmall}px ${tokens.size.spacing.xxSmall}px`,\n    },\n\n    planBadgeSelected: {\n      background: config.icExpress.colors.dark,\n    },\n    planBadgeUnselected: {\n      background: tokens.color.neutral.grey2,\n    },\n    planBilling: {\n      fontSize: `${tokens.size.font.badge}px`,\n    },\n    planFullPrice: {\n      fontSize: `${tokens.size.font.body}px`,\n      fontWeight: 'initial',\n      textDecoration: 'line-through',\n    },\n    planPrice: {\n      marginBottom: '-10px',\n    },\n    planRecurrance: {\n      marginBottom: `${tokens.size.spacing.medium}px`,\n    },\n    planSavings: {\n      fontSize: `${tokens.size.font.badge}px`,\n      minHeight: `${tokens.size.spacing.small}px`,\n    },\n  }))\n  const styles = useStyles(props)\n\n  const { plans, currentSubscription, defaultSelectedPlanId, onPlanSelect } = props\n\n  // State to keep track of the current selected plan\n  const [selectedPlanId, setSelectedPlanId] = useState(0)\n\n  // Hook to trigger the callback whenever a plan id is set.\n  // We can't combine setSelectedPlanId with the callback\n  // because if this is used in a parent component it blows up\n  useEffect(() => {\n    onPlanSelect(selectedPlanId)\n  }, [selectedPlanId, onPlanSelect])\n\n  // Helper Function to render a plan badge\n  const renderExpressPlanBadge = (plan: ExpressPlan) => {\n    let badgeText = ''\n    if (currentSubscription && plan.id === currentSubscription.subscription_plan.id) {\n      badgeText = lang.icExpress.currentPlan\n    } else if (currentSubscription && plan.id === selectedPlanId && currentSubscription.end_date) {\n      badgeText = `${lang.icExpress.starts} ${dayjs(currentSubscription.end_date).format(\n        'MM/DD/YY'\n      )}`\n    } else if (!currentSubscription && plan.term_length === ExpressTermLengths.YEAR) {\n      badgeText = interpolate(config.icExpress.ad.bestValue, {\n        yearlyPricePerMonth: (parseFloat(plan.price) / 12).toFixed(2),\n      })\n    }\n\n    let badgeStyles = {}\n    if (badgeText.length === 0) {\n      badgeStyles = styles.planBadge\n    } else if (plan.id === selectedPlanId) {\n      badgeStyles = { ...styles.planBadge, ...styles.planBadgeSelected }\n    } else {\n      badgeStyles = { ...styles.planBadge, ...styles.planBadgeUnselected }\n    }\n\n    return (\n      <span data-test={`express-plans-plan-id-${plan.id}-badge`} css={badgeStyles}>\n        {badgeText}\n      </span>\n    )\n  }\n\n  const formatPriceDisplay = (price: string) => {\n    return price.replace(/\\.00/g, '')\n  }\n\n  // Helper Function to render each plan box\n  const renderExpressPlan = (plan: ExpressPlan) => {\n    let planStyles = styles.expressPlan\n    if (plan.id === selectedPlanId) {\n      planStyles = { ...styles.expressPlan, ...styles.expressPlanSelected }\n    }\n\n    return (\n      <button\n        key={`express-plans-plan-id-${plan.id}`}\n        data-test={`express-plans-plan-id-${plan.id}`}\n        css={planStyles}\n        onClick={() => {\n          setSelectedPlanId(plan.id)\n        }}\n      >\n        <Text bold variant=\"large\">\n          {getExpressPlanConfigForApiPlan(config, plan).name}\n        </Text>\n        {renderExpressPlanBadge(plan)}\n        <Text css={styles.planPrice} bold variant=\"banner\">\n          {config.currencySymbol}\n          {formatPriceDisplay(plan.price || '')}\n          {plan.promo && (\n            <span css={styles.planFullPrice}>\n              {config.currencySymbol}\n              {formatPriceDisplay(plan.full_price || '')}\n            </span>\n          )}\n        </Text>\n        <Text css={styles.planRecurrance} bold variant=\"body\">\n          {getExpressPlanConfigForApiPlan(config, plan).recurrence}\n        </Text>\n        <Text css={styles.planBilling} bold>\n          {getExpressPlanConfigForApiPlan(config, plan).billing}\n        </Text>\n        <Text css={styles.planSavings}>\n          {!plan.promo && getExpressPlanConfigForApiPlan(config, plan).savings && (\n            // eslint-disable-next-line react/jsx-no-literals\n            <span>({getExpressPlanConfigForApiPlan(config, plan).savings})</span>\n          )}\n        </Text>\n      </button>\n    )\n  }\n\n  // Decide which plan should initially be selected based on the current subscription\n  if (selectedPlanId === 0) {\n    const planIds = plans.map(plan => plan.id)\n    if (defaultSelectedPlanId && planIds.includes(defaultSelectedPlanId)) {\n      setSelectedPlanId(defaultSelectedPlanId)\n    } else if (\n      currentSubscription &&\n      planIds.includes(currentSubscription.next_subscription_plan.id)\n    ) {\n      setSelectedPlanId(currentSubscription.next_subscription_plan.id)\n    } else {\n      setSelectedPlanId(planIds[0])\n    }\n  }\n\n  // render and return the contaner for all of the plans\n  return <div css={styles.expressPlanContainer}>{plans.map(plan => renderExpressPlan(plan))}</div>\n}\n\nexport default ExpressPlans\n"],"sourceRoot":""}