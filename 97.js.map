{"version":3,"sources":["webpack://UnataWidgets/./packages/enterprise-ui-order-totals/OrderTotals.tsx","webpack://UnataWidgets/./packages/enterprise-ui-order-totals/index.ts"],"names":["useStyles","createStyles","tokens","root","display","flexDirection","lineItem","margin","cocktailUtils","toPx","size","spacing","xxSmall","lineRow","justifyContent","itemTitle","alignItems","freeText","textTransform","tooltipIcon","paddingLeft","xxxSmall","color","neutral","grey3","previousValueText","divider","boxSizing","backgroundColor","border","light","width","height","xSmall","description","grey1","text","primary","borderRadius","radius","small","marginTop","padding","fontSize","font","caption","subItem","alignContent","subItemText","secondary","toggleButton","background","cursor","dlMarginOverride","displayName","formatValueAsCurrency","value","formattedValue","formatCurrency","Math","abs","SubItem","props","styles","label","css","bold","OrderTotals","langAria","lang","config","selectors","getConfig","boldLabels","lineItems","toggledLines","setToggledLines","useState","data-test","map","index","lineId","type","hasSubItems","subItems","length","isShownAsFree","showFreeIfZero","isLineToggled","includes","aria-describedby","tooltip","undefined","component","variant","id","autoAdjust","content","icon","onClick","lineNumber","filter","line","aria-label","toggleFeeBreakdown","aria-expanded","previousValue","free","dangerouslySetInnerHTML","__html","memo"],"mappings":"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","file":"97.js","sourcesContent":["/* eslint-disable react/no-multi-comp */\nimport React, { memo, PropsWithChildren, useState } from 'react'\nimport { createStyles, utils as cocktailUtils, Text, Icon, Tooltip } from '@instacart/cocktail'\nimport { config } from '@instacart/enterprise-services'\n\ntype LineItemSubItem = {\n  /** Line item label */\n  label: string\n  /** Value displayed as currency */\n  value: number\n  /** Text to be shown below the line */\n  description?: string\n}\n\ntype LineItemValue = {\n  type: 'value'\n  /** Line item label */\n  label: string\n  /** Value displayed as currency */\n  value: number\n  /** If true, 'FREE' will be shown if the value is 0 */\n  showFreeIfZero?: boolean\n  /** Informational tooltip text to be shown beside the label */\n  tooltip?: string\n  /** Text to be shown in a box below the line */\n  description?: string\n  /** Value before discount, displayed with strikethrough */\n  previousValue?: number\n  /** Sub items to show in a toggle below the line item */\n  subItems?: LineItemSubItem[]\n}\n\ntype LineItemDivider = {\n  type: 'divider'\n}\n\ntype LineItem = LineItemValue | LineItemDivider\n\nexport type OrderTotalsProps = PropsWithChildren<{\n  /** Line items */\n  lineItems: LineItem[]\n  /** Whether labels should be bold */\n  boldLabels?: boolean\n  /** Style overrides */\n  styles?: object\n}>\n\nconst useStyles = createStyles(\n  tokens => ({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    lineItem: {\n      display: 'flex',\n      flexDirection: 'column',\n      margin: cocktailUtils.toPx`${tokens.size.spacing.xxSmall} 0`,\n    },\n    lineRow: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    itemTitle: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    freeText: {\n      textTransform: 'uppercase',\n    },\n    tooltipIcon: {\n      paddingLeft: tokens.size.spacing.xxxSmall,\n      color: tokens.color.neutral.grey3,\n      display: 'flex',\n      alignItems: 'center',\n    },\n    previousValueText: {\n      paddingLeft: tokens.size.spacing.xxxSmall,\n    },\n    divider: {\n      boxSizing: 'border-box',\n      backgroundColor: tokens.color.border.light,\n      width: '100%',\n      height: 1,\n      border: 'none',\n      margin: cocktailUtils.toPx`${tokens.size.spacing.xSmall} 0`,\n    },\n    description: {\n      backgroundColor: tokens.color.neutral.grey1,\n      color: tokens.color.text.primary,\n      borderRadius: tokens.border.radius.small,\n      marginTop: tokens.size.spacing.xSmall,\n      padding: tokens.size.spacing.xxSmall,\n      fontSize: tokens.size.font.caption,\n    },\n    subItem: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n      alignContent: 'flex-start',\n      margin: cocktailUtils.toPx`${tokens.size.spacing.xxSmall} 0`,\n      paddingLeft: tokens.size.spacing.xxSmall,\n    },\n    subItemText: {\n      fontSize: tokens.size.font.caption,\n      color: tokens.color.text.secondary,\n    },\n    toggleButton: {\n      border: 'none',\n      margin: cocktailUtils.toPx`0 0 0 ${tokens.size.spacing.xxSmall}`,\n      padding: '1px 0 0 0',\n      display: 'flex',\n      justifyContent: 'center',\n      background: 'transparent',\n      cursor: 'pointer',\n    },\n    dlMarginOverride: {\n      margin: '0',\n    },\n  }),\n  { displayName: 'OrderTotals' }\n)\n\nconst formatValueAsCurrency = (value: number) => {\n  const formattedValue = cocktailUtils.formatCurrency(Math.abs(value))\n\n  return value < 0 ? `-${formattedValue}` : formattedValue\n}\n\nconst SubItem: React.FC<LineItemSubItem> = props => {\n  const styles = useStyles(props)\n  const { label, value, description } = props\n\n  return (\n    <div css={styles.subItem}>\n      <Text bold css={styles.subItemText}>\n        {label}\n        {\n          // eslint-disable-next-line react/jsx-no-literals\n          ': '\n        }\n        {formatValueAsCurrency(value)}\n      </Text>\n      {description && <Text css={styles.subItemText}>{description}</Text>}\n    </div>\n  )\n}\n\nconst OrderTotals: React.FC<OrderTotalsProps> = props => {\n  const { langAria, lang } = config.selectors.getConfig()\n\n  const styles = useStyles(props)\n  const { boldLabels, lineItems } = props\n\n  const [toggledLines, setToggledLines] = useState<number[]>([])\n\n  const handleToggleLine = (lineNumber: number) => () => {\n    if (toggledLines.includes(lineNumber)) {\n      setToggledLines(toggledLines.filter(line => line !== lineNumber))\n    } else {\n      setToggledLines([...toggledLines, lineNumber])\n    }\n  }\n\n  return (\n    <div css={styles.root}>\n      <ul data-test=\"totals-line-item-container\">\n        {lineItems.map((lineItem, index) => {\n          const lineId = `totals-line-item-${index}`\n\n          if (lineItem.type === 'value') {\n            const hasSubItems = lineItem.subItems && lineItem.subItems.length > 0\n            const isShownAsFree = lineItem.showFreeIfZero && lineItem.value === 0\n            const isLineToggled = toggledLines.includes(index)\n\n            return (\n              <li key={lineId}>\n                <div\n                  css={styles.lineItem}\n                  aria-describedby={lineItem.tooltip ? `${lineId}-tooltip` : undefined}\n                  data-test={lineId}\n                  key={lineId}\n                >\n                  <div css={styles.lineRow}>\n                    <div css={styles.itemTitle}>\n                      <Text\n                        bold={boldLabels}\n                        component=\"span\"\n                        variant=\"body\"\n                        id={`${lineId}-label`}\n                      >\n                        {lineItem.label}\n                      </Text>\n                      {lineItem.tooltip && (\n                        <Tooltip\n                          autoAdjust\n                          content={<span id={`${lineId}-tooltip`}>{lineItem.tooltip}</span>}\n                        >\n                          <span css={styles.tooltipIcon}>\n                            <Icon icon=\"icon-error\" />\n                          </span>\n                        </Tooltip>\n                      )}\n                      {hasSubItems && (\n                        <button\n                          onClick={handleToggleLine(index)}\n                          css={styles.toggleButton}\n                          aria-label={langAria.toggleFeeBreakdown}\n                          aria-expanded={isLineToggled}\n                          data-test={`${lineId}-toggle-button`}\n                        >\n                          <Icon icon={`icon-chevron-${isLineToggled ? 'up' : 'down'}`} />\n                        </button>\n                      )}\n                    </div>\n                    <div>\n                      <Text\n                        component=\"span\"\n                        bold={typeof lineItem.previousValue !== 'undefined' || isShownAsFree}\n                        variant=\"body\"\n                        color={isShownAsFree ? 'success' : undefined}\n                      >\n                        {isShownAsFree ? (\n                          <span css={styles.freeText}>{lang.free}</span>\n                        ) : (\n                          formatValueAsCurrency(lineItem.value)\n                        )}\n                      </Text>\n                      {typeof lineItem.previousValue !== 'undefined' && (\n                        <Text css={styles.previousValueText} component=\"span\" variant=\"body\">\n                          <s>{formatValueAsCurrency(lineItem.previousValue)}</s>\n                        </Text>\n                      )}\n                    </div>\n                  </div>\n                  {lineItem.description && (\n                    <div css={styles.lineRow}>\n                      <div\n                        css={styles.description}\n                        dangerouslySetInnerHTML={{ __html: lineItem.description }}\n                      />\n                    </div>\n                  )}\n                  {isLineToggled &&\n                    lineItem.subItems &&\n                    lineItem.subItems.length > 0 &&\n                    lineItem.subItems.map(subItem => <SubItem key={subItem.label} {...subItem} />)}\n                </div>\n              </li>\n            )\n          }\n\n          if (lineItem.type === 'divider') {\n            return <hr key={lineId} css={styles.divider} />\n          }\n\n          return null\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default memo(OrderTotals)\n","import OrderTotals from './OrderTotals'\n\nexport default OrderTotals\n"],"sourceRoot":""}