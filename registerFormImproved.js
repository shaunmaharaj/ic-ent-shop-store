(window.webpackJsonpUnataWidgets=window.webpackJsonpUnataWidgets||[]).push([[37],{d4c4cc66df7e88747e6d:function(e,r){e.exports='<form name=registerForm ng-submit="register(); analytics.logEvent(\'register\', \'submit\')" invalid-focus focus-first-input novalidate> <div class=form-group ng-if="::(config.collectNameDuringRegistration && !config.collectAddressDuringRegistration)"> <div class=form-row> <label for=registration-first-name-no-address>{{ ::lang.values.firstName }}</label> <div class=input-field> <input type=text class=input name=firstName ng-required=::config.requireNameDuringRegistration ng-model=account.first_name placeholder={{::lang.values.firstName}} id=registration-first-name-no-address aria-label={{::lang.aria.firstName}} aria-describedby=registration-first-name-no-address-error maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern={{::config.namePattern}} /> <span class=validation-icon aria-hidden=true></span> <span id=registration-first-name-no-address-error class=required-field ng-show="config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.required">{{::lang.values.requiredForm.firstName}}</span> <span id=registration-first-name-no-address-error class=required-field ng-show="config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.maxlength">{{::lang.values.requiredForm.firstNameMaxLength}}</span> <span id=registration-first-name-no-address-error class=required-field ng-show="config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.pattern">{{::lang.values.requiredForm.firstNamePattern}}</span> </div> </div> <div class=form-row> <label for=registration-last-name-no-address>{{ ::lang.values.lastName }}</label> <div class=input-field> <input type=text class=input name=lastName ng-required=::config.requireNameDuringRegistration ng-model=account.last_name placeholder={{::lang.values.lastName}} id=registration-last-name-no-address aria-label={{::lang.aria.lastName}} aria-describedby=registration-last-name-no-address-error maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern={{::config.namePattern}} /> <span class=validation-icon aria-hidden=true></span> <span id=registration-last-name-no-address-error class=required-field ng-if="config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.required">{{::lang.values.requiredForm.lastName}}</span> <span id=registration-last-name-no-address-error class=required-field ng-if="config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.maxlength">{{::lang.values.requiredForm.lastNameMaxLength}}</span> <span id=registration-last-name-no-address-error class=required-field ng-if="config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.pattern">{{::lang.values.requiredForm.lastNamePattern}}</span> </div> </div> </div> <div class=form-group> <div class=form-row> <label for=registration-email>{{::lang.values.email}}</label> <div class="input-field icon-left"> <span class="icon-left icon-email" aria-hidden=true></span> <input type=email class=input name=username required ng-model=account.email placeholder={{::lang.values.email}} id=registration-email aria-label={{::lang.aria.email}} aria-describedby=registration-email-error maxlength={{::config.maxEmailLength}} ng-maxlength={{::config.maxEmailLength}} /> <span class=validation-icon aria-hidden=true></span> <span id=registration-email-error class=required-field ng-show="(registerForm.username.$touched || registerForm.$submitted) && registerForm.username.$error.required">{{::lang.values.requiredForm.email}}</span> <span id=registration-email-error class=required-field ng-show="(registerForm.username.$touched || registerForm.$submitted) && registerForm.username.$error.email">{{::lang.values.requiredForm.email}}</span> <span id=registration-email-error class=required-field ng-show="(registerForm.username.$touched || registerForm.$submitted) && registerForm.username.$error.maxlength">{{::lang.values.requiredForm.emailMaxLength}}</span> </div> </div> <div class=form-row> <label for=registration-password>{{::lang.values.password}}</label> <div class="input-field icon-left"> <span class="icon-left icon-key-alt" aria-hidden=true></span> <input ng-model=account.password name=password type="{{ showPassword ? \'text\' : \'password\' }}" required ng-pattern=passwordRegex ng-minlength={{::config.passwordMinLength}} ng-maxlength={{::config.passwordMaxLength}} placeholder={{::lang.values.password}} id=registration-password class="input form-password" aria-label={{::lang.aria.password}} aria-describedby=registration-password-error ng-model-options="{ updateOn: \'default blur\', debounce: { default: 500, blur: 0 } }"/> <button type=button ng-class="showPassword ? \'icon-mask\' : \'icon-unmask\'" ng-click=toggleShowPassword() aria-label="{{::lang.values.view + \' \' + lang.values.password}}"></button> <p class=input-help>{{::lang.values.passwordInputHelpText}}</p> <span id=registration-password-error class=required-field ng-if="(registerForm.password.$touched || registerForm.$submitted) && registerForm.password.$error.required">{{::lang.values.requiredForm.password}} </span> <span id=registration-password-error class=required-field ng-if="(registerForm.password.$touched || registerForm.$submitted) && registerForm.password.$error.minlength">{{::lang.values.passwordInvalidMinLength}} </span> <span id=registration-password-error class=required-field ng-if="(registerForm.password.$touched || registerForm.$submitted) && registerForm.password.$error.maxlength">{{::lang.values.passwordInvalidMaxLength}} </span> <span id=registration-password-error class=required-field ng-if="(registerForm.password.$touched || registerForm.$submitted) &&\n            !registerForm.password.$error.minlength &&\n            !registerForm.password.$error.maxlength &&\n            registerForm.password.$error.pattern">{{::lang.values.passwordInvalid}} </span> </div> </div> </div> <div class=form-group> <div ng-if=":: (shouldDisplayLoyalty && shouldDisplayLoyaltyToggleLink)" class=show-hide-loyalty-box> <span role=button class=show-loyalty-id ng-click=toggleLoyalty() aria-controls="{{ showLoyaltyIdField ? \'register-loyalty-id-field\' :  \'\' }}" aria-expanded="{{ shouldDisplayLoyalty && (formContext === \'loyaltyRegister\') && showLoyaltyIdField }}">{{showLoyaltyIdField ? lang.values.dontHaveALoyaltyCard : lang.values.alreadyHaveALoyaltyCard}}</span> </div> <div ng-if="shouldDisplayLoyalty && (formContext === \'loyaltyRegister\') && showLoyaltyIdField" class=form-row id=register-loyalty-id-field> <label for=registration-loyalty>{{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}}</label> <div class="input-field icon-left"> <span class="icon-left icon-heart" aria-hidden=true></span> <input type=text class=input ng-model=account.loyalty_cards[0].card_number placeholder="{{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}}" ng-pattern={{::config.loyaltyCardPattern}} maxlength={{::config.loyaltyCardMaxLength}} ng-maxlength={{::config.loyaltyCardMaxLength}} id=registration-loyalty /> <span class=validation-icon aria-hidden=true></span> <div class=input-help ng-if=lang.values.loyaltyInputHelpText> <span id=loyalty-input-help ng-bind-html=::lang.values.loyaltyInputHelpText></span> <button ng-if=::config.showRegistrationCardHelp type=button uib-popover-html=helpSrcContent popover-trigger="focus mouseenter" description-id=loyalty-input-help-tooltip register-help aria-label="{{::lang.aria.imageOf}} {{::lang.values.loyaltyCardNumberLocation}}" ng-click=toggleTooltip() aria-expanded="{{ tooltipExpanded }}" aria-controls=loyalty-input-help></button> </div> </div> </div> <div ng-if="shouldDisplayLoyalty && (formContext === \'mainRegister\')" class=form-row> <label for=registration-loyalty> {{::lang.values.loyaltyCardPlaceholder || lang.values.loyaltyCard}} </label> <div class="input-field icon-left"> <span class="icon-left icon-heart" aria-hidden=true></span> <input type=text class=input ng-model=account.loyalty_cards[0].card_number placeholder={{::lang.values.loyaltyCard}} id=registration-loyalty ng-pattern={{::config.loyaltyCardPattern}} maxlength={{::config.loyaltyCardMaxLength}} ng-maxlength={{::config.loyaltyCardMaxLength}} aria-label={{::lang.aria.loyaltyCard}} /> <span class=validation-icon aria-hidden=true></span> <div class=input-help ng-if=lang.values.loyaltyInputHelpText> <span id=loyalty-input-help ng-bind-html=::lang.values.loyaltyInputHelpText></span> <button ng-if=::config.showRegistrationCardHelp type=button uib-popover-html=helpSrcContent popover-trigger="focus mouseenter" description-id=loyalty-input-help-tooltip register-help aria-label="{{::lang.aria.imageOf}} {{::lang.values.loyaltyCardNumberLocation}}" ng-click=toggleTooltip() aria-expanded="{{ tooltipExpanded }}" aria-controls=loyalty-input-help></button> </div> </div> </div> </div> <div class=form-group ng-if=::config.collectPhoneNumbersDuringRegistration> <div class=form-row> <input ng-if=":: field.hideInRegistrationFormDuplicateValueKey" ng-model=account[phoneNumberField.key] ng-value="account[phoneNumberField.key] = account[phoneNumberField.hideInRegistrationFormDuplicateValueKey]" type=hidden /> <label for=registration-telephone-{{phoneNumberField.key}} class=ng-required>{{::phoneNumberField.label}}</label> <div class=input-field> <phone-input label={{phoneNumberField.label}} component-id=registration-telephone-{{phoneNumberField.key}} error-id=registration-telephone-{{phoneNumberField.key}}-error model=account[phoneNumberField.key]></phone-input> <div class=input-help ng-if=::phoneNumberField.helpText> {{::phoneNumberField.helpText}} </div> <span id=registration-telephone-{{phoneNumberField.key}}-error class=required-field ng-if="(registerForm.phoneNumber.$touched || registerForm.$submitted) && registerForm.phoneNumber.$invalid"> {{::lang.values.requiredForm.phone}} </span> </div> </div> </div> <div class=form-group ng-if=::config.collectAddressDuringRegistration> <div class=form-row> <label for=registration-first-name>{{ ::lang.values.firstName }}</label> <div class=input-field> <input type=text class=input name=firstName ng-required=config.requireNameDuringRegistration ng-model=account.delivery_address.first_name placeholder={{::lang.values.firstName}} id=registration-first-name aria-label={{::lang.aria.firstName}} maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern=nameRegex aria-describedby=registration-first-name-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-first-name-error class=required-field ng-show="config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.required">{{::lang.values.requiredForm.firstName}}</span> <span id=registration-first-name-error class=required-field ng-show="config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.maxlength">{{::lang.values.requiredForm.firstNameMaxLength}}</span> <span id=registration-first-name-error class=required-field ng-show="config.requireNameDuringRegistration && (registerForm.firstName.$touched || registerForm.$submitted)  && registerForm.firstName.$error.pattern">{{::lang.values.requiredForm.firstNamePattern}}</span> </div> </div> <div class=form-row> <label for=registration-last-name>{{ ::lang.values.lastName }}</label> <div class=input-field> <input type=text class=input name=lastName ng-required=config.requireNameDuringRegistration ng-model=account.delivery_address.last_name placeholder={{::lang.values.lastName}} id=registration-last-name aria-label={{::lang.aria.lastName}} maxlength={{::config.maxNameLength}} ng-maxlength={{::config.maxNameLength}} ng-pattern=nameRegex aria-describedby=registration-last-name-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-last-name-error class=required-field ng-if="config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.required"> {{::lang.values.requiredForm.lastName}} </span> <span id=registration-last-name-error class=required-field ng-if="config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.maxlength"> {{::lang.values.requiredForm.lastNameMaxLength}} </span> <span id=registration-last-name-error class=required-field ng-if="config.requireNameDuringRegistration && (registerForm.lastName.$touched || registerForm.$submitted) && registerForm.lastName.$error.pattern"> {{::lang.values.requiredForm.lastNamePattern}} </span> </div> </div> </div> <div class=form-group ng-if=::config.enableInstacartAddressAutocomplete> <div class=form-row> <label for=address-autocomplete ng-class="{ \'ng-required\': config.requireAddressDuringRegistration }">{{ ::lang.values.address }}</label> <div class=input-field> <react-address-autocomplete select-id=::addressField.id aria-label=::lang.values.address on-address-selected=addressChosenCallback require-full-address=::config.shoppingContextProcess.delivery.requireFullAddress initial-option=initialAddress error="((addressField.blurred || registerForm.$submitted) && addressField.error ? addressField.error : null)" valid="((addressField.blurred || registerForm.$submitted) && addressField.valid)" placeholder=::lang.values.address select-all-on-focus=true on-blur=addressFieldBlur></react-address-autocomplete> <span ng-class="{ \'error\': (addressField.blurred || registerForm.$submitted) && addressField.error, \'valid\': (addressField.blurred || registerForm.$submitted) && addressField.valid }" class=validation-icon-address aria-hidden=true></span> <p class=input-help> <span ng-if="config.enableDefaultStoreFromAddress && lang.values.defaultStoreFromAddress"> {{::lang.values.defaultStoreFromAddress}} </span> </p> </div> </div> </div> <div class=form-group ng-if="::!config.enableInstacartAddressAutocomplete && !requireFullAddress"> <div class=form-row> <label for=registration-address ng-class="{ \'ng-required\': config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration }">{{ ::addressLabel }}</label> <div class=input-field> <input ng-model=account.delivery_address.postal_code ng-change=updateCityStateFromZipCode(account.delivery_address.postal_code) ng-required=::config.requireAddressDuringRegistration type=text class=input name=address placeholder={{::lang.values.postalCode}} aria-label={{::lang.aria.postalCode}} id=registration-address ng-pattern={{::config.postalCodePattern}} aria-describedby=registration-address-error autocomplete=new-user-address /> <span class=validation-icon aria-hidden=true></span> <p class=input-help> <span ng-if=cityState>{{ ::cityState }}</span><span ng-if="config.enableDefaultStoreFromAddress && lang.values.defaultStoreFromAddress"> {{::lang.values.defaultStoreFromAddress}} </span> </p> <span id=registration-address-error class=required-field ng-if="(registerForm.address.$touched || registerForm.$submitted) && registerForm.address.$invalid">{{::lang.values.requiredForm.postalCode}}</span> </div> </div> </div> <div class=form-group ng-if="::!config.enableInstacartAddressAutocomplete && requireFullAddress"> <div class=form-row> <label for=registration-address ng-class="{ \'ng-required\': config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration }">{{ ::addressLabel }}</label> <div class=input-field> <address-autocomplete-input input-id=registration-address input-class="input address-input-field" input-name=address input-placeholder=::lang.values.address address-chosen-callback=addressChosenCallback initial-address=account.delivery_address.address1 input-required=::config.requireAddressDuringRegistration show-street-address=true></address-autocomplete-input> <span id=registration-address-error class=required-field ng-if="(registerForm.address.$touched || registerForm.$submitted) && registerForm.address.$invalid">{{::lang.values.requiredForm.address}}</span> </div> </div> <div class=form-row> <label for=registration-address2>{{lang.values.addressLine2}}</label> <div class=input-field> <input id=registration-address2 type=text class=input name=address2 ng-model=account.delivery_address.address2 placeholder={{lang.values.addressLine2Placeholder}} aria-label={{::lang.aria.addressLine2}} maxlength={{::config.deliveryAddressFieldsMaxLength}} /> <span class=validation-icon aria-hidden=true></span> </div> </div> <div class=form-row> <label for=registration-city>{{::lang.values.city}}</label> <div class=input-field> <input id=registration-city type=text class="input address-input-field" name=city ng-model=account.delivery_address.city ng-required=::config.requireAddressDuringRegistration placeholder={{lang.values.city}} aria-label={{::lang.aria.city}} maxlength={{::config.formFieldMaxLengths.city}} aria-describedby=registration-city-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-city-error class=required-field ng-if="config.requireAddressDuringRegistration && (registerForm.city.$touched || registerForm.$submitted) && registerForm.city.$error.required"> {{::lang.values.requiredForm.city}} </span> </div> </div> <div class=form-row> <label for=registration-state ng-class="{ \'ng-required\': config.requireAddressDuringRegistration || config.requireStateDuringRegistration }">{{::lang.values.province}}</label> <div class=input-field> <div province-is-required="::config.requireAddressDuringRegistration || config.requireStateDuringRegistration" province-select province=account.delivery_address.province input-id-attr=registration-state></div> <span id=registration-state-error class=required-field ng-if="config.requireAddressDuringRegistration && registerForm.province.$touched && registerForm.province.$invalid">{{::lang.values.requiredForm.province}}</span> </div> </div> <div class=form-row> <label for=registration-postal-code>{{::lang.values.postalCode}}</label> <div class=input-field> <input id=registration-postal-code type=text class="input address-input-field" name=postalCode ng-model=account.delivery_address.postal_code ng-required="::config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration" placeholder={{lang.values.postalCode}} aria-label={{::lang.aria.postalCode}} pattern={{::config.postalCodePattern}} aria-describedby=registration-postal-code-error /> <span class=validation-icon aria-hidden=true></span> <span id=registration-postal-code-error class=required-field ng-if="(config.requireAddressDuringRegistration || config.requirePostalCodeDuringRegistration) && (registerForm.postalCode.$touched || registerForm.$submitted) && registerForm.postalCode.$invalid"> {{::lang.values.requiredForm.postalCode}} </span> <p class=input-help> <span ng-if="config.enableDefaultStoreFromAddress && lang.values.defaultStoreFromAddress"> {{::lang.values.defaultStoreFromAddress}} </span> </p> </div> </div> </div> <div class=form-group include-if-exists="\'smsOptInContent.html\'" ng-model=account></div> <div class=form-group notification-settings-table show-group-titles=false at-registration=true on-save=saveNotifications></div> <div class=form-group> <div ng-repeat="field in ::config.customProfileFields" ng-if=::field.showAtRegistration class=form-row> <label for=registration-custom-profile-{{::field.key}} ng-class="{ \'ng-required\': field.required}">{{::field.label}}</label> <div class=input-field ng-switch on=::field.type ng-class="[(field.icon || \'\'), {\'icon-left\': field.icon}]"> <input ng-switch-when=password type=password class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern="{{::field.pattern || \'.*\'}}" maxlength="{{::field.maxLength || null}}"/> <input ng-switch-when=text type=text class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern="{{::field.pattern || \'.*\'}}" maxlength="{{::field.maxLength || null}}"/> <input ng-switch-default type=text class=input id=registration-custom-profile-{{::field.key}} ng-model=account.ext_data[field.key] ng-required=::field.required placeholder={{::field.label}} pattern="{{::field.pattern || \'.*\'}}" maxlength="{{::field.maxLength || null}}"/> <span class=validation-icon aria-hidden=true></span> <div class=input-help ng-if=::field.helpText>{{::field.helpText}}</div> </div> </div> </div> <div class=form-group ng-if="config.subscriptions.enabled && subscriptionCode"> <div class=form-row> <label for=registration-subscription>{{::lang.values.subscriptionRegisterCode}}</label> <div class=input-field> <input type=text class=input ng-model=account.enterprise_subscription_code placeholder={{::lang.values.subscriptionRegisterCode}} aria-label={{::lang.aria.subscriptionRegisterCode}} id=registration-subscription /> <span class=validation-icon aria-hidden=true></span> </div> </div> </div> <div class=form-row ng-if=::config.collectTermsAcceptanceDuringRegistration> <input id=registration-terms-acceptance class=checkbox type=checkbox required ng-model=account.accept_terms /> <label class="left-align registration-terms-acceptance-label" for=registration-terms-acceptance ng-bind-html=lang.values.termsAndConditionsAcceptance></label> </div> <div class=form-group> <div include-if-exists="\'registerFormExtraContent.html\'"></div> </div> <recaptcha-checkbox ng-if=::recaptcha.enabled class=recaptcha-container action=recaptcha.action on-success=onRecaptchaSuccess on-expired=onRecaptchaExpired /> <div class=form-submit-group> <button type=submit ng-disabled=registering id=registration-submit class="button mobile-bottom" ng-class="{\'loading\': registering, \'loyalty-onboarding-call-to-action\': loyaltyOnboardingStep}"> {{::submitButtonText}} </button> <div class=terms-and-conditions ng-if=::config.loyaltyOnboarding.form.termsAndConditions> <span ng-bind-html=::config.loyaltyOnboarding.form.termsAndConditions></span> </div> </div> <div ng-if=error class="message error reveal form-row" scroll-into-view scroll-container=.modal-content compile=error></div> </form> '},dc785f278d6e6df3ab6e:function(e,r,a){"use strict";a.r(r);var i=a("3dde4251a4e36fb3d2d7"),s=a.n(i),t=a("46f8f4ccfe1b73ca4d0c"),o=a.n(t),n=a("1b561621078ace81c35a"),l=a("fc9c4e3a879f16727654");const d="loyaltyOnboarding";var c=a("c808d8f3b62a083fb08b"),g=a("2befd5a067fda4f72081"),u=a("d4c4cc66df7e88747e6d"),p=a.n(u);const m=/^\d{5}(?:[-\s]*\d{4})?$/;r.default=o.a.module("RegisterFormImprovedDirectiveModule",[]).directive("registerFormImproved",(function(){return{replace:!0,scope:{socialSignOnData:"=?",subscriptionCode:"=?",onRegister:"&?"},template:p.a,controller:["$attrs","$rootScope","$sce","$scope","$timeout","analytics","anonymousIdService","auth","cartService","config","express","lang","recaptchaService","storesService","userAnalytics","utilService","values",function(e,r,a,i,t,u,p,f,v,y,h,b,F,$,q,x,_){var w;if(i.formContext=e.context,i.config=y,i.lang=b,i.invalidFocusFn={},i.trigger=e.trigger,i.recaptcha={enabled:F.isEnabled(),token:null,action:l.a.REGISTER},i.nameRegex=y.namePattern,i.passwordRegex=y.passwordPattern,i.showPassword=!1,i.account={email:"",password:"",loyalty_cards:[{card_number:""}],delivery_address:{},enterprise_subscription_code:i.subscriptionCode||""},i.initialAddress=null,i.requireFullAddress=null===(w=y.shoppingContextProcess.delivery)||void 0===w?void 0:w.requireFullAddress,i.addressLabel=i.requireFullAddress?b.values.address:b.values.postalCode,i.submitButtonText=i.formContext===d?b.values.signUp:b.values.createNewAccount,y.showRegistrationCardHelp&&(i.helpSrcContent=a.trustAsHtml(`<img src="${x.loadAssetImage("images/card-help.jpg")}" aria-labelledby="loyalty-input-help" alt="${b.values.loyaltyCardNumberLocation}" title="${b.values.loyaltyCardNumberLocation}" id="loyalty-input-help">`),i.tooltipExpanded=!1,i.toggleTooltip=function(){i.tooltipExpanded=!i.tooltipExpanded}),i.config.collectAddressDuringRegistration&&i.config.enableDefaultStoreFromAddress&&f.getContext().intent===n.h.DELIVERY){var N,C,R,A;const e=_.states.filter(e=>{var r;return(null===(r=f.user.context)||void 0===r?void 0:r.province)===e.name}),r=e.length?e[0].value:"",a=null===(N=f.user.context)||void 0===N?void 0:N.street_address,s=null===(C=f.user.context)||void 0===C?void 0:C.city,t=(null===(R=f.user.context)||void 0===R?void 0:R.province_short)||r,o=null===(A=f.user.context)||void 0===A?void 0:A.deliveryPostalCode;i.account.delivery_address={address1:a,city:s,province:t,postal_code:o},s&&t?i.cityState=`${s}, ${t}`:D(o),function(e){const{address1:r,city:a,province:s,postal_code:t}=e;r&&a&&s&&t?i.initialAddress={label:`${r}, ${a}, ${s} ${t}`,value:{label:r,detail:`${a}, ${s} ${t}`,location_type:"address",location:{address_line_1:r,city:a,state:s,zip_code:t}}}:a&&s&&t?i.initialAddress={label:`${t} ${a}, ${s}`,value:{label:t,detail:`${a}, ${s}`,location_type:"postal_code",location:{zip_code:t}}}:t&&g.u.api.addressAutocomplete.getICAddressAutocomplete({query:t}).then(e=>{var r;const a=(null==e||null===(r=e.options)||void 0===r?void 0:r.length)&&e.options[0].detail,[s,o]=(null==a?void 0:a.split(", "))||"";i.$apply(()=>{i.initialAddress={label:s&&o?`${t} ${s}, ${o}`:t,value:{label:t,detail:s&&o?`${s}, ${o}`:"",location_type:"postal_code",location:{zip_code:t}}}})})}(i.account.delivery_address)}if(y.enableInstacartAddressAutocomplete?(i.addressField={id:"registration-address",blurred:!1,valid:!1,error:null},i.addressChosenCallback=e=>{i.$apply(()=>{if(null!=e&&e.location){const{location:r}=e;i.account.delivery_address.address1=r.address_line_1,i.account.delivery_address.city=r.city,i.account.delivery_address.province=r.state,i.account.delivery_address.postal_code=r.zip_code}else i.account.delivery_address.address1=null,i.account.delivery_address.city=null,i.account.delivery_address.province=null,i.account.delivery_address.postal_code=null,i.addressField.valid=!1})},i.addressFieldBlur=()=>{i.$apply(()=>{i.addressField.blurred=!0,y.requireAddressDuringRegistration&&!i.account.delivery_address.postal_code?i.addressField.error=b.values.requiredForm.address:i.addressField.error=null,i.account.delivery_address.postal_code&&!i.addressField.error&&(i.addressField.valid=!0)})}):i.addressChosenCallback=e=>{e.address1&&(i.account.delivery_address.address1=e.address1,i.registerForm.address.$setValidity("address",!0)),(e.city||e.province_short||e.postal_code)&&(i.account.delivery_address.city=e.city,i.registerForm.city.$setTouched(),e.city&&i.registerForm.city.$setValidity("city",!0),i.account.delivery_address.province=e.province_short,i.registerForm.province.$setTouched(),e.province_short&&i.registerForm.province.$setValidity("province",!0),i.account.delivery_address.postal_code=e.postal_code,i.registerForm.postalCode.$setTouched(),e.postal_code&&i.registerForm.postalCode.$setValidity("postalCode",!0)),y.requireAddressDuringRegistration||e.address1||(i.registerForm.address.$setValidity("address",!0),i.registerForm.address.$setUntouched()),t(()=>{const e=document.getElementsByClassName("address-input-field ng-invalid");e.length&&e[0].focus()})},i.updateCityStateFromZipCode=D,i.toggleShowPassword=()=>{i.showPassword=!i.showPassword},y.requirePrimaryCardInitDuringRegistration&&(i.account.loyalty_cards[0].primary_card=!0),y.hasLoyalty&&!y.disableLoyaltyOnRegistrationPage&&(i.shouldDisplayLoyalty=!0,y.hasUnataIssuedLoyaltyIds&&"loyaltyRegister"===i.formContext?(i.shouldDisplayLoyaltyToggleLink=!0,i.showLoyaltyIdField=!1):i.showLoyaltyIdField=!0,i.toggleLoyalty=function(){i.showLoyaltyIdField=!i.showLoyaltyIdField}),y.collectPhoneNumbersDuringRegistration&&(i.phoneNumberField=y.deliveryAddressPhoneNumberFields[0],i.account.primary_number_key=i.phoneNumberField.key),i.socialSignOnData&&(i.account.email=i.socialSignOnData.social_email,i.account.social_accounts=s()(i.socialSignOnData.user.social_accounts,e=>(e.status=!0,e)),i.socialSignOnData.user_reg_info)){const{first_name:e="",last_name:r="",phone_number:a=""}=i.socialSignOnData.user_reg_info;y.collectAddressDuringRegistration?(i.account.delivery_address.first_name=e,i.account.delivery_address.last_name=r):(i.account.first_name=e,i.account.last_name=r);const s=i.account.primary_number_key||y.phone.defaultRequired;i.account[s]=a}function D(e){if(m.test(e))return g.u.api.addressAutocomplete.getICAddressAutocomplete({query:e}).then(e=>{var r;if(i.cityState=(null===(r=e.options)||void 0===r?void 0:r.length)&&e.options[0].detail||"",i.cityState){const[e,r]=i.cityState.split(", ");i.account.delivery_address.city=e,i.account.delivery_address.province=r,i.$apply(()=>{i.registerForm.address.$setValidity("address",!0)})}else i.cityState="",i.account.delivery_address.city=null,i.account.delivery_address.province=null,i.$apply(()=>{i.registerForm.address.$setValidity("address",!1)})});i.cityState="",i.account.delivery_address.city=null,i.account.delivery_address.province=null}i.onRecaptchaSuccess=e=>{i.$apply(()=>{i.recaptcha.token=e})},i.onRecaptchaExpired=()=>{i.$apply(()=>{i.recaptcha.token=null})},i.register=async()=>{var e;if(delete i.error,i.registerForm.$invalid)return void document.querySelectorAll(".ng-invalid:not(form)")[0].focus();if(y.enableInstacartAddressAutocomplete&&i.addressField.error)return void document.querySelector(`#${i.addressField.id} input`).focus();if(i.recaptcha.enabled&&!i.recaptcha.token)return void(i.error=i.lang.values.recaptchaError);const a=o.a.copy(i.account);var s;(a.loyalty_cards[0].card_number||(a.loyalty_cards=[]),i.recaptcha.enabled)&&(a.recaptcha={token:i.recaptcha.token,siteKey:null===(s=y.googleRecaptcha)||void 0===s?void 0:s.siteKey});i.registering=!0;const t=i.config.enableDefaultStoreFromAddress&&!(null!==(e=f.getContext())&&void 0!==e&&e.storeNumber||v.countItems()>0)?await async function({address1:e,city:r,province:a,postal_code:i},s){try{const t=e&&r&&a?`${e}, ${r}, ${a}, ${i}`:i,o=await $.getAddressCoordinates(t),n={};s!==c.c.INSTORE_LIST&&(n.show_ecommerce=!0),s===c.c.CATERING?n.show_catering=!0:s===c.c.PICKUP&&(n.show_pickup=!0),o&&(n.lat=o.latitude,n.long=o.longitude);const l=await $.fetch(n);return l.length>0?l[0].id:null}catch(e){return null}}(a.delivery_address,f.getContext().intent):null;return t&&(a.store_id=t),f.updateProfile(a).then(()=>i.saveNotifications()).then(p.updateBackendId).then(()=>t?f.setContext({storeNumber:t}).then(f.sendUserUpdatedStore(f.user)).then(f.sendAvailableStoreContexts(f.user)).then(v.fetch):null).then(()=>{if("loyaltyOnboarding"===i.trigger?q.logUserRegistrationAttempt({success:!0,loyalty_onboarding:!0,improved_registration:i.config.enableImprovedRegistration}):q.logUserRegistrationAttempt({success:!0,improved_registration:i.config.enableImprovedRegistration}),r.$broadcast("registered"),i.registering=!1,u.logFBUserRegistered(),y.icExpress.enabled&&h.getCurrentSubscription(),a.enterprise_subscription_code&&u.logSegmentEvent("subscription.redeem_gift_code",{success:!0,source:"registration"}),i.onRegister)return i.onRegister()}).catch(e=>{"loyaltyOnboarding"===i.trigger?q.logUserRegistrationAttempt({success:!1,loyalty_onboarding:!0,improved_registration:i.config.enableImprovedRegistration}):q.logUserRegistrationAttempt({success:!1,improved_registration:i.config.enableImprovedRegistration}),i.error=e.data?e.data.message:e.message,i.registering=!1,function(e){switch(e.error){case 40002:"This is not a valid email address."===e.dev_message||"This email is already registered."===e.dev_message?document.getElementById("registration-email").focus():document.getElementById("registration-password").focus();break;case 40301:document.getElementById(`registration-telephone-${i.account.primary_number_key}`).focus()}}(e),i.recaptcha.token=null,F.resetLastCheckbox()})}}]}}))}}]);