{"version":3,"sources":["webpack://UnataWidgets/./app/react/components/icExpress/ExpressCountDown/TimerDigit.tsx","webpack://UnataWidgets/./app/react/components/icExpress/ExpressCountDown/ExpressCountDown.tsx"],"names":["TimerDigit","value","isDigit","isRed","enableRetailerTheme","small","styles","createStyles","tokens","base","fontSize","size","font","banner","fontWeight","height","lineHeight","marginRight","baseSmall","h2","backgroundColor","color","brand","primary","dark","InstacartColors","PRIMARY_DARK","borderRadius","neutral","white","padding","width","isDigitSmall","isNotDigit","ui","error","NEGATIVE_STATUS","undefined","useStyles","css","display","justifyContent","numberToDigitArray","number","parseInt","toString","padStart","split","ExpressCountDown","startTime","seconds","setSeconds","useState","interval","useRef","useEffect","current","setInterval","s","clearInterval","id","aria-hidden","timeInSeconds","map","val","item","i"],"mappings":"iQAyEeA,MA9DI,EACjBC,QACAC,WAAU,EACVC,SAAQ,EACRC,uBAAsB,EACtBC,SAAQ,MAER,MAsCMC,EAtCYC,aAAaC,IAAU,CACvCC,KAAM,CACJC,SAAW,GAAEF,EAAOG,KAAKC,KAAKC,WAC9BC,WAAY,IACZC,OAAQ,OACRC,WAAY,OACZC,YAAa,OAEfC,UAAW,CACTR,SAAW,GAAEF,EAAOG,KAAKC,KAAKO,OAC9BJ,OAAQ,OACRC,WAAY,QAEdd,QAAS,CACPkB,gBAAiBhB,EACbI,EAAOa,MAAMC,MAAMC,QAAQC,KAC3BC,IAAgBC,aACpBC,aAAc,MACdN,MAAOb,EAAOa,MAAMO,QAAQC,MAC5BC,QAAS,SACTC,MAAO,QAETC,aAAc,CACZf,YAAa,MACba,QAAS,QACTC,MAAO,QAETE,WAAY,CACVZ,MAAOjB,EAAsBI,EAAOa,MAAMC,MAAMC,QAAQC,KAAOC,IAAgBC,aAC/EK,MAAO,QAET5B,MAAO,CACLiB,gBAAiBhB,EACbI,EAAOa,MAAMa,GAAGC,MAChBV,IAAgBW,gBACpBf,MAAOjB,EAAsBI,EAAOa,MAAMO,QAAQC,WAAQQ,KAG/CC,GAEf,OACE,oBACEC,IAAK,CACHjC,EAAOG,KACPJ,GAASC,EAAOY,UAChBhB,EAAUI,EAAOJ,QAAUI,EAAO2B,WAClC/B,GAAWG,GAASC,EAAO0B,aAC3B7B,GAASG,EAAOH,OANpB,SASGF,KChEP,MAKMqC,EAAY/B,aAAa,KAAM,CACnCE,KAAM,CACJ+B,QAAS,OACTC,eAAiB,aAGfC,EAAsBC,GACnBC,SAASD,EAAOE,WAAY,IAAIA,WAAWC,SAV5B,EAUsD,KAAKC,MAAM,IAsD1EC,UAvCU,EACvB3C,SAAQ,EACR4C,YA7BmB,IA8BnB7C,uBAAsB,MAEtB,MAAO8C,EAASC,GAAcC,mBAASH,GACjCI,EAAWC,mBACXhD,EAASgC,IAef,OAbAiB,oBAAU,KACRF,EAASG,QAAUC,YAAY,KAC7BN,EAAWO,GAAKA,EAAI,IArCZ,KAuCH,IAAMC,cAAcN,EAASG,UACnC,IAEHD,oBAAU,KACJL,GAAW,GACbS,cAAcN,EAASG,UAExB,CAACN,EAASG,IAGX,mBAAKO,GAAG,wBAAwBC,cAAY,OAAOtB,IAAKjC,EAAOG,KAA/D,UApCqBqD,EAqCFZ,EAlCN,IAFGR,EAAmBoB,EAAgB,IAZrC,OAaEpB,EAAmBoB,EAAgB,KAEvCC,IAAIC,IAAO,CAAG9D,QAfZ,MAeqB8D,EAAmBA,UAiC1BD,IAAI,CAACE,EAAMC,IACnC,YAAC,EAAD,CAGE/D,MAAO+C,GAAW,GAAKe,EAAK/D,QAC5BD,MAAOgE,EAAKD,IACZ9D,QAAS+D,EAAK/D,QACdE,oBAAqBA,EACrBC,MAAOA,GALF6D,MAxCUJ","file":"72.js","sourcesContent":["import { createStyles } from '@instacart/cocktail'\nimport { InstacartColors } from '@app/services/express/types'\n\ninterface TimerDigitProps {\n  value: string\n  isDigit?: boolean\n  isRed?: boolean\n  enableRetailerTheme?: boolean\n  small?: boolean\n}\n\nconst TimerDigit = ({\n  value,\n  isDigit = false,\n  isRed = false,\n  enableRetailerTheme = false,\n  small = false,\n}: TimerDigitProps) => {\n  const useStyles = createStyles(tokens => ({\n    base: {\n      fontSize: `${tokens.size.font.banner}px`,\n      fontWeight: 600,\n      height: '49px',\n      lineHeight: '49px',\n      marginRight: '6px',\n    },\n    baseSmall: {\n      fontSize: `${tokens.size.font.h2}px`,\n      height: '36px',\n      lineHeight: '36px',\n    },\n    isDigit: {\n      backgroundColor: enableRetailerTheme\n        ? tokens.color.brand.primary.dark\n        : InstacartColors.PRIMARY_DARK,\n      borderRadius: '4px',\n      color: tokens.color.neutral.white,\n      padding: '0 10px',\n      width: '42px',\n    },\n    isDigitSmall: {\n      marginRight: '4px',\n      padding: '0 8px',\n      width: '31px',\n    },\n    isNotDigit: {\n      color: enableRetailerTheme ? tokens.color.brand.primary.dark : InstacartColors.PRIMARY_DARK,\n      width: '10px',\n    },\n    isRed: {\n      backgroundColor: enableRetailerTheme\n        ? tokens.color.ui.error\n        : InstacartColors.NEGATIVE_STATUS,\n      color: enableRetailerTheme ? tokens.color.neutral.white : undefined,\n    },\n  }))\n  const styles = useStyles()\n\n  return (\n    <span\n      css={[\n        styles.base,\n        small && styles.baseSmall,\n        isDigit ? styles.isDigit : styles.isNotDigit,\n        isDigit && small && styles.isDigitSmall,\n        isRed && styles.isRed,\n      ]}\n    >\n      {value}\n    </span>\n  )\n}\n\nexport default TimerDigit\n","import React, { useEffect, useState, useRef } from 'react'\nimport { createStyles } from '@instacart/cocktail'\nimport TimerDigit from './TimerDigit'\n\nconst DEFAULT_TIME = 4 * 60 // 4 minutes in seconds\nconst SPEED = 1000 // Regular time, 1000ms per second\nconst MINIMUM_MIN_LEN = 2\nconst SEPARATOR = ':'\n\nconst useStyles = createStyles(() => ({\n  base: {\n    display: 'flex',\n    justifyContent: `center`,\n  },\n}))\nconst numberToDigitArray = (number: number) => {\n  return parseInt(number.toString(), 10).toString().padStart(MINIMUM_MIN_LEN, '0').split('')\n}\nconst getReadableTime = (timeInSeconds: number) => {\n  const minDigits = numberToDigitArray(timeInSeconds / 60)\n  const secDigits = numberToDigitArray(timeInSeconds % 60)\n  const digits = [...minDigits, SEPARATOR, ...secDigits]\n  return digits.map(val => ({ isDigit: val !== SEPARATOR, val }))\n}\n\ninterface ExpressCountDownProps {\n  small?: boolean\n  startTime?: number\n  enableRetailerTheme?: boolean\n}\n\nconst ExpressCountDown = ({\n  small = false,\n  startTime = DEFAULT_TIME,\n  enableRetailerTheme = false,\n}: ExpressCountDownProps) => {\n  const [seconds, setSeconds] = useState(startTime)\n  const interval = useRef() as React.MutableRefObject<NodeJS.Timeout>\n  const styles = useStyles()\n\n  useEffect(() => {\n    interval.current = setInterval(() => {\n      setSeconds(s => s - 1)\n    }, SPEED)\n    return () => clearInterval(interval.current)\n  }, [])\n\n  useEffect(() => {\n    if (seconds <= 0) {\n      clearInterval(interval.current)\n    }\n  }, [seconds, interval])\n\n  return (\n    <div id=\"ic-express-count-down\" aria-hidden=\"true\" css={styles.base}>\n      {getReadableTime(seconds).map((item, i) => (\n        <TimerDigit\n          // eslint-disable-next-line react/no-array-index-key\n          key={i}\n          isRed={seconds <= 0 && item.isDigit}\n          value={item.val}\n          isDigit={item.isDigit}\n          enableRetailerTheme={enableRetailerTheme}\n          small={small}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default ExpressCountDown\n"],"sourceRoot":""}