{"version":3,"sources":["webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/mobileSliderSettings.ts","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/MobileSliderHooks.ts","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator/CarouselImageIndicatorHooks.ts","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator/CarouselImageIndicatorThumbnails.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator/CarouselImageIndicatorDots.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator/CarouselImageIndicator.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/PreventScrollWhileSwipeCarousel.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/InpageMobileSlider.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/ZoomableImage.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/FullScreenModePortal.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/FullScreenMobileSlider.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/ProductImageCarouselMobile.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/ProductImageCarouselDesktop.tsx","webpack://UnataWidgets/./app/react/ids/enterprise/molecules/ProductImageCarousel/ProductImageCarousel.tsx"],"names":["mobileSliderSettings","arrows","dots","infinite","lazyLoad","speed","useGoToSlide","sliderRef","useCallback","i","current","slickGoTo","useChangeHandler","onGoToSlide","event","index","currentTarget","dataset","undefined","parseInt","CarouselImageIndicatorThumbnails","slides","styles","theme","thumbnailBtn","cursor","margin","padding","thumbnailBtnActive","border","colors","brandPrimaryRegular","thumbnailImg","backgroundSize","display","height","justifyContent","width","thumbnailsList","flexWrap","marginTop","getStyles","useTheme","changeHandler","length","css","map","slide","isActive","onClick","onMouseEnter","data-index","aria-label","ariaLabel","aria-current","src","alt","aria-hidden","CarouselImageIndicatorDots","button","background","systemGrayscale30","borderRadius","spacing","s8","buttonActive","list","listStyleType","listItem","marginLeft","lineHeight","CarouselImageIndicator","images","activeIndex","label","type","useMemo","image","interpolate","small","PreventScrollWhileSwipeCarousel","children","containerRef","useRef","firstClientX","clientX","preventTouch","e","touches","Math","abs","preventDefault","returnValue","touchStart","useEffect","ref","addEventListener","passive","removeEventListener","InpageMobileSlider","lang","onChange","onImageClick","dotsContainer","goToSlide","settings","afterChange","initialSlide","slider","altText","currentIndex","data-test","large","thumbnailAriaLabel","ZoomableImage","dataTest","imgRef","onUpdate","x","y","scale","img","value","make3dTransformValue","style","setProperty","draggableUnZoomed","FullScreenModePortal","zIndex","container","document","createElement","position","body","appendChild","removeChild","ReactDOM","createPortal","FullScreenMobileSlider","onClose","closeBtn","s16","boxShadow","s32","closeBtnContainer","flex","s12","textAlign","closeBtnIconWrapper","left","top","s24","fullScreenMode","alignItems","overflow","maxHeight","maxWidth","bottom","flexDirection","right","sliderContainerFullScreen","size","color","ProductImageCarouselMobile","zoomEnabled","currentImageWrapper","root","rootWithZoom","paddingRight","zoomBtnContainer","systemGrayscale70","fontSize","marginRight","setActiveIndex","useState","setFullScreenMode","toggleFullScreenMode","role","rootAriaLabel","ScreenReaderText","screenReaderInstructions","number","className","ProductImageCarouselDesktop","layoutImageSection","staticImage","window","open","hideHint","hideCloseButton","zoomType","zoomSrc","ProductImageCarousel","props","browser","is"],"mappings":"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","file":"87.js","sourcesContent":["import { Settings } from 'react-slick'\n\nexport const mobileSliderSettings: Settings = {\n  arrows: false,\n  dots: false,\n  infinite: true,\n  lazyLoad: 'ondemand',\n  speed: 500,\n}\n","import { MutableRefObject, useCallback } from 'react'\nimport Slider from 'react-slick'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const useGoToSlide = (sliderRef: MutableRefObject<Slider | null>) =>\n  useCallback(\n    i => {\n      if (sliderRef.current) {\n        sliderRef.current.slickGoTo(i)\n      }\n    },\n    [sliderRef]\n  )\n","import { MouseEvent, useCallback } from 'react'\nimport { onGoToSlideType } from './types'\n\nexport const useChangeHandler = (onGoToSlide: onGoToSlideType) =>\n  useCallback(\n    (event: MouseEvent) => {\n      const index = (event.currentTarget as HTMLElement)?.dataset?.index\n      if (index !== undefined) {\n        onGoToSlide(parseInt(index, 10))\n      }\n    },\n    [onGoToSlide]\n  )\n","import { Theme, useTheme } from '@instacart/ids-core'\nimport { useChangeHandler } from './CarouselImageIndicatorHooks'\nimport type { ImageIndicatorPropsInternal } from './types'\n\nconst getStyles = ({ theme }: { theme: Theme }) =>\n  ({\n    thumbnailBtn: {\n      cursor: 'pointer',\n      margin: '4px',\n      padding: '2px',\n    },\n    thumbnailBtnActive: {\n      border: `2px solid ${theme.colors.brandPrimaryRegular}`,\n      padding: 0,\n    },\n    thumbnailImg: {\n      backgroundSize: 'cover',\n      display: 'block',\n      height: '36px',\n      justifyContent: 'center',\n      width: '36px',\n    },\n    thumbnailsList: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      marginTop: '32px',\n    },\n  } as const)\n\nexport const CarouselImageIndicatorThumbnails = ({\n  slides = [],\n  onGoToSlide,\n}: ImageIndicatorPropsInternal) => {\n  const theme = useTheme()\n  const styles = getStyles({ theme })\n\n  const changeHandler = useChangeHandler(onGoToSlide)\n\n  if (slides.length < 2) {\n    return null\n  }\n\n  return (\n    <ul css={styles.thumbnailsList}>\n      {slides.map((slide, i) => (\n        <li key={slide.src}>\n          <button\n            css={[styles.thumbnailBtn, slide.isActive && styles.thumbnailBtnActive]}\n            onClick={changeHandler}\n            onMouseEnter={changeHandler}\n            data-index={i}\n            aria-label={slide.ariaLabel}\n            aria-current={slide.isActive}\n          >\n            <img\n              src={slide.src}\n              css={styles.thumbnailImg}\n              alt={slide.ariaLabel}\n              aria-hidden=\"true\"\n            />\n          </button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n","import { spacing, Theme, useTheme } from '@instacart/ids-core'\nimport { useChangeHandler } from './CarouselImageIndicatorHooks'\nimport type { ImageIndicatorPropsInternal } from './types'\n\nconst getStyles = ({ theme }: { theme: Theme }) =>\n  ({\n    button: {\n      background: theme.colors.systemGrayscale30,\n      borderRadius: '50%',\n      height: spacing.s8,\n      width: spacing.s8,\n    },\n    buttonActive: {\n      background: theme.colors.brandPrimaryRegular,\n    },\n    list: {\n      display: 'flex',\n      justifyContent: 'center',\n      listStyleType: 'none',\n      margin: 0,\n      padding: 0,\n    },\n    listItem: {\n      '&:first-of-type': {\n        marginLeft: 0,\n      },\n      height: spacing.s8,\n      lineHeight: `${spacing.s8}px`,\n\n      marginLeft: spacing.s8,\n    },\n  } as const)\n\nexport const CarouselImageIndicatorDots = ({\n  slides = [],\n  onGoToSlide,\n}: ImageIndicatorPropsInternal) => {\n  const theme = useTheme()\n  const styles = getStyles({ theme })\n\n  const changeHandler = useChangeHandler(onGoToSlide)\n\n  if (slides.length < 2) {\n    return null\n  }\n\n  return (\n    <ul css={styles.list}>\n      {slides.map((slide, i) => (\n        <li css={styles.listItem} key={slide.src}>\n          <button\n            onClick={changeHandler}\n            data-index={i}\n            aria-label={slide.ariaLabel}\n            aria-current={slide.isActive}\n            css={[styles.button, slide.isActive && styles.buttonActive]}\n          />\n        </li>\n      ))}\n    </ul>\n  )\n}\n","import interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport { useMemo } from 'react'\nimport { CarouselImageIndicatorThumbnails } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator/CarouselImageIndicatorThumbnails'\nimport { CarouselImageIndicatorProps } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator/types'\nimport { CarouselImageIndicatorDots } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator/CarouselImageIndicatorDots'\n\nexport const CarouselImageIndicator = ({\n  images,\n  activeIndex,\n  label,\n  type,\n  onGoToSlide,\n}: CarouselImageIndicatorProps) => {\n  const slides = useMemo(\n    () =>\n      images.map((image, i) => ({\n        ariaLabel: interpolate(label, { index: i + 1 }),\n        isActive: i === activeIndex,\n        src: image.small,\n      })),\n    [images, activeIndex, label]\n  )\n\n  switch (type) {\n    case 'thumbnails':\n      return <CarouselImageIndicatorThumbnails slides={slides} onGoToSlide={onGoToSlide} />\n    case 'dots':\n      return <CarouselImageIndicatorDots slides={slides} onGoToSlide={onGoToSlide} />\n  }\n}\n","import { ReactNode, useEffect, useRef } from 'react'\n\n// It is strange React-Slick library does not prevent it by default.\n// Inspired by https://github.com/akiran/react-slick/issues/1240\nexport const PreventScrollWhileSwipeCarousel = ({ children }: { children: ReactNode }) => {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const containerRef = useRef<HTMLDivElement | null>(null)\n\n  let firstClientX: number\n  let clientX: number\n\n  const preventTouch = (e: TouchEvent) => {\n    const minValue = 5 // threshold\n\n    clientX = e.touches[0].clientX - firstClientX\n    // Vertical scrolling does not work when you start swiping horizontally.\n    if (Math.abs(clientX) > minValue) {\n      e.preventDefault()\n      e.returnValue = false\n    }\n  }\n\n  const touchStart = (e: TouchEvent) => {\n    firstClientX = e.touches[0].clientX\n  }\n\n  useEffect(() => {\n    const ref = containerRef.current\n    if (ref) {\n      ref.addEventListener('touchstart', touchStart)\n      ref.addEventListener('touchmove', preventTouch, {\n        passive: false,\n      })\n    }\n\n    return () => {\n      if (ref) {\n        ref.removeEventListener('touchstart', touchStart)\n        ref.removeEventListener('touchmove', preventTouch)\n      }\n    }\n  })\n\n  return <div ref={containerRef}>{children}</div>\n}\n","import interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport { useRef } from 'react'\nimport Slider, { Settings } from 'react-slick'\nimport 'slick-carousel/slick/slick.css'\nimport type { ProductImageCarouselProps } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/types'\nimport { spacing } from '@instacart/ids-core'\nimport { mobileSliderSettings } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/mobileSliderSettings'\nimport { useGoToSlide } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/MobileSliderHooks'\nimport { CarouselImageIndicator } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator'\nimport { PreventScrollWhileSwipeCarousel } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/PreventScrollWhileSwipeCarousel'\n\nconst getStyles = () =>\n  ({\n    dotsContainer: {\n      padding: spacing.s8,\n    },\n  } as const)\n\nexport interface InpageMobileSliderProps extends Omit<ProductImageCarouselProps, 'zoomEnabled'> {\n  activeIndex: number\n  onChange: (i: number) => void\n  onImageClick: () => void\n}\n\nexport const InpageMobileSlider = ({\n  images = [],\n  lang,\n  activeIndex,\n  onChange,\n  onImageClick,\n}: InpageMobileSliderProps) => {\n  const styles = getStyles()\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const sliderRef = useRef<Slider | null>(null)\n  const goToSlide = useGoToSlide(sliderRef)\n\n  const settings: Settings = {\n    ...mobileSliderSettings,\n    afterChange: (i: number) => {\n      onChange(i)\n    },\n    initialSlide: activeIndex,\n  } as const\n\n  if (!images?.length) {\n    return null\n  }\n\n  return (\n    <div>\n      <PreventScrollWhileSwipeCarousel>\n        <Slider\n          {...settings}\n          ref={slider => {\n            sliderRef.current = slider\n          }}\n        >\n          {images.map((image, i) => (\n            // zoom is not available for screen reader mode that is why non interactive element used for click handler\n            // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions,jsx-a11y/click-events-have-key-events\n            <img\n              key={image.large}\n              src={image.small}\n              alt={interpolate(image.altText, { currentIndex: i + 1 })}\n              onClick={onImageClick}\n              data-test=\"prd-img-carousel--image\"\n            />\n          ))}\n        </Slider>\n      </PreventScrollWhileSwipeCarousel>\n      {images.length >= 2 && (\n        <div css={styles.dotsContainer}>\n          <CarouselImageIndicator\n            type=\"dots\"\n            images={images}\n            label={lang.thumbnailAriaLabel}\n            activeIndex={activeIndex}\n            onGoToSlide={goToSlide}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n","import { useCallback, useRef } from 'react'\nimport QuickPinchZoom, { make3dTransformValue } from 'react-quick-pinch-zoom'\n\ntype ZoomableImageProps = {\n  src: string\n  alt: string\n  dataTest?: string\n}\n\nexport const ZoomableImage = ({ src, alt, dataTest }: ZoomableImageProps) => {\n  const imgRef = useRef<HTMLImageElement>(null)\n  const onUpdate = useCallback(({ x, y, scale }) => {\n    const { current: img } = imgRef\n\n    if (img) {\n      const value = make3dTransformValue({ scale, x, y })\n\n      img.style.setProperty('transform', value)\n    }\n  }, [])\n\n  return (\n    <QuickPinchZoom onUpdate={onUpdate} draggableUnZoomed={false}>\n      <img ref={imgRef} src={src} alt={alt} data-test={dataTest} />\n    </QuickPinchZoom>\n  )\n}\n","import { ReactNode, useEffect, useMemo } from 'react'\nimport ReactDOM from 'react-dom'\n\nexport const FullScreenModePortal = ({\n  children,\n  zIndex = '1070',\n}: {\n  children: ReactNode\n  zIndex?: string\n}) => {\n  const container = useMemo(() => document.createElement('div'), [])\n\n  useEffect(() => {\n    container.style.zIndex = zIndex\n    container.style.position = 'relative'\n    document.body.appendChild(container)\n    return () => {\n      document.body.removeChild(container)\n    }\n  }, [container, zIndex])\n\n  return ReactDOM.createPortal(children, container)\n}\n","import interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport { useRef } from 'react'\nimport Slider, { Settings } from 'react-slick'\nimport 'slick-carousel/slick/slick.css'\nimport { ZoomableImage } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/ZoomableImage'\nimport type { ProductImageCarouselProps } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/types'\nimport { CloseIcon, spacing } from '@instacart/ids-core'\nimport { FocusOn } from 'react-focus-on'\nimport { FullScreenModePortal } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/FullScreenModePortal'\nimport { mobileSliderSettings } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/mobileSliderSettings'\nimport { useGoToSlide } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/MobileSliderHooks'\nimport { CarouselImageIndicator } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator'\n\nconst getStyles = () =>\n  ({\n    closeBtn: {\n      background: 'white',\n      border: 0,\n      borderRadius: spacing.s16,\n      boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.16)',\n      height: spacing.s32,\n      position: 'relative',\n      width: spacing.s32,\n    },\n    closeBtnContainer: {\n      flex: '0 0 57px',\n      padding: spacing.s12,\n      textAlign: 'right',\n    },\n    closeBtnIconWrapper: {\n      left: '9px',\n      lineHeight: '14px',\n      position: 'absolute',\n      top: '9px',\n    },\n    dotsContainer: {\n      flex: '0 0 56px',\n      padding: spacing.s24,\n    },\n    fullScreenMode: {\n      '& .slick-initialized .slick-slide': {\n        alignItems: 'center',\n        display: 'flex',\n        overflow: 'hidden',\n      },\n      '& .slick-list img': {\n        maxHeight: '100%',\n        maxWidth: '100%',\n      },\n      '& .slick-slide div': {\n        height: '100%',\n        overflow: 'visible',\n        width: '100vw',\n      },\n      '& .slick-slider, & .slick-list, & .slick-track': {\n        height: '100%',\n      },\n      background: 'white',\n      bottom: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      left: 0,\n\n      position: 'fixed',\n      right: 0,\n      top: 0,\n      zIndex: 10,\n    },\n    sliderContainerFullScreen: {\n      flex: '1 1 calc(100vh - 113px)',\n      overflow: 'hidden',\n    },\n  } as const)\n\nexport interface FullScreenMobileSliderProps\n  extends Omit<ProductImageCarouselProps, 'zoomEnabled'> {\n  activeIndex: number\n  onChange: (i: number) => void\n  onClose: () => void\n}\n\nexport const FullScreenMobileSlider = ({\n  images = [],\n  lang,\n  activeIndex,\n  onChange,\n  onClose,\n}: FullScreenMobileSliderProps) => {\n  const styles = getStyles()\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const sliderRef = useRef<Slider | null>(null)\n  const goToSlide = useGoToSlide(sliderRef)\n\n  const settings: Settings = {\n    ...mobileSliderSettings,\n    afterChange: (i: number) => {\n      onChange(i)\n    },\n    initialSlide: activeIndex,\n  } as const\n\n  if (!images?.length) {\n    return null\n  }\n\n  return (\n    <div>\n      <FullScreenModePortal>\n        <FocusOn>\n          <div css={styles.fullScreenMode}>\n            <div css={styles.closeBtnContainer}>\n              <button\n                onClick={onClose}\n                css={styles.closeBtn}\n                data-test=\"prd-img-carousel--btn-close-full-screen\"\n              >\n                <span css={styles.closeBtnIconWrapper}>\n                  <CloseIcon size={14} color=\"systemGrayscale70\" />\n                </span>\n              </button>\n            </div>\n            <div css={styles.sliderContainerFullScreen}>\n              <Slider\n                {...settings}\n                ref={slider => {\n                  sliderRef.current = slider\n                }}\n              >\n                {images.map((image, i) => (\n                  <ZoomableImage\n                    key={image.large}\n                    src={image.large}\n                    alt={interpolate(image.altText, { currentIndex: i + 1 })}\n                    dataTest=\"prd-img-carousel--image\"\n                  />\n                ))}\n              </Slider>\n            </div>\n            {images.length >= 2 && (\n              <div css={styles.dotsContainer}>\n                <CarouselImageIndicator\n                  type=\"dots\"\n                  images={images}\n                  label={lang.thumbnailAriaLabel}\n                  activeIndex={activeIndex}\n                  onGoToSlide={goToSlide}\n                />\n              </div>\n            )}\n          </div>\n        </FocusOn>\n      </FullScreenModePortal>\n    </div>\n  )\n}\n","import interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport { useState } from 'react'\nimport type { ProductImageCarouselProps } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/types'\nimport { spacing, Theme, useTheme } from '@instacart/ids-core'\nimport { ScreenReaderText } from '@app/react/ids/enterprise/atoms/ScreenReaderText'\nimport { InpageMobileSlider } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/InpageMobileSlider'\nimport { FullScreenMobileSlider } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/MobileSlider/FullScreenMobileSlider'\n\nconst getStyles = ({ theme }: { theme: Theme }) => {\n  const currentImageSize = '180px'\n\n  return {\n    currentImageWrapper: {\n      width: currentImageSize,\n    },\n    root: {\n      '& .slick-list img': {\n        maxHeight: currentImageSize,\n        maxWidth: currentImageSize,\n      },\n      display: 'flex',\n\n      justifyContent: 'center',\n    },\n    rootWithZoom: {\n      paddingRight: '28px',\n    },\n    zoomBtnContainer: {\n      color: theme.colors.systemGrayscale70,\n      fontSize: '20px',\n      marginRight: spacing.s8,\n    },\n  } as const\n}\n\nexport const ProductImageCarouselMobile = ({\n  images = [],\n  lang,\n  zoomEnabled,\n}: ProductImageCarouselProps) => {\n  const theme = useTheme()\n  const styles = getStyles({ theme })\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [fullScreenMode, setFullScreenMode] = useState(false)\n\n  const toggleFullScreenMode = () => {\n    if (zoomEnabled) {\n      setFullScreenMode(!fullScreenMode)\n    }\n  }\n\n  if (!images?.length) {\n    return null\n  }\n\n  return (\n    <div\n      css={[styles.root, zoomEnabled && styles.rootWithZoom]}\n      role=\"region\"\n      aria-label={lang.rootAriaLabel}\n    >\n      <ScreenReaderText>\n        {interpolate(lang.screenReaderInstructions, { number: images.length })}\n      </ScreenReaderText>\n\n      {zoomEnabled && (\n        <div css={styles.zoomBtnContainer} aria-hidden=\"true\">\n          <button onClick={toggleFullScreenMode} data-test=\"prd-img-carousel--btn-zoom\">\n            <span className=\"icon-zoom\" />\n          </button>\n        </div>\n      )}\n\n      <div css={styles.currentImageWrapper}>\n        {fullScreenMode ? (\n          <FullScreenMobileSlider\n            activeIndex={activeIndex}\n            onChange={setActiveIndex}\n            onClose={toggleFullScreenMode}\n            images={images}\n            lang={lang}\n          />\n        ) : (\n          <InpageMobileSlider\n            activeIndex={activeIndex}\n            onChange={setActiveIndex}\n            onImageClick={toggleFullScreenMode}\n            images={images}\n            lang={lang}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n","import interpolate from '@instacart/enterprise-services/lang/interpolate'\nimport InnerImageZoom from 'react-inner-image-zoom'\nimport 'react-inner-image-zoom/lib/InnerImageZoom/styles.css'\nimport { useState } from 'react'\nimport { spacing, Theme, useTheme } from '@instacart/ids-core'\nimport type { ProductImageCarouselProps } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/types'\nimport { ScreenReaderText } from '@app/react/ids/enterprise/atoms/ScreenReaderText'\nimport { CarouselImageIndicator } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/CarouselImageIndicator'\n\nconst getStyles = ({ theme }: { theme: Theme }) => {\n  const currentImageSize = '324px'\n\n  return {\n    currentImageWrapper: {\n      height: currentImageSize,\n      overflow: 'hidden',\n    },\n    layoutImageSection: {\n      width: currentImageSize,\n    },\n    root: {\n      width: currentImageSize,\n    },\n    rootWithZoom: {\n      display: 'flex',\n      width: `calc(${currentImageSize} + 28px)`,\n    },\n    staticImage: {\n      maxHeight: '100%',\n      maxWidth: '100%',\n    },\n    zoomBtnContainer: {\n      color: theme.colors.systemGrayscale70,\n      fontSize: '20px',\n      marginRight: spacing.s8,\n    },\n  } as const\n}\n\nexport const ProductImageCarouselDesktop = ({\n  images = [],\n  lang,\n  zoomEnabled,\n}: ProductImageCarouselProps) => {\n  const theme = useTheme()\n  const styles = getStyles({ theme })\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  const onZoomIconClick = () => window.open(images[activeIndex].large)\n\n  if (!images?.length) {\n    return null\n  }\n\n  return (\n    <div\n      css={[styles.root, zoomEnabled && styles.rootWithZoom]}\n      role=\"region\"\n      aria-label={lang.rootAriaLabel}\n    >\n      <ScreenReaderText>\n        {interpolate(lang.screenReaderInstructions, { number: images.length })}\n      </ScreenReaderText>\n\n      {zoomEnabled && (\n        <div css={styles.zoomBtnContainer} aria-hidden=\"true\">\n          <button onClick={onZoomIconClick} data-test=\"prd-img-carousel--btn-zoom\">\n            <span className=\"icon-zoom\" />\n          </button>\n        </div>\n      )}\n\n      <div css={styles.layoutImageSection}>\n        <div css={styles.currentImageWrapper} data-test=\"prd-img-carousel--image\">\n          {zoomEnabled ? (\n            <InnerImageZoom\n              hideHint\n              hideCloseButton\n              zoomType=\"hover\"\n              src={images[activeIndex].small}\n              zoomSrc={images[activeIndex].large}\n              alt={interpolate(images[activeIndex].altText, { currentIndex: activeIndex + 1 })}\n            />\n          ) : (\n            <img\n              src={images[activeIndex].small}\n              alt={interpolate(images[activeIndex].altText, { currentIndex: activeIndex + 1 })}\n              css={styles.staticImage}\n            />\n          )}\n        </div>\n        <CarouselImageIndicator\n          type=\"thumbnails\"\n          images={images}\n          label={lang.thumbnailAriaLabel}\n          activeIndex={activeIndex}\n          onGoToSlide={setActiveIndex}\n        />\n      </div>\n    </div>\n  )\n}\n","import { ProductImageCarouselMobile } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/ProductImageCarouselMobile'\nimport { ProductImageCarouselDesktop } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/ProductImageCarouselDesktop'\nimport { ProductImageCarouselProps } from '@app/react/ids/enterprise/molecules/ProductImageCarousel/types'\nimport browser from '@app/utils/browser'\n\nexport const ProductImageCarousel = (props: ProductImageCarouselProps) => {\n  if (browser.is('mobile') || browser.is('tablet')) {\n    return <ProductImageCarouselMobile {...props} />\n  }\n  return <ProductImageCarouselDesktop {...props} />\n}\n"],"sourceRoot":""}