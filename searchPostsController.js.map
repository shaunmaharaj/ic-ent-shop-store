{"version":3,"sources":["webpack://UnataWidgets/./app/angular/services/contentSearch/baseContentSearch.js","webpack://UnataWidgets/./app/utils/imageUtil.js","webpack://UnataWidgets/./app/angular/services/contentSearch/index.js","webpack://UnataWidgets/./app/angular/services/contentSearch/theFreshMarketContentSearch.js","webpack://UnataWidgets/./app/angular/services/contentSearch/wordPressContentSearch.js","webpack://UnataWidgets/./app/angular/components/search/searchPostsController.js"],"names":["BaseContentSearch","constructor","props","async","searchTerm","page","limit","encodedSearchTerm","encodeURIComponent","response","utils","fetchWithTimeout","this","apiUrl","apiEndpoint","requestHeaders","formatResponse","jsonResponse","json","items","map","formatSearchResult","itemCount","result","clientConfig","config","selectors","getConfig","url","dotComModule","endpoint","getDefaultThumbnailImage","require","TheFreshMarketContentSearch","super","link","id","excerpt","fields","description","thumbnail","search_thumbnail","title","type","category","maxResults","hits","found","WordPressContentSearch","formatContent","unformattedStr","replace","angular","module","controller","$interval","$scope","$state","$stateParams","filterModalService","lang","mobileService","searchService","enableFacetedSearchFilters","state","term","search_term","mobile","skeletonPosts","contentSearchService","ContentSearchServiceClass","class","contentSearchPagination","currentPage","searchPostsPerPage","thumbnailImages","changePage","getContentSearchResults","posts","$on","loading","hideSideNav","loadingInt","length","cancel","push","searchResponse","searchContent","searchTotalLength","searchContentResults","getPageHeaderResults","values","no","resultsFor","openFilterModal","open","content","isSearch","then","getTypeBy","go"],"mappings":"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","file":"searchPostsController.js","sourcesContent":["import { config, utils } from '@instacart/enterprise-services'\n\n/**\n * An abstract content search service class enabling retrieval\n * and formatting of content search results from a\n * partner-developed/provided API.\n */\nexport class BaseContentSearch {\n  constructor(props) {\n    const clientConfig = config.selectors.getConfig()\n    this.apiUrl = props.url || clientConfig.dotComModule.url\n    this.apiEndpoint = props.endpoint || '/search'\n    this.requestHeaders = {\n      'Content-Type': 'application/json',\n    }\n  }\n\n  /**\n   * Submits a content search request to the API\n   * @param {string} searchTerm - the term being searched for\n   * @param {integer} page - the page number to display (each page has a search result count matching limit)\n   * @param {integer} limit - the number of search results to be displayed per page\n   * @return {object} - the response from the API\n   */\n  searchContent = async (searchTerm, page, limit) => {\n    const encodedSearchTerm = encodeURIComponent(searchTerm)\n    const response = await utils.fetchWithTimeout(\n      `${this.apiUrl}${this.apiEndpoint}/${encodedSearchTerm}?limit=${limit}&offset=${\n        page * limit\n      }`,\n      this.requestHeaders\n    )\n    return this.formatResponse(response)\n  }\n\n  /**\n   * A hook that can be overridden to format the response received by from the API\n   * By default, automatically returns formatted search results using the\n   * `formatSearchResult` method and returns the response as JSON.\n   * @param {object} response - the response received from the API\n   * @return {json} the response as JSON\n   */\n  formatResponse = async response => {\n    const jsonResponse = await response.json()\n    const items = jsonResponse.items.map(this.formatSearchResult)\n    const { itemCount } = jsonResponse\n\n    return {\n      items,\n      itemCount,\n    }\n  }\n\n  /**\n   * A hook that can be overridden to format a single search result returned by the API.\n   * Any changes (e.g. sanitizing, replacements, applying default values)\n   * should be done here if needed.\n   * @param {object} result - the search result object\n   * @return {object} - the formatted search result object\n   */\n  formatSearchResult = result => {\n    return result\n  }\n}\n","/**\n * Provides utility functions used when working with images.\n */\n\n/**\n * Returns a default thumbnail image.\n */\nexport const getDefaultThumbnailImage = () => {\n  return require('static/images/no-product-image.jpg')\n}\n","import { BaseContentSearch } from './baseContentSearch'\nimport { TheFreshMarketContentSearch } from './theFreshMarketContentSearch'\nimport { WordPressContentSearch } from './wordPressContentSearch'\n\nexport default { BaseContentSearch, TheFreshMarketContentSearch, WordPressContentSearch }\n","import { utils } from '@instacart/enterprise-services'\nimport { getDefaultThumbnailImage } from '@app/utils/imageUtil'\nimport { BaseContentSearch } from './baseContentSearch'\n\nexport class TheFreshMarketContentSearch extends BaseContentSearch {\n  constructor(props) {\n    super(props)\n    this.maxResults = props.maxResults || 50\n  }\n\n  formatSearchResult = result => {\n    const formattedResult = {\n      link: result.id,\n      excerpt: result.fields.description,\n      thumbnail: result.fields.search_thumbnail\n        ? result.fields.search_thumbnail\n        : getDefaultThumbnailImage(),\n      title: result.fields.title,\n      type: result.fields.category,\n    }\n\n    return formattedResult\n  }\n\n  searchContent = async (searchTerm, page, limit) => {\n    const encodedSearchTerm = encodeURIComponent(searchTerm)\n    const response = await utils.fetchWithTimeout(\n      `${this.apiUrl}${this.apiEndpoint}?search_term=${encodedSearchTerm}&limit=${limit}&offset=${\n        page * limit\n      }&max_results=${this.maxResults}`,\n      this.requestHeaders\n    )\n    return this.formatResponse(response)\n  }\n\n  /**\n   * Formats a response in the format that is required which has:\n   * - items {array} the array of search results\n   * - itemCount {integer} the count of search results\n   */\n  formatResponse = async response => {\n    const jsonResponse = await response.json()\n    const items = jsonResponse.hits ? jsonResponse.hits.map(this.formatSearchResult) : []\n    const itemCount = jsonResponse.found > this.maxResults ? this.maxResults : jsonResponse.found\n\n    return {\n      items,\n      itemCount,\n    }\n  }\n}\n","import { getDefaultThumbnailImage } from '@app/utils/imageUtil'\nimport { BaseContentSearch } from './baseContentSearch'\n\nexport class WordPressContentSearch extends BaseContentSearch {\n  constructor(props) {\n    super(props)\n    this.apiEndpoint = props.endpoint || '/wp-json/unata/v2/search'\n  }\n\n  formatSearchResult = result => {\n    result.excerpt = this.formatContent(result.excerpt)\n    // eslint-disable-next-line no-unused-expressions\n    result.thumbnail ? result.thumbnail : (result.thumbnail = getDefaultThumbnailImage())\n\n    return result\n  }\n\n  /**\n   * Applies some formatting when interacting with the Wordpress API responses\n   * @param {string} unformattedStr - the unformatted string\n   */\n  formatContent = unformattedStr => {\n    return unformattedStr.replace(/<\\/?p[^>]*>/g, '')\n  }\n}\n","import angular from 'angular'\nimport ContentSearchServiceClass from '@app/angular/services/contentSearch'\n\nexport default angular\n  .module('SearchPostsControllerModule', [])\n  .controller(\n    'SearchPostsController',\n    function (\n      $interval,\n      $scope,\n      $state,\n      $stateParams,\n      config,\n      filterModalService,\n      lang,\n      mobileService,\n      searchService\n    ) {\n      $scope.enableFacetedSearchFilters = config.enableFacetedSearchFilters\n      $scope.config = config\n      $scope.state = $state\n      $scope.term = $stateParams.search_term\n      $scope.mobile = mobileService\n      $scope.skeletonPosts = []\n\n      // Configure the Search API\n      const contentSearchService = new ContentSearchServiceClass[config.contentSearchService.class](\n        config.contentSearchService.props\n      )\n\n      // Pagination for Content Search Results\n      $scope.contentSearchPagination = {\n        currentPage: 1,\n        limit: config.dotComModule.searchPostsPerPage,\n      }\n\n      // Mapping of postId: postThumbnail\n      $scope.thumbnailImages = {}\n\n      // Call the offset posts on page change\n\n      $scope.changePage = () => {\n        $scope.getContentSearchResults()\n        $scope.skeletonPosts = []\n        delete $scope.posts\n      }\n\n      $scope.$on('$stateChangeStart', () => {\n        $scope.loading = true\n        delete $scope.posts\n      })\n\n      // Side Nav Show\n\n      $scope.hideSideNav = true\n\n      $scope.getContentSearchResults = async () => {\n        const loadingInt = $interval(() => {\n          if (($scope.posts && $scope.posts.length) || $scope.skeletonPosts.length >= 5) {\n            $interval.cancel(loadingInt)\n          } else {\n            $scope.skeletonPosts.push({})\n          }\n        }, 500)\n\n        const searchResponse = await contentSearchService.searchContent(\n          $scope.term,\n          $scope.contentSearchPagination.currentPage - 1,\n          $scope.contentSearchPagination.limit\n        )\n        $scope.searchTotalLength = searchResponse.itemCount\n        $scope.searchContentResults = searchResponse.items\n      }\n\n      $scope.getContentSearchResults()\n\n      $scope.getPageHeaderResults = () => {\n        return $scope.searchContentResults\n          ? `${$scope.searchTotalLength ? $scope.searchTotalLength : lang.values.no} ${\n              lang.values.resultsFor\n            }\"${$scope.term}\"`\n          : ''\n      }\n\n      $scope.openFilterModal = function () {\n        filterModalService\n          .open({\n            content: 'Content',\n            isSearch: true,\n          })\n          .then(({ content }) => {\n            const type = searchService.getTypeBy(content)\n\n            if (type) {\n              $state.go(type.state)\n            }\n          })\n      }\n    }\n  )\n"],"sourceRoot":""}